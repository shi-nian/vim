!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
#	plugin/mark.vim	/^	nmap <unique> <silent> # <Plug>MarkSearchPrev$/;"	m
%	plugin/matchit.vim	/^nnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'n') <CR>$/;"	m
%	plugin/matchit.vim	/^onoremap <silent> %  v:<C-U>call <SID>Match_wrapper('',1,'o') <CR>$/;"	m
%	plugin/matchit.vim	/^vnoremap <silent> %  :<C-U>call <SID>Match_wrapper('',1,'v') <CR>m'gv``$/;"	m
*	plugin/mark.vim	/^	nmap <unique> <silent> * <Plug>MarkSearchNext$/;"	m
+=	plugin/autotag.vim	/^            cmd += " '%s'" % source$/;"	m
<C-G>S	plugin/surround.vim	/^  imap      <C-G>S <Plug>ISurround$/;"	m
<C-G>s	plugin/surround.vim	/^  imap      <C-G>s <Plug>Isurround$/;"	m
<C-R>	ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> <C-R> <C-R>:JSLintUpdate<CR>$/;"	m
<C-S>	plugin/surround.vim	/^    imap    <C-S> <Plug>Isurround$/;"	m
<Leader>#	plugin/mark.vim	/^	nmap <unique> <silent> <Leader># <Plug>MarkSearchCurrentPrev$/;"	m
<Leader>*	plugin/mark.vim	/^	nmap <unique> <silent> <Leader>* <Plug>MarkSearchCurrentNext$/;"	m
<Leader>/	plugin/mark.vim	/^	nmap <unique> <silent> <Leader>\/ <Plug>MarkSearchAnyNext$/;"	m
<Leader>?	plugin/mark.vim	/^	nmap <unique> <silent> <Leader>? <Plug>MarkSearchAnyPrev$/;"	m
<Leader>caL	plugin/calendar.vim	/^  nmap <unique> <Leader>caL <Plug>CalendarH$/;"	m
<Leader>cal	plugin/calendar.vim	/^  nmap <unique> <Leader>cal <Plug>CalendarV$/;"	m
<Leader>m	plugin/mark.vim	/^	nmap <unique> <silent> <Leader>m <Plug>MarkSet$/;"	m
<Leader>m	plugin/mark.vim	/^	vmap <unique> <silent> <Leader>m <Plug>MarkSet$/;"	m
<Leader>n	plugin/mark.vim	/^	nmap <unique> <silent> <Leader>n <Plug>MarkClear$/;"	m
<Leader>o	plugin/gnuchlog.vim	/^    nmap <unique> <Leader>o <Plug>GnuchlogOpen$/;"	m
<Leader>r	plugin/mark.vim	/^	nmap <unique> <silent> <Leader>r <Plug>MarkRegex$/;"	m
<Leader>r	plugin/mark.vim	/^	vmap <unique> <silent> <Leader>r <Plug>MarkRegex$/;"	m
<Plug>(neocomplcache_snippets_expand)	autoload/neocomplcache/sources/snippets_complete.vim	/^inoremap <silent><expr> <Plug>(neocomplcache_snippets_expand) <SID>trigger(<SID>SID_PREFIX().'snippets_expand')$/;"	m
<Plug>(neocomplcache_snippets_jump)	autoload/neocomplcache/sources/snippets_complete.vim	/^inoremap <silent><expr> <Plug>(neocomplcache_snippets_jump) <SID>trigger(<SID>SID_PREFIX().'snippets_jump')$/;"	m
<Plug>CalendarH	plugin/calendar.vim	/^nnoremap <silent> <Plug>CalendarH :cal Calendar(1)<CR>$/;"	m
<Plug>CalendarV	plugin/calendar.vim	/^nnoremap <silent> <Plug>CalendarV :cal Calendar(0)<CR>$/;"	m
<Plug>Csurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Csurround  :<C-U>call <SID>changesurround()<CR>$/;"	m
<Plug>Dsurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Dsurround  :<C-U>call <SID>dosurround(<SID>inputtarget())<CR>$/;"	m
<Plug>GnuchlogOpen	plugin/gnuchlog.vim	/^nmap <silent> <Plug>GnuchlogOpen :call <SID>Open()<CR>$/;"	m
<Plug>ISurround	plugin/surround.vim	/^inoremap <silent> <Plug>ISurround  <C-R>=<SID>insert(1)<CR>$/;"	m
<Plug>Isurround	plugin/surround.vim	/^inoremap <silent> <Plug>Isurround  <C-R>=<SID>insert()<CR>$/;"	m
<Plug>MarkAllClear	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkAllClear :<C-u>call mark#DoMark()<CR>$/;"	m
<Plug>MarkClear	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkClear :<C-u>call mark#DoMark(mark#CurrentMark()[0])<CR>$/;"	m
<Plug>MarkRegex	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkRegex :<C-u>call mark#MarkRegex('')<CR>$/;"	m
<Plug>MarkRegex	plugin/mark.vim	/^vnoremap <silent> <Plug>MarkRegex <C-\\><C-n>:call mark#MarkRegex(mark#GetVisualSelectionAsRegexp())<CR>$/;"	m
<Plug>MarkSearchAnyNext	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkSearchAnyNext     :<C-u>call mark#SearchAnyMark(0)<CR>$/;"	m
<Plug>MarkSearchAnyPrev	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkSearchAnyPrev     :<C-u>call mark#SearchAnyMark(1)<CR>$/;"	m
<Plug>MarkSearchCurrentNext	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkSearchCurrentNext :<C-u>call mark#SearchCurrentMark(0)<CR>$/;"	m
<Plug>MarkSearchCurrentPrev	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkSearchCurrentPrev :<C-u>call mark#SearchCurrentMark(1)<CR>$/;"	m
<Plug>MarkSearchNext	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkSearchNext        :<C-u>if !mark#SearchNext(0)<Bar>execute 'normal! *zv'<Bar>endif<CR>$/;"	m
<Plug>MarkSearchPrev	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkSearchPrev        :<C-u>if !mark#SearchNext(1)<Bar>execute 'normal! #zv'<Bar>endif<CR>$/;"	m
<Plug>MarkSet	plugin/mark.vim	/^nnoremap <silent> <Plug>MarkSet   :<C-u>call mark#MarkCurrentWord()<CR>$/;"	m
<Plug>MarkSet	plugin/mark.vim	/^vnoremap <silent> <Plug>MarkSet   <C-\\><C-n>:call mark#DoMark(mark#GetVisualSelectionAsLiteralPattern())<CR>$/;"	m
<Plug>VCSAdd	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSAdd :VCSAdd<CR>$/;"	m
<Plug>VCSAnnotate	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate<CR>$/;"	m
<Plug>VCSClearAndGotoOriginal	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!<CR>$/;"	m
<Plug>VCSCommit	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSCommit :VCSCommit<CR>$/;"	m
<Plug>VCSDelete	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSDelete :VCSDelete<CR>$/;"	m
<Plug>VCSDiff	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSDiff :VCSDiff<CR>$/;"	m
<Plug>VCSGotoOriginal	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal<CR>$/;"	m
<Plug>VCSInfo	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSInfo :VCSInfo<CR>$/;"	m
<Plug>VCSLock	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSLock :VCSLock<CR>$/;"	m
<Plug>VCSLog	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSLog :VCSLog<CR>$/;"	m
<Plug>VCSRevert	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSRevert :VCSRevert<CR>$/;"	m
<Plug>VCSReview	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSReview :VCSReview<CR>$/;"	m
<Plug>VCSSplitAnnotate	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!<CR>$/;"	m
<Plug>VCSStatus	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSStatus :VCSStatus<CR>$/;"	m
<Plug>VCSUnlock	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSUnlock :VCSUnlock<CR>$/;"	m
<Plug>VCSUpdate	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSUpdate :VCSUpdate<CR>$/;"	m
<Plug>VCSVimDiff	plugin/vcscommand.vim	/^nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff<CR>$/;"	m
<Plug>VSurround	plugin/surround.vim	/^vnoremap <silent> <Plug>VSurround  :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 1 : 0)<CR>$/;"	m
<Plug>VgSurround	plugin/surround.vim	/^vnoremap <silent> <Plug>VgSurround :<C-U>call <SID>opfunc(visualmode(),visualmode() ==# 'V' ? 0 : 1)<CR>$/;"	m
<Plug>Vm_goto_next_sign	:call	plugin/visualmark.vim	/^nnoremap <silent> <script> <Plug>Vm_goto_next_sign	:call Vm_goto_next_sign()<cr>$/;"	m
<Plug>Vm_goto_prev_sign	:call	plugin/visualmark.vim	/^nnoremap <silent> <script> <Plug>Vm_goto_prev_sign	:call Vm_goto_prev_sign()<cr>$/;"	m
<Plug>Vm_toggle_sign	:call	plugin/visualmark.vim	/^nnoremap <silent> <script> <Plug>Vm_toggle_sign	:call Vm_toggle_sign()<cr>$/;"	m
<Plug>Vsurround	plugin/surround.vim	/^vnoremap <silent> <Plug>Vsurround  :<C-U>call <SID>opfunc(visualmode())<CR>$/;"	m
<Plug>YSsurround	plugin/surround.vim	/^nnoremap <silent> <Plug>YSsurround :<C-U>call <SID>opfunc2(v:count1)<CR>$/;"	m
<Plug>YSurround	plugin/surround.vim	/^nnoremap <silent> <Plug>YSurround  :<C-U>set opfunc=<SID>opfunc2<CR>g@$/;"	m
<Plug>Yssurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Yssurround :<C-U>call <SID>opfunc(v:count1)<CR>$/;"	m
<Plug>Ysurround	plugin/surround.vim	/^nnoremap <silent> <Plug>Ysurround  :<C-U>set opfunc=<SID>opfunc<CR>g@$/;"	m
<SID>xx	autoload/rails.vim	/^map <SID>xx <SID>xx$/;"	m
<c-r><tab>	after/plugin/snipMate.vim	/^ino <silent> <c-r><tab> <c-r>=ShowAvailableSnips()<cr>$/;"	m
<leader>ca	plugin/NERD_commenter.vim	/^        nmap <leader>ca <plug>NERDCommenterAltDelims$/;"	m
<plug>NERDCommenterAlignBoth	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignBoth :call NERDComment(0, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignBoth	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignBoth <ESC>:call NERDComment(1, "alignBoth")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterAlignLeft :call NERDComment(0, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAlignLeft	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterAlignLeft <ESC>:call NERDComment(1, "alignLeft")<cr>$/;"	m
<plug>NERDCommenterAltDelims	plugin/NERD_commenter.vim	/^nnoremap <plug>NERDCommenterAltDelims :call <SID>SwitchToAlternativeDelimiters(1)<cr>$/;"	m
<plug>NERDCommenterAppend	plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterAppend :call NERDComment(0, "append")<cr>$/;"	m
<plug>NERDCommenterComment	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterComment :call NERDComment(0, "norm")<cr>$/;"	m
<plug>NERDCommenterComment	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterComment <ESC>:call NERDComment(1, "norm")<cr>$/;"	m
<plug>NERDCommenterInInsert	plugin/NERD_commenter.vim	/^inoremap <silent> <plug>NERDCommenterInInsert <SPACE><BS><ESC>:call NERDComment(0, "insert")<CR>$/;"	m
<plug>NERDCommenterInvert	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterInvert :call NERDComment(0, "invert")<CR>$/;"	m
<plug>NERDCommenterInvert	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterInvert <ESC>:call NERDComment(1, "invert")<CR>$/;"	m
<plug>NERDCommenterMinimal	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterMinimal :call NERDComment(0, "minimal")<cr>$/;"	m
<plug>NERDCommenterMinimal	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterMinimal <ESC>:call NERDComment(1, "minimal")<cr>$/;"	m
<plug>NERDCommenterNest	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterNest :call NERDComment(0, "nested")<cr>$/;"	m
<plug>NERDCommenterNest	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterNest <ESC>:call NERDComment(1, "nested")<cr>$/;"	m
<plug>NERDCommenterSexy	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterSexy :call NERDComment(0, "sexy")<CR>$/;"	m
<plug>NERDCommenterSexy	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterSexy <ESC>:call NERDComment(1, "sexy")<CR>$/;"	m
<plug>NERDCommenterToEOL	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToEOL :call NERDComment(0, "toEOL")<cr>$/;"	m
<plug>NERDCommenterToggle	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterToggle :call NERDComment(0, "toggle")<cr>$/;"	m
<plug>NERDCommenterToggle	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterToggle <ESC>:call NERDComment(1, "toggle")<cr>$/;"	m
<plug>NERDCommenterUncomment	plugin/NERD_commenter.vim	/^nnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(0, "uncomment")<cr>$/;"	m
<plug>NERDCommenterUncomment	plugin/NERD_commenter.vim	/^vnoremap <silent> <plug>NERDCommenterUncomment :call NERDComment(1, "uncomment")<cr>$/;"	m
<plug>NERDCommenterYank	plugin/NERD_commenter.vim	/^nmap <silent> <plug>NERDCommenterYank :call NERDComment(0, "yank")<CR>$/;"	m
<plug>NERDCommenterYank	plugin/NERD_commenter.vim	/^vmap <silent> <plug>NERDCommenterYank <ESC>:call NERDComment(1, "yank")<CR>$/;"	m
<s-tab>	after/plugin/snipMate.vim	/^ino <silent> <s-tab> <c-r>=BackwardsSnippet()<cr>$/;"	m
<tab>	after/plugin/snipMate.vim	/^ino <silent> <tab> <c-r>=TriggerSnippet()<cr>$/;"	m
=	plugin/autotag.vim	/^         cmd = "%s -a " % (self.ctags_cmd,)$/;"	m
=	plugin/autotag.vim	/^         cmd = "%s -f %s -a " % (self.ctags_cmd, self.tags_file)$/;"	m
ABOVE_NORMAL_PRIORITY_CLASS	autoload/conque_term/conque_win32_util.py	/^ABOVE_NORMAL_PRIORITY_CLASS = 0x00008000$/;"	v
AR	ruby/command-t/Makefile	/^AR = ar$/;"	m
ARCHHDRDIR	ruby/command-t/Makefile	/^ARCHHDRDIR    = $(rubyhdrdir)\/$(arch)\/ruby$(target_prefix)$/;"	m
ARCH_FLAG	ruby/command-t/Makefile	/^ARCH_FLAG = $/;"	m
Abbrev	autoload/rails.vim	/^function! s:Abbrev(bang,...) abort$/;"	f
AcpDisable	plugin/acp.vim	/^command! -bar -narg=0 AcpDisable call acp#disable()$/;"	c
AcpEnable	plugin/acp.vim	/^command! -bar -narg=0 AcpEnable  call acp#enable()$/;"	c
AcpLock	plugin/acp.vim	/^command! -bar -narg=0 AcpLock    call acp#lock()$/;"	c
AcpUnlock	plugin/acp.vim	/^command! -bar -narg=0 AcpUnlock  call acp#unlock()$/;"	c
ActivateJSLintQuickFixWindow	ftplugin/javascript/jslint.vim	/^    function s:ActivateJSLintQuickFixWindow()$/;"	f
AddBracketExpand	autoload/rails.vim	/^function! s:AddBracketExpand(abbr,expn)$/;"	f
AddColonExpand	autoload/rails.vim	/^function! s:AddColonExpand(abbr,expn)$/;"	f
AddLeftDelim	plugin/NERD_commenter.vim	/^function s:AddLeftDelim(delim, theLine)$/;"	f
AddLeftDelimAligned	plugin/NERD_commenter.vim	/^function s:AddLeftDelimAligned(delim, theLine, alignIndx)$/;"	f
AddNewChangeLogEntry	plugin/gnuchlog.vim	/^function! AddNewChangeLogEntry()$/;"	f
AddParenExpand	autoload/rails.vim	/^function! s:AddParenExpand(abbr,expn,...)$/;"	f
AddRightDelim	plugin/NERD_commenter.vim	/^function s:AddRightDelim(delim, theLine)$/;"	f
AddRightDelimAligned	plugin/NERD_commenter.vim	/^function s:AddRightDelimAligned(delim, theLine, alignIndx)$/;"	f
AddScopedTags	plugin/tagbar.vim	/^function! s:AddScopedTags(tags, processedtags, parent, depth,$/;"	f
AddSelectiveExpand	autoload/rails.vim	/^function! s:AddSelectiveExpand(abbr,pat,expn,...)$/;"	f
AddTabExpand	autoload/rails.vim	/^function! s:AddTabExpand(abbr,expn)$/;"	f
Agrep	plugin/grep.vim	/^command! -nargs=* -complete=file Agrep$/;"	c
AgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file AgrepAdd$/;"	c
Agrep_Path	plugin/grep.vim	/^    let Agrep_Path = 'agrep'$/;"	v
AltMultipart	plugin/NERD_commenter.vim	/^function s:AltMultipart()$/;"	f
Alternate	autoload/rails.vim	/^function! s:Alternate(cmd,line1,line2,count,...)$/;"	f
Animate	plugin/matrix.vim	/^function! s:Animate()$/;"	f
AnyMark	autoload/mark.vim	/^function! s:AnyMark()$/;"	f
AppendCommentToLine	plugin/NERD_commenter.vim	/^function s:AppendCommentToLine()$/;"	f
Asyncer	autoload/l9/async.py	/^class Asyncer:$/;"	c
AutoComplPopDisable	plugin/acp.vim	/^command! -bar -narg=0 AutoComplPopDisable AcpDisable$/;"	c
AutoComplPopEnable	plugin/acp.vim	/^command! -bar -narg=0 AutoComplPopEnable  AcpEnable$/;"	c
AutoComplPopLock	plugin/acp.vim	/^command! -bar -narg=0 AutoComplPopLock    AcpLock$/;"	c
AutoComplPopUnlock	plugin/acp.vim	/^command! -bar -narg=0 AutoComplPopUnlock  AcpUnlock$/;"	c
AutoTag	plugin/autotag.vim	/^function! AutoTag()$/;"	f
AutoTagDebug	plugin/autotag.vim	/^function! AutoTagDebug()$/;"	f
AutoUpdate	plugin/tagbar.vim	/^function! s:AutoUpdate(fname)$/;"	f
BELOW_NORMAL_PRIORITY_CLASS	autoload/conque_term/conque_win32_util.py	/^BELOW_NORMAL_PRIORITY_CLASS = 0x00004000$/;"	v
BINDIR	ruby/command-t/Makefile	/^BINDIR        = $(bindir)$/;"	m
BackwardsSnippet	plugin/snipMate.vim	/^fun! BackwardsSnippet()$/;"	f
BaseTag._getPrefix	plugin/tagbar.vim	/^function! s:BaseTag._getPrefix() dict$/;"	f
BaseTag._init	plugin/tagbar.vim	/^function! s:BaseTag._init(name) dict$/;"	f
BaseTag.closeFold	plugin/tagbar.vim	/^function! s:BaseTag.closeFold() dict$/;"	f
BaseTag.getClosedParentTline	plugin/tagbar.vim	/^function! s:BaseTag.getClosedParentTline() dict$/;"	f
BaseTag.getPrototype	plugin/tagbar.vim	/^function! s:BaseTag.getPrototype() dict$/;"	f
BaseTag.initFoldState	plugin/tagbar.vim	/^function! s:BaseTag.initFoldState() dict$/;"	f
BaseTag.isFoldable	plugin/tagbar.vim	/^function! s:BaseTag.isFoldable() dict$/;"	f
BaseTag.isFolded	plugin/tagbar.vim	/^function! s:BaseTag.isFolded() dict$/;"	f
BaseTag.isKindheader	plugin/tagbar.vim	/^function! s:BaseTag.isKindheader() dict$/;"	f
BaseTag.isNormalTag	plugin/tagbar.vim	/^function! s:BaseTag.isNormalTag() dict$/;"	f
BaseTag.isPseudoTag	plugin/tagbar.vim	/^function! s:BaseTag.isPseudoTag() dict$/;"	f
BaseTag.openFold	plugin/tagbar.vim	/^function! s:BaseTag.openFold() dict$/;"	f
BaseTag.openParents	plugin/tagbar.vim	/^function! s:BaseTag.openParents() dict$/;"	f
BaseTag.setFolded	plugin/tagbar.vim	/^function! s:BaseTag.setFolded(folded) dict$/;"	f
Bgrep	plugin/grep.vim	/^command! -nargs=* Bgrep$/;"	c
BgrepAdd	plugin/grep.vim	/^command! -nargs=* BgrepAdd$/;"	c
Bookmark.AddBookmark	plugin/NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	plugin/NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	plugin/NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	plugin/NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.GetSelected	plugin/NERD_tree.vim	/^function! s:Bookmark.GetSelected()$/;"	f
Bookmark.InvalidBookmarks	plugin/NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	plugin/NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	plugin/NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	plugin/NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.activate	plugin/NERD_tree.vim	/^function! s:Bookmark.activate()$/;"	f
Bookmark.compareTo	plugin/NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	plugin/NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	plugin/NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	plugin/NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.openInNewTab	plugin/NERD_tree.vim	/^function! s:Bookmark.openInNewTab(options)$/;"	f
Bookmark.setPath	plugin/NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	plugin/NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	plugin/NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	plugin/NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
BufAbbreviations	autoload/rails.vim	/^function! s:BufAbbreviations()$/;"	f
BufCommands	autoload/rails.vim	/^function! s:BufCommands()$/;"	f
BufDatabase	autoload/rails.vim	/^function! s:BufDatabase(...)$/;"	f
BufFinderCommands	autoload/rails.vim	/^function! s:BufFinderCommands()$/;"	f
BufInit	plugin/rails.vim	/^function! s:BufInit(path)$/;"	f
BufInitStatusline	autoload/rails.vim	/^function! s:BufInitStatusline()$/;"	f
BufMappings	autoload/rails.vim	/^function! s:BufMappings()$/;"	f
BufModelines	autoload/rails.vim	/^function! s:BufModelines()$/;"	f
BufNavCommands	autoload/rails.vim	/^function! s:BufNavCommands()$/;"	f
BufScriptWrappers	autoload/rails.vim	/^function! s:BufScriptWrappers()$/;"	f
BufSettings	autoload/rails.vim	/^function! s:BufSettings()$/;"	f
BufSyntax	autoload/rails.vim	/^function! s:BufSyntax()$/;"	f
BufferFinder	ruby/command-t/finder/buffer_finder.rb	/^  class BufferFinder < Finder$/;"	c	class:CommandT
BufferScanner	ruby/command-t/scanner/buffer_scanner.rb	/^  class BufferScanner < Scanner$/;"	c	class:CommandT
BuildTabStops	autoload/snipMate.vim	/^fun s:BuildTabStops(snip, lnum, col, indent)$/;"	f
CAPSLOCK_ON	autoload/conque_term/conque_win32_util.py	/^CAPSLOCK_ON = 0x0080$/;"	v
CC	ruby/command-t/Makefile	/^CC = gcc$/;"	m
CFLAGS	ruby/command-t/Makefile	/^CFLAGS   = -fPIC $(cflags)  -fPIC $/;"	m
CHAR_INFO	autoload/conque_term/conque_win32_util.py	/^class CHAR_INFO(Structure):$/;"	c
CHAR_UNION	autoload/conque_term/conque_win32_util.py	/^class CHAR_UNION(Union):$/;"	c
CLEANFILES	ruby/command-t/Makefile	/^CLEANFILES = mkmf.log$/;"	m
CLEANLIBS	ruby/command-t/Makefile	/^CLEANLIBS     = $(TARGET).so $/;"	m
CLEANOBJS	ruby/command-t/Makefile	/^CLEANOBJS     = *.o  *.bak$/;"	m
CONQUE_COLOR_SEQUENCE	autoload/conque_term/conque_globals.py	/^CONQUE_COLOR_SEQUENCE = ($/;"	v
CONQUE_CTL	autoload/conque_term/conque_globals.py	/^CONQUE_CTL = {$/;"	v
CONQUE_ESCAPE	autoload/conque_term/conque_globals.py	/^CONQUE_ESCAPE = {$/;"	v
CONQUE_ESCAPE_CHARSET	autoload/conque_term/conque_globals.py	/^CONQUE_ESCAPE_CHARSET = {$/;"	v
CONQUE_ESCAPE_HASH	autoload/conque_term/conque_globals.py	/^CONQUE_ESCAPE_HASH = {$/;"	v
CONQUE_ESCAPE_PLAIN	autoload/conque_term/conque_globals.py	/^CONQUE_ESCAPE_PLAIN = {$/;"	v
CONQUE_ESCAPE_QUESTION	autoload/conque_term/conque_globals.py	/^CONQUE_ESCAPE_QUESTION = {$/;"	v
CONQUE_FONT	autoload/conque_term/conque_globals.py	/^CONQUE_FONT = {$/;"	v
CONQUE_GRAPHICS_SET	autoload/conque_term/conque_globals.py	/^CONQUE_GRAPHICS_SET = [$/;"	v
CONQUE_MAX_SYNTAX_LINES	autoload/conque_term/conque_globals.py	/^CONQUE_MAX_SYNTAX_LINES = 200$/;"	v
CONQUE_PYTHON_VERSION	autoload/conque_term/conque_globals.py	/^CONQUE_PYTHON_VERSION = sys.version_info[0]$/;"	v
CONQUE_PYTHON_VERSION	autoload/conque_term/conque_sole_shared_memory.py	/^CONQUE_PYTHON_VERSION = sys.version_info[0]$/;"	v
CONQUE_SEQ_REGEX	autoload/conque_term/conque_globals.py	/^CONQUE_SEQ_REGEX = re.compile("(\\x1b\\[?\\??#?[0-9;]*[a-zA-Z0-9@=>]|\\x1b\\][0-9];.*?\\x07|[\\x01-\\x0f]|\\x1b\\([AB0])")$/;"	v
CONQUE_SEQ_REGEX_CHAR	autoload/conque_term/conque_globals.py	/^CONQUE_SEQ_REGEX_CHAR = re.compile("^\\x1b[()]")$/;"	v
CONQUE_SEQ_REGEX_CSI	autoload/conque_term/conque_globals.py	/^CONQUE_SEQ_REGEX_CSI = re.compile("^\\x1b\\[")$/;"	v
CONQUE_SEQ_REGEX_CTL	autoload/conque_term/conque_globals.py	/^CONQUE_SEQ_REGEX_CTL = re.compile("^[\\x01-\\x0f]$")$/;"	v
CONQUE_SEQ_REGEX_ESC	autoload/conque_term/conque_globals.py	/^CONQUE_SEQ_REGEX_ESC = re.compile("^\\x1b.$")$/;"	v
CONQUE_SEQ_REGEX_HASH	autoload/conque_term/conque_globals.py	/^CONQUE_SEQ_REGEX_HASH = re.compile("^\\x1b#")$/;"	v
CONQUE_SEQ_REGEX_TITLE	autoload/conque_term/conque_globals.py	/^CONQUE_SEQ_REGEX_TITLE = re.compile("^\\x1b\\]")$/;"	v
CONQUE_SOLE_BUFFER_LENGTH	autoload/conque_term/conque_globals.py	/^CONQUE_SOLE_BUFFER_LENGTH = 1000$/;"	v
CONQUE_SOLE_BUFFER_REDRAW	autoload/conque_term/conque_globals.py	/^CONQUE_SOLE_BUFFER_REDRAW = 500$/;"	v
CONQUE_SOLE_COMMANDS_SIZE	autoload/conque_term/conque_globals.py	/^CONQUE_SOLE_COMMANDS_SIZE = 255$/;"	v
CONQUE_SOLE_INPUT_SIZE	autoload/conque_term/conque_globals.py	/^CONQUE_SOLE_INPUT_SIZE = 1000$/;"	v
CONQUE_SOLE_MEM_REDRAW	autoload/conque_term/conque_globals.py	/^CONQUE_SOLE_MEM_REDRAW = 1000$/;"	v
CONQUE_SOLE_RESCROLL_SIZE	autoload/conque_term/conque_globals.py	/^CONQUE_SOLE_RESCROLL_SIZE = 255$/;"	v
CONQUE_SOLE_RESIZE_SIZE	autoload/conque_term/conque_globals.py	/^CONQUE_SOLE_RESIZE_SIZE = 255$/;"	v
CONQUE_SOLE_SCREEN_REDRAW	autoload/conque_term/conque_globals.py	/^CONQUE_SOLE_SCREEN_REDRAW = 50$/;"	v
CONQUE_SOLE_STATS_SIZE	autoload/conque_term/conque_globals.py	/^CONQUE_SOLE_STATS_SIZE = 1000$/;"	v
CONQUE_TABLE_OUTPUT	autoload/conque_term/conque_globals.py	/^CONQUE_TABLE_OUTPUT = re.compile("^\\s*\\|\\s.*\\s\\|\\s*$|^\\s*\\+[=+-]+\\+\\s*$")$/;"	v
CONQUE_VIM_ENCODING	autoload/conque_term/conque_globals.py	/^    CONQUE_VIM_ENCODING = 'utf-8'$/;"	v
CONQUE_VIM_ENCODING	autoload/conque_term/conque_globals.py	/^    CONQUE_VIM_ENCODING = vim.eval('&encoding')$/;"	v
CONQUE_VK_ATTR_CTRL_PRESSED	autoload/conque_term/conque_globals.py	/^CONQUE_VK_ATTR_CTRL_PRESSED = u('1024')$/;"	v
CONQUE_WIN32_REGEX_ATTR	autoload/conque_term/conque_globals.py	/^CONQUE_WIN32_REGEX_ATTR = re.compile("((.)\\\\2*)", re.DOTALL)$/;"	v
CONQUE_WIN32_REGEX_VK	autoload/conque_term/conque_globals.py	/^CONQUE_WIN32_REGEX_VK = re.compile("(\\x1b\\[[0-9;]+VK)")$/;"	v
CONQUE_WINDOWS_VK	autoload/conque_term/conque_win32_util.py	/^CONQUE_WINDOWS_VK = {$/;"	v
CONQUE_WINDOWS_VK_ENHANCED	autoload/conque_term/conque_win32_util.py	/^CONQUE_WINDOWS_VK_ENHANCED = {$/;"	v
CONQUE_WINDOWS_VK_INV	autoload/conque_term/conque_win32_util.py	/^CONQUE_WINDOWS_VK_INV = dict([v, k] for k, v in CONQUE_WINDOWS_VK.items())$/;"	v
CONSOLE_SCREEN_BUFFER_INFO	autoload/conque_term/conque_win32_util.py	/^class CONSOLE_SCREEN_BUFFER_INFO(Structure):$/;"	c
COORD	autoload/conque_term/conque_win32_util.py	/^class COORD(Structure):$/;"	c
COPY	ruby/command-t/Makefile	/^COPY = cp$/;"	m
COUTFLAG	ruby/command-t/Makefile	/^COUTFLAG = -o $/;"	m
CPPFLAGS	ruby/command-t/Makefile	/^CPPFLAGS = -DHAVE_RUBY_H  $(DEFS) $(cppflags)$/;"	m
CREATE_BREAKAWAY_FROM_JOB	autoload/conque_term/conque_win32_util.py	/^CREATE_BREAKAWAY_FROM_JOB = 0x01000000$/;"	v
CREATE_DEFAULT_ERROR_MODE	autoload/conque_term/conque_win32_util.py	/^CREATE_DEFAULT_ERROR_MODE = 0x04000000$/;"	v
CREATE_NEW_CONSOLE	autoload/conque_term/conque_win32_util.py	/^CREATE_NEW_CONSOLE = 0x00000010$/;"	v
CREATE_NEW_PROCESS_GROUP	autoload/conque_term/conque_win32_util.py	/^CREATE_NEW_PROCESS_GROUP = 0x00000200$/;"	v
CREATE_NO_WINDOW	autoload/conque_term/conque_win32_util.py	/^CREATE_NO_WINDOW = 0x08000000$/;"	v
CREATE_PRESERVE_CODE_AUTHZ_LEVEL	autoload/conque_term/conque_win32_util.py	/^CREATE_PRESERVE_CODE_AUTHZ_LEVEL = 0x02000000$/;"	v
CREATE_PROTECTED_PROCESS	autoload/conque_term/conque_win32_util.py	/^CREATE_PROTECTED_PROCESS = 0x00040000$/;"	v
CREATE_SEPARATE_WOW_VDM	autoload/conque_term/conque_win32_util.py	/^CREATE_SEPARATE_WOW_VDM = 0x00000800$/;"	v
CREATE_SHARED_WOW_VDM	autoload/conque_term/conque_win32_util.py	/^CREATE_SHARED_WOW_VDM = 0x00001000$/;"	v
CREATE_SUSPENDED	autoload/conque_term/conque_win32_util.py	/^CREATE_SUSPENDED = 0x00000004$/;"	v
CREATE_UNICODE_ENVIRONMENT	autoload/conque_term/conque_win32_util.py	/^CREATE_UNICODE_ENVIRONMENT = 0x00000400$/;"	v
CXX	ruby/command-t/Makefile	/^CXX = g++$/;"	m
CXXFLAGS	ruby/command-t/Makefile	/^CXXFLAGS = $(CFLAGS) $(cxxflags)$/;"	m
Calendar	plugin/calendar.vim	/^command! -nargs=* Calendar  call Calendar(0,<f-args>)$/;"	c
Calendar	plugin/calendar.vim	/^function! Calendar(...)$/;"	f
CalendarBuildKeymap	plugin/calendar.vim	/^function! s:CalendarBuildKeymap(dir, vyear, vmnth)$/;"	f
CalendarDiary	plugin/calendar.vim	/^function! s:CalendarDiary(day, month, year, week, dir)$/;"	f
CalendarDoAction	plugin/calendar.vim	/^function! s:CalendarDoAction(...)$/;"	f
CalendarH	plugin/calendar.vim	/^command! -nargs=* CalendarH call Calendar(1,<f-args>)$/;"	c
CalendarHelp	plugin/calendar.vim	/^function! s:CalendarHelp()$/;"	f
CalendarMakeDir	plugin/calendar.vim	/^function! s:CalendarMakeDir(dir)$/;"	f
CalendarSign	plugin/calendar.vim	/^function! s:CalendarSign(day, month, year)$/;"	f
CalendarVar	plugin/calendar.vim	/^function! s:CalendarVar(var)$/;"	f
CanCommentLine	plugin/NERD_commenter.vim	/^function s:CanCommentLine(forceNested, lineNum)$/;"	f
CanPlaceCursor	plugin/NERD_commenter.vim	/^function s:CanPlaceCursor(line, col)$/;"	f
CanSexyCommentLines	plugin/NERD_commenter.vim	/^function s:CanSexyCommentLines(topline, bottomline)$/;"	f
CanToggleCommentLine	plugin/NERD_commenter.vim	/^function s:CanToggleCommentLine(forceNested, lineNum)$/;"	f
CheckMouseClick	plugin/tagbar.vim	/^function! s:CheckMouseClick()$/;"	f
Choose	plugin/matchit.vim	/^fun! s:Choose(patterns, string, comma, branch, prefix, suffix, ...)$/;"	f
ChooseSnippet	plugin/snipMate.vim	/^fun s:ChooseSnippet(scope, trigger)$/;"	f
ChooseValue	plugin/php.vim	/^function! s:ChooseValue(name, default)$/;"	f
CleanUp	plugin/matchit.vim	/^fun! s:CleanUp(options, mode, startline, startcol, ...)$/;"	f
CleanUp	plugin/tagbar.vim	/^function! s:CleanUp()$/;"	f
Cleanup	plugin/matrix.vim	/^function! s:Cleanup()$/;"	f
CleanupFileinfo	plugin/tagbar.vim	/^function! s:CleanupFileinfo(fname)$/;"	f
ClearMenu	plugin/vcscommand.vim	/^function! s:ClearMenu()$/;"	f
Close	ftplugin/html_snip_helper.vim	/^fun! Close()$/;"	f
CloseAllResultBuffers	plugin/vcscommand.vim	/^function! s:CloseAllResultBuffers()$/;"	f
CloseFold	plugin/tagbar.vim	/^function! s:CloseFold()$/;"	f
CloseWindow	plugin/tagbar.vim	/^function! s:CloseWindow()$/;"	f
CommandEdit	autoload/rails.vim	/^function! s:CommandEdit(cmd,name,prefix,suffix,filter,default,...)$/;"	f
CommandList	autoload/rails.vim	/^function! s:CommandList(A,L,P)$/;"	f
CommandT	ruby/command-t/controller.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/finder.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/finder/buffer_finder.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/finder/file_finder.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/match_window.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/prompt.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/scanner.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/scanner/buffer_scanner.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/scanner/file_scanner.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/settings.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/stub.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/vim.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/vim/path_utilities.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/vim/screen.rb	/^module CommandT$/;"	m
CommandT	ruby/command-t/vim/window.rb	/^module CommandT$/;"	m
CommandTMatch_initialize	ruby/command-t/match.c	/^VALUE CommandTMatch_initialize(int argc, VALUE *argv, VALUE self)$/;"	f
CommandTMatch_matches	ruby/command-t/match.c	/^VALUE CommandTMatch_matches(VALUE self)$/;"	f
CommandTMatch_to_s	ruby/command-t/match.c	/^VALUE CommandTMatch_to_s(VALUE self)$/;"	f
CommandTMatcher_initialize	ruby/command-t/matcher.c	/^VALUE CommandTMatcher_initialize(int argc, VALUE *argv, VALUE self)$/;"	f
CommandTMatcher_matches_for	ruby/command-t/matcher.c	/^VALUE CommandTMatcher_matches_for(VALUE self, VALUE abbrev)$/;"	f
CommandTMatcher_sorted_matches_for	ruby/command-t/matcher.c	/^VALUE CommandTMatcher_sorted_matches_for(VALUE self, VALUE abbrev, VALUE options)$/;"	f
CommandT_option_from_hash	ruby/command-t/ext.c	/^VALUE CommandT_option_from_hash(const char *option, VALUE hash)$/;"	f
CommentBlock	plugin/NERD_commenter.vim	/^function s:CommentBlock(top, bottom, lSide, rSide, forceNested )$/;"	f
CommentLines	plugin/NERD_commenter.vim	/^function s:CommentLines(forceNested, align, firstLine, lastLine)$/;"	f
CommentLinesMinimal	plugin/NERD_commenter.vim	/^function s:CommentLinesMinimal(firstLine, lastLine)$/;"	f
CommentLinesSexy	plugin/NERD_commenter.vim	/^function s:CommentLinesSexy(topline, bottomline)$/;"	f
CommentLinesToggle	plugin/NERD_commenter.vim	/^function s:CommentLinesToggle(forceNested, firstLine, lastLine)$/;"	f
CommentRegion	plugin/NERD_commenter.vim	/^function s:CommentRegion(topLine, topCol, bottomLine, bottomCol, forceNested)$/;"	f
CompareByKind	plugin/tagbar.vim	/^function! s:CompareByKind(tag1, tag2)$/;"	f
CompareByLine	plugin/tagbar.vim	/^function! s:CompareByLine(tag1, tag2)$/;"	f
Complete_cd	autoload/rails.vim	/^function! s:Complete_cd(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_console	autoload/rails.vim	/^function! s:Complete_console(A,L,P)$/;"	f
Complete_destroy	autoload/rails.vim	/^function! s:Complete_destroy(A,L,P)$/;"	f
Complete_edit	autoload/rails.vim	/^function! s:Complete_edit(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_environments	autoload/rails.vim	/^function! s:Complete_environments(...)$/;"	f
Complete_find	autoload/rails.vim	/^function! s:Complete_find(ArgLead, CmdLine, CursorPos)$/;"	f
Complete_generate	autoload/rails.vim	/^function! s:Complete_generate(A,L,P)$/;"	f
Complete_preview	autoload/rails.vim	/^function! s:Complete_preview(A,L,P)$/;"	f
Complete_rake	autoload/rails.vim	/^function! s:Complete_rake(A,L,P)$/;"	f
Complete_related	autoload/rails.vim	/^function! s:Complete_related(A,L,P)$/;"	f
Complete_ruby	autoload/rails.vim	/^function! s:Complete_ruby(A,L,P)$/;"	f
Complete_script	autoload/rails.vim	/^function! s:Complete_script(ArgLead,CmdLine,P)$/;"	f
Complete_server	autoload/rails.vim	/^function! s:Complete_server(A,L,P)$/;"	f
Complete_set	autoload/rails.vim	/^function! s:Complete_set(A,L,P)$/;"	f
Conque	autoload/conque_term/conque.py	/^class Conque:$/;"	c
ConqueScreen	autoload/conque_term/conque_screen.py	/^class ConqueScreen(object):$/;"	c
ConqueSole	autoload/conque_term/conque_sole.py	/^class ConqueSole(Conque):$/;"	c
ConqueSoleSharedMemory	autoload/conque_term/conque_sole_shared_memory.py	/^class ConqueSoleSharedMemory():$/;"	c
ConqueSoleSubprocess	autoload/conque_term/conque_sole_subprocess.py	/^class ConqueSoleSubprocess():$/;"	c
ConqueSoleWrapper	autoload/conque_term/conque_sole_wrapper.py	/^class ConqueSoleWrapper():$/;"	c
ConqueSubprocess	autoload/conque_term/conque_subprocess.py	/^class ConqueSubprocess:$/;"	c
ConqueTerm	plugin/conque_term.vim	/^command! -nargs=+ -complete=shellcmd ConqueTerm call conque_term#open(<q-args>)$/;"	c
ConqueTermSplit	plugin/conque_term.vim	/^command! -nargs=+ -complete=shellcmd ConqueTermSplit call conque_term#open(<q-args>, ['belowright split'])$/;"	c
ConqueTermTab	plugin/conque_term.vim	/^command! -nargs=+ -complete=shellcmd ConqueTermTab call conque_term#open(<q-args>, ['tabnew'])$/;"	c
ConqueTermVSplit	plugin/conque_term.vim	/^command! -nargs=+ -complete=shellcmd ConqueTermVSplit call conque_term#open(<q-args>, ['belowright vsplit'])$/;"	c
Controller	ruby/command-t/controller.rb	/^  class Controller$/;"	c	class:CommandT
ConvertLeadingSpacesToTabs	plugin/NERD_commenter.vim	/^function s:ConvertLeadingSpacesToTabs(line)$/;"	f
ConvertLeadingTabsToSpaces	plugin/NERD_commenter.vim	/^function s:ConvertLeadingTabsToSpaces(line)$/;"	f
ConvertLeadingWhiteSpace	plugin/NERD_commenter.vim	/^function s:ConvertLeadingWhiteSpace(line)$/;"	f
Count	autoload/snipMate.vim	/^fun s:Count(haystack, needle)$/;"	f
Count	plugin/matchit.vim	/^fun! s:Count(string, pattern, ...)$/;"	f
CountNonESCedOccurances	plugin/NERD_commenter.vim	/^function s:CountNonESCedOccurances(str, searchstr, escChar)$/;"	f
CreateAutocommands	plugin/tagbar.vim	/^function! s:CreateAutocommands()$/;"	f
CreateDelimMapFromCms	plugin/NERD_commenter.vim	/^function s:CreateDelimMapFromCms()$/;"	f
CreateMapping	plugin/vcscommand.vim	/^function! s:CreateMapping(shortcut, expansion, display)$/;"	f
CreateMaps	plugin/NERD_commenter.vim	/^function! s:CreateMaps(target, combo)$/;"	f
CreateMenuItems	plugin/NERD_commenter.vim	/^    function! s:CreateMenuItems(target, desc, root)$/;"	f
CreateMenus	plugin/rails.vim	/^function! s:CreateMenus() abort$/;"	f
CreateObject	plugin/matrix.vim	/^function! s:CreateObject(i)$/;"	f
CreatePseudoTag	plugin/tagbar.vim	/^function! s:CreatePseudoTag(name, parent, scope, typeinfo, fileinfo)$/;"	f
CustomComplete	autoload/rails.vim	/^function! s:CustomComplete(A,L,P,cmd)$/;"	f
Cycle	autoload/mark.vim	/^function! s:Cycle( ... )$/;"	f
DEFFILE	ruby/command-t/Makefile	/^DEFFILE = $/;"	m
DEFS	ruby/command-t/Makefile	/^DEFS     = $/;"	m
DETACHED_PROCESS	autoload/conque_term/conque_win32_util.py	/^DETACHED_PROCESS = 0x00000008$/;"	v
DISTCLEANDIRS	ruby/command-t/Makefile	/^DISTCLEANDIRS = $/;"	m
DISTCLEANFILES	ruby/command-t/Makefile	/^DISTCLEANFILES = $/;"	m
DLDFLAGS	ruby/command-t/Makefile	/^DLDFLAGS = $(ldflags) $(dldflags)$/;"	m
DLLIB	ruby/command-t/Makefile	/^DLLIB = $(TARGET).so$/;"	m
DefaultHighlightings	plugin/mark.vim	/^function! s:DefaultHighlightings()$/;"	f
DefineSnips	plugin/snipMate.vim	/^fun s:DefineSnips(dir, aliasft, realft)$/;"	f
Detect	plugin/rails.vim	/^function! s:Detect(filename)$/;"	f
DoCommand	plugin/vcsgit.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	plugin/vcssvn.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
Doc	autoload/rails.vim	/^function! s:Doc(bang, string)$/;"	f
DoesBlockHaveDelim	plugin/NERD_commenter.vim	/^function s:DoesBlockHaveDelim(delim, top, bottom)$/;"	f
DoesBlockHaveMultipartDelim	plugin/NERD_commenter.vim	/^function s:DoesBlockHaveMultipartDelim(top, bottom)$/;"	f
DrawObject	plugin/matrix.vim	/^function! s:DrawObject(i)$/;"	f
ENHANCED_KEY	autoload/conque_term/conque_win32_util.py	/^ENHANCED_KEY = 0x0100$/;"	v
EXEEXT	ruby/command-t/Makefile	/^EXEEXT = $/;"	m
EXTENDED_STARTUPINFO_PRESENT	autoload/conque_term/conque_win32_util.py	/^EXTENDED_STARTUPINFO_PRESENT = 0x00080000$/;"	v
EXTSTATIC	ruby/command-t/Makefile	/^EXTSTATIC = $/;"	m
EchoSearchPattern	autoload/mark.vim	/^	function! s:EchoSearchPattern( searchType, searchPattern, isBackward )$/;"	f
Edit	autoload/rails.vim	/^function! s:Edit(count,cmd,...)$/;"	f
EditFile	plugin/vcscommand.vim	/^function! s:EditFile(command, originalBuffer, statusText)$/;"	f
EditSimpleRb	autoload/rails.vim	/^function! s:EditSimpleRb(cmd,name,target,prefix,suffix,...)$/;"	f
Egrep	plugin/grep.vim	/^command! -nargs=* -complete=file Egrep$/;"	c
EgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file EgrepAdd$/;"	c
Egrep_Path	plugin/grep.vim	/^    let Egrep_Path = 'egrep'$/;"	v
ErrorMessage	autoload/mark.vim	/^function! s:ErrorMessage( searchType, searchPattern, isBackward )$/;"	f
Esc	plugin/NERD_commenter.vim	/^function s:Esc(str)$/;"	f
EscapeText	autoload/mark.vim	/^function! s:EscapeText( text )$/;"	f
Executable	plugin/vcsgit.vim	/^function! s:Executable()$/;"	f
Executable	plugin/vcssvn.vim	/^function! s:Executable()$/;"	f
ExecuteExtensionMapping	plugin/vcscommand.vim	/^function! s:ExecuteExtensionMapping(mapping)$/;"	f
ExecuteVCSCommand	plugin/vcscommand.vim	/^function! s:ExecuteVCSCommand(command, argList)$/;"	f
Executor	autoload/l9/async.py	/^class Executor:$/;"	c
Extract	autoload/rails.vim	/^function! s:Extract(bang,...) range abort$/;"	f
ExtractSnips	plugin/snipMate.vim	/^fun! ExtractSnips(dir, ft)$/;"	f
ExtractSnipsFile	plugin/snipMate.vim	/^fun! ExtractSnipsFile(file, ft)$/;"	f
FILL_CHAR	autoload/conque_term/conque_sole_shared_memory.py	/^    FILL_CHAR = None$/;"	v	class:ConqueSoleSharedMemory
FOCUS_EVENT	autoload/conque_term/conque_win32_util.py	/^FOCUS_EVENT = 0x0010$/;"	v
FOCUS_EVENT_RECORD	autoload/conque_term/conque_win32_util.py	/^class FOCUS_EVENT_RECORD(Structure):$/;"	c
Fgrep	plugin/grep.vim	/^command! -nargs=* -complete=file Fgrep$/;"	c
FgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file FgrepAdd$/;"	c
Fgrep_Path	plugin/grep.vim	/^    let Fgrep_Path = 'fgrep'$/;"	v
FileFinder	ruby/command-t/finder/file_finder.rb	/^  class FileFinder < Finder$/;"	c	class:CommandT
FileInfo.New	plugin/tagbar.vim	/^function! s:FileInfo.New(fname, ftype) dict$/;"	f
FileInfo.clearOldFolds	plugin/tagbar.vim	/^function! s:FileInfo.clearOldFolds() dict$/;"	f
FileInfo.closeKindFold	plugin/tagbar.vim	/^function! s:FileInfo.closeKindFold(kind) dict$/;"	f
FileInfo.openKindFold	plugin/tagbar.vim	/^function! s:FileInfo.openKindFold(kind) dict$/;"	f
FileInfo.reset	plugin/tagbar.vim	/^function! s:FileInfo.reset() dict$/;"	f
FileInfo.sortTags	plugin/tagbar.vim	/^function! s:FileInfo.sortTags() dict$/;"	f
FileLimitExceeded	ruby/command-t/scanner/file_scanner.rb	/^    class FileLimitExceeded < ::RuntimeError; end$/;"	c	class:CommandT.FileScanner
FileScanner	ruby/command-t/scanner/file_scanner.rb	/^  class FileScanner < Scanner$/;"	c	class:CommandT
Filename	autoload/snipMate.vim	/^fun! Filename(...)$/;"	f
Find	autoload/rails.vim	/^function! s:Find(count,cmd,...)$/;"	f
FindBoundingLinesOfSexyCom	plugin/NERD_commenter.vim	/^function s:FindBoundingLinesOfSexyCom(lineNum)$/;"	f
FindDelimiterIndex	plugin/NERD_commenter.vim	/^function s:FindDelimiterIndex(delimiter, line)$/;"	f
Finder	ruby/command-t/finder.rb	/^  class Finder$/;"	c	class:CommandT
FufGlobal	autoload/fuf.vim	/^augroup FufGlobal$/;"	a
G	plugin/gsearch.vim	/^command -nargs=+ G call GoogleSearch(<f-args>)$/;"	c
GenerateResultBufferName	plugin/vcscommand.vim	/^function! s:GenerateResultBufferName(command, originalBuffer, vcsType, statusText)$/;"	f
GenerateResultBufferNameWithExtension	plugin/vcscommand.vim	/^function! s:GenerateResultBufferNameWithExtension(command, originalBuffer, vcsType, statusText)$/;"	f
GetJSLintMessage	ftplugin/javascript/jslint.vim	/^  function s:GetJSLintMessage()$/;"	f
GetJsIndent	indent/javascript.vim	/^function! GetJsIndent(lnum)$/;"	f
GetNearbyTag	plugin/tagbar.vim	/^function! s:GetNearbyTag()$/;"	f
GetNonCommentLine	indent/javascript.vim	/^function! s:GetNonCommentLine(lnum)$/;"	f
GetQuickFixStackCount	ftplugin/javascript/jslint.vim	/^    function s:GetQuickFixStackCount()$/;"	f
GetSexyComLeft	plugin/NERD_commenter.vim	/^function s:GetSexyComLeft(space, esc)$/;"	f
GetSexyComMarker	plugin/NERD_commenter.vim	/^function s:GetSexyComMarker(space, esc)$/;"	f
GetSexyComRight	plugin/NERD_commenter.vim	/^function s:GetSexyComRight(space, esc)$/;"	f
GetSnippet	plugin/snipMate.vim	/^fun s:GetSnippet(word, scope)$/;"	f
GetSnippets	plugin/snipMate.vim	/^fun! GetSnippets(dir, filetypes)$/;"	f
GetTagInfo	plugin/tagbar.vim	/^function! s:GetTagInfo(linenr, ignorepseudo)$/;"	f
GetToken	plugin/calendar.vim	/^function! s:GetToken(src,dlm,cnt)$/;"	f
GetUserTypeDefs	plugin/tagbar.vim	/^function! s:GetUserTypeDefs()$/;"	f
GetVisualSelection	autoload/mark.vim	/^function! s:GetVisualSelection()$/;"	f
GoogleSearch	plugin/gsearch.vim	/^function GoogleSearch(...)$/;"	f
GotoNextToplevelTag	plugin/tagbar.vim	/^function! s:GotoNextToplevelTag(direction)$/;"	f
Grep	plugin/grep.vim	/^command! -nargs=* -complete=file Grep$/;"	c
GrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file GrepAdd$/;"	c
GrepArgs	plugin/grep.vim	/^command! -nargs=* GrepArgs$/;"	c
GrepArgsAdd	plugin/grep.vim	/^command! -nargs=* GrepArgsAdd$/;"	c
GrepBuffer	plugin/grep.vim	/^command! -nargs=* GrepBuffer$/;"	c
GrepBufferAdd	plugin/grep.vim	/^command! -nargs=* GrepBufferAdd$/;"	c
Grep_Cygwin_Find	plugin/grep.vim	/^    let Grep_Cygwin_Find = 0$/;"	v
Grep_Default_Filelist	plugin/grep.vim	/^    let Grep_Default_Filelist = '*'$/;"	v
Grep_Default_Options	plugin/grep.vim	/^    let Grep_Default_Options = ''$/;"	v
Grep_Find_Path	plugin/grep.vim	/^    let Grep_Find_Path = 'find'$/;"	v
Grep_Find_Use_Xargs	plugin/grep.vim	/^    let Grep_Find_Use_Xargs = 1$/;"	v
Grep_Null_Device	plugin/grep.vim	/^        let Grep_Null_Device = 'NUL'$/;"	v
Grep_Null_Device	plugin/grep.vim	/^        let Grep_Null_Device = '\/dev\/null'$/;"	v
Grep_OpenQuickfixWindow	plugin/grep.vim	/^    let Grep_OpenQuickfixWindow = 1$/;"	v
Grep_Path	plugin/grep.vim	/^    let Grep_Path = 'grep'$/;"	v
Grep_Shell_Escape_Char	plugin/grep.vim	/^        let Grep_Shell_Escape_Char = ''$/;"	v
Grep_Shell_Escape_Char	plugin/grep.vim	/^        let Grep_Shell_Escape_Char = '\\'$/;"	v
Grep_Shell_Quote_Char	plugin/grep.vim	/^        let Grep_Shell_Quote_Char = "'"$/;"	v
Grep_Shell_Quote_Char	plugin/grep.vim	/^        let Grep_Shell_Quote_Char = ''$/;"	v
Grep_Skip_Dirs	plugin/grep.vim	/^    let Grep_Skip_Dirs = 'RCS CVS SCCS'$/;"	v
Grep_Skip_Files	plugin/grep.vim	/^    let Grep_Skip_Files = '*~ *,v s.*'$/;"	v
Grep_Xargs_Options	plugin/grep.vim	/^    let Grep_Xargs_Options = '--null'$/;"	v
Grep_Xargs_Path	plugin/grep.vim	/^    let Grep_Xargs_Path = 'xargs'$/;"	v
HDRDIR	ruby/command-t/Makefile	/^HDRDIR        = $(rubyhdrdir)\/ruby$(target_prefix)$/;"	m
HIGH_PRIORITY_CLASS	autoload/conque_term/conque_win32_util.py	/^HIGH_PRIORITY_CLASS = 0x00000080$/;"	v
HasCStyleComments	plugin/NERD_commenter.vim	/^function s:HasCStyleComments()$/;"	f
HasLeadingTabs	plugin/NERD_commenter.vim	/^function s:HasLeadingTabs(...)$/;"	f
HasMultipartDelims	plugin/NERD_commenter.vim	/^function s:HasMultipartDelims()$/;"	f
HiDefaults	autoload/rails.vim	/^function! s:HiDefaults()$/;"	f
HiLink	plugin/php.vim	/^      command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	plugin/php.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HiLink	syntax/javascript.vim	/^    command -nargs=+ HiLink hi def link <args>$/;"	c
HiLink	syntax/javascript.vim	/^    command -nargs=+ HiLink hi link <args>$/;"	c
HighlightTag	plugin/tagbar.vim	/^function! s:HighlightTag()$/;"	f
HtmlIndentClose	indent/html.vim	/^fun! <SID>HtmlIndentClose(lnum, pattern)$/;"	f
HtmlIndentCloseAlt	indent/html.vim	/^fun! <SID>HtmlIndentCloseAlt(lnum)$/;"	f
HtmlIndentGetter	indent/html.vim	/^fun! HtmlIndentGetter(lnum)$/;"	f
HtmlIndentOpen	indent/html.vim	/^fun! <SID>HtmlIndentOpen(lnum, pattern)$/;"	f
HtmlIndentOpenAlt	indent/html.vim	/^fun! <SID>HtmlIndentOpenAlt(lnum)$/;"	f
HtmlIndentPush	indent/html.vim	/^fun! <SID>HtmlIndentPush(tag)$/;"	f
HtmlIndentSum	indent/html.vim	/^fun! <SID>HtmlIndentSum(lnum, style)$/;"	f
IDLE_PRIORITY_CLASS	autoload/conque_term/conque_win32_util.py	/^IDLE_PRIORITY_CLASS = 0x00000040$/;"	v
INCFLAGS	ruby/command-t/Makefile	/^INCFLAGS = -I. -I$(arch_hdrdir) -I$(hdrdir)\/ruby\/backward -I$(hdrdir) -I$(srcdir)$/;"	m
INHERIT_PARENT_AFFINITY	autoload/conque_term/conque_win32_util.py	/^INHERIT_PARENT_AFFINITY = 0x00010000$/;"	v
INPUT_RECORD	autoload/conque_term/conque_win32_util.py	/^class INPUT_RECORD(Structure):$/;"	c
INPUT_UNION	autoload/conque_term/conque_win32_util.py	/^class INPUT_UNION(Union):$/;"	c
INSTALL	ruby/command-t/Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_DATA	ruby/command-t/Makefile	/^INSTALL_DATA = $(INSTALL) -m 644$/;"	m
INSTALL_PROG	ruby/command-t/Makefile	/^INSTALL_PROG = $(INSTALL) -m 0755$/;"	m
Init	plugin/matrix.vim	/^function! s:Init()$/;"	f
InitMarkVariables	autoload/mark.vim	/^function! s:InitMarkVariables()$/;"	f
InitStatusline	autoload/rails.vim	/^function! s:InitStatusline()$/;"	f
InitTypes	plugin/tagbar.vim	/^function! s:InitTypes()$/;"	f
InitVariable	plugin/NERD_commenter.vim	/^function s:InitVariable(var, value)$/;"	f
Init_ext	ruby/command-t/ext.c	/^void Init_ext()$/;"	f
InjectIntoStatusline	autoload/rails.vim	/^function! s:InjectIntoStatusline(status)$/;"	f
InsertRefs	plugin/matchit.vim	/^fun! s:InsertRefs(groupBR, prefix, group, suffix, matchline)$/;"	f
Invert	autoload/rails.vim	/^function! s:Invert(bang)$/;"	f
InvertComment	plugin/NERD_commenter.vim	/^function s:InvertComment(firstLine, lastLine)$/;"	f
IsComment	indent/javascript.vim	/^function! s:IsComment(lnum)$/;"	f
IsCommented	plugin/NERD_commenter.vim	/^function s:IsCommented(left, right, line)$/;"	f
IsCommentedFromStartOfLine	plugin/NERD_commenter.vim	/^function s:IsCommentedFromStartOfLine(left, line)$/;"	f
IsCommentedNormOrSexy	plugin/NERD_commenter.vim	/^function s:IsCommentedNormOrSexy(lineNum)$/;"	f
IsCommentedOuttermost	plugin/NERD_commenter.vim	/^function s:IsCommentedOuttermost(left, right, leftAlt, rightAlt, line)$/;"	f
IsDelimValid	plugin/NERD_commenter.vim	/^function s:IsDelimValid(delimiter, delIndx, line)$/;"	f
IsEscaped	plugin/NERD_commenter.vim	/^function s:IsEscaped(str, indx, escChar)$/;"	f
IsInComment	indent/javascript.vim	/^function! s:IsInComment(lnum, cnum) $/;"	f
IsInSexyComment	plugin/NERD_commenter.vim	/^function s:IsInSexyComment(line)$/;"	f
IsNumEven	plugin/NERD_commenter.vim	/^function s:IsNumEven(num)$/;"	f
IsSexyComment	plugin/NERD_commenter.vim	/^function s:IsSexyComment(topline, bottomline)$/;"	f
IsValidFile	plugin/tagbar.vim	/^function! s:IsValidFile(fname, ftype)$/;"	f
JSLint	ftplugin/javascript/jslint.vim	/^function! s:JSLint()$/;"	f
JSLintClear	ftplugin/javascript/jslint.vim	/^function! s:JSLintClear()$/;"	f
JSLintToggle	ftplugin/javascript/jslint.vim	/^  command JSLintToggle :let b:jslint_disabled = exists('b:jslint_disabled') ? b:jslint_disabled ? 0 : 1 : 1$/;"	c
JSLintUpdate	ftplugin/javascript/jslint.vim	/^  command JSLintUpdate :call s:JSLintUpdate()$/;"	c
JSLintUpdate	ftplugin/javascript/jslint.vim	/^  function s:JSLintUpdate()$/;"	f
JumpToTag	plugin/tagbar.vim	/^function! s:JumpToTag(stay_in_tagbar)$/;"	f
KEY_EVENT	autoload/conque_term/conque_win32_util.py	/^KEY_EVENT = 0x0001$/;"	v
KEY_EVENT_RECORD	autoload/conque_term/conque_win32_util.py	/^class KEY_EVENT_RECORD(Structure):$/;"	c
KeyMap.All	plugin/NERD_tree.vim	/^function! s:KeyMap.All()$/;"	f
KeyMap.BindAll	plugin/NERD_tree.vim	/^function! s:KeyMap.BindAll()$/;"	f
KeyMap.Create	plugin/NERD_tree.vim	/^function! s:KeyMap.Create(options)$/;"	f
KeyMap.bind	plugin/NERD_tree.vim	/^function! s:KeyMap.bind()$/;"	f
KindheaderTag.New	plugin/tagbar.vim	/^function! s:KindheaderTag.New(name) dict$/;"	f
KindheaderTag.closeFold	plugin/tagbar.vim	/^function! s:KindheaderTag.closeFold() dict$/;"	f
KindheaderTag.getPrototype	plugin/tagbar.vim	/^function! s:KindheaderTag.getPrototype() dict$/;"	f
KindheaderTag.isFoldable	plugin/tagbar.vim	/^function! s:KindheaderTag.isFoldable() dict$/;"	f
KindheaderTag.isFolded	plugin/tagbar.vim	/^function! s:KindheaderTag.isFolded() dict$/;"	f
KindheaderTag.isKindheader	plugin/tagbar.vim	/^function! s:KindheaderTag.isKindheader() dict$/;"	f
KindheaderTag.openFold	plugin/tagbar.vim	/^function! s:KindheaderTag.openFold() dict$/;"	f
KindheaderTag.toggleFold	plugin/tagbar.vim	/^function! s:KindheaderTag.toggleFold() dict$/;"	f
L9Assert	plugin/l9.vim	/^  command -nargs=* L9Assert :$/;"	c
L9Assert	plugin/l9.vim	/^  command -nargs=* L9Assert call eval((<args>) ? 0 : s:handleFailedAssersion(<q-args>))$/;"	c
L9GrepBuffer	plugin/l9.vim	/^command -nargs=? L9GrepBuffer    call l9#grepBuffers(<q-args>, [bufnr('%')])$/;"	c
L9GrepBufferAll	plugin/l9.vim	/^command -nargs=? L9GrepBufferAll call l9#grepBuffers(<q-args>, range(1, bufnr('$')))$/;"	c
L9Timer	plugin/l9.vim	/^  command -nargs=1 L9Timer :$/;"	c
L9Timer	plugin/l9.vim	/^  command -nargs=1 L9Timer call s:timerBegin(<q-args>)$/;"	c
L9TimerDump	plugin/l9.vim	/^  command -nargs=0 L9TimerDump :$/;"	c
L9TimerDump	plugin/l9.vim	/^  command -nargs=0 L9TimerDump call s:timerDump()$/;"	c
L9TimerStop	plugin/l9.vim	/^  command -nargs=0 L9TimerStop :$/;"	c
L9TimerStop	plugin/l9.vim	/^  command -nargs=0 L9TimerStop call s:timerStop()$/;"	c
LDSHARED	ruby/command-t/Makefile	/^LDSHARED = $(CC) -shared$/;"	m
LDSHAREDXX	ruby/command-t/Makefile	/^LDSHAREDXX = $(CXX) -shared$/;"	m
LEFT_ALT_PRESSED	autoload/conque_term/conque_win32_util.py	/^LEFT_ALT_PRESSED = 0x0002$/;"	v
LEFT_CTRL_PRESSED	autoload/conque_term/conque_win32_util.py	/^LEFT_CTRL_PRESSED = 0x0008$/;"	v
LIBPATH	ruby/command-t/Makefile	/^LIBPATH =  -L. -L$(libdir) -Wl,-R$(libdir)$/;"	m
LIBRUBY	ruby/command-t/Makefile	/^LIBRUBY = $(LIBRUBY_SO)$/;"	m
LIBRUBYARG_SHARED	ruby/command-t/Makefile	/^LIBRUBYARG_SHARED = -Wl,-R -Wl,$(libdir) -L$(libdir) -l$(RUBY_SO_NAME)$/;"	m
LIBRUBYARG_STATIC	ruby/command-t/Makefile	/^LIBRUBYARG_STATIC = -Wl,-R -Wl,$(libdir) -L$(libdir) -l$(RUBY_SO_NAME)-static$/;"	m
LIBRUBY_A	ruby/command-t/Makefile	/^LIBRUBY_A = lib$(RUBY_SO_NAME)-static.a$/;"	m
LIBS	ruby/command-t/Makefile	/^LIBS = $(LIBRUBYARG_SHARED)  -lpthread -lrt -ldl -lcrypt -lm   -lc$/;"	m
LOCAL_LIBS	ruby/command-t/Makefile	/^LOCAL_LIBS = $/;"	m
LPBYTE	autoload/conque_term/conque_win32_util.py	/^LPBYTE = POINTER(c_ubyte)$/;"	v
LPTSTR	autoload/conque_term/conque_win32_util.py	/^LPTSTR = POINTER(c_char)$/;"	v
LastIndexOfDelim	plugin/NERD_commenter.vim	/^function s:LastIndexOfDelim(delim, str)$/;"	f
Left	plugin/NERD_commenter.vim	/^function s:Left(...)$/;"	f
LeftMostIndx	plugin/NERD_commenter.vim	/^function s:LeftMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
LocalModelines	autoload/rails.vim	/^function! s:LocalModelines(lnum)$/;"	f
Log	autoload/rails.vim	/^function! s:Log(bang,arg)$/;"	f
Log	indent/javascript.vim	/^function! s:Log(msg)$/;"	f
MAKEDIRS	ruby/command-t/Makefile	/^MAKEDIRS = \/bin\/mkdir -p$/;"	m
MEMORY_BASIC_INFORMATION	autoload/conque_term/conque_win32_util.py	/^class MEMORY_BASIC_INFORMATION(Structure):$/;"	c
MENU_EVENT	autoload/conque_term/conque_win32_util.py	/^MENU_EVENT = 0x0008$/;"	v
MENU_EVENT_RECORD	autoload/conque_term/conque_win32_util.py	/^class MENU_EVENT_RECORD(Structure):$/;"	c
MOUSE_EVENT	autoload/conque_term/conque_win32_util.py	/^MOUSE_EVENT = 0x0002$/;"	v
MOUSE_EVENT_RECORD	autoload/conque_term/conque_win32_util.py	/^class MOUSE_EVENT_RECORD(Structure):$/;"	c
MRU	plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete MRU$/;"	c
MRU_AddFile	plugin/mru.vim	/^function! s:MRU_AddFile(acmd_bufnr)$/;"	f
MRU_Add_Menu	plugin/mru.vim	/^    let MRU_Add_Menu = 1$/;"	v
MRU_Auto_Close	plugin/mru.vim	/^    let MRU_Auto_Close = 1$/;"	v
MRU_Cmd	plugin/mru.vim	/^function! s:MRU_Cmd(pat)$/;"	f
MRU_Complete	plugin/mru.vim	/^function! s:MRU_Complete(ArgLead, CmdLine, CursorPos)$/;"	f
MRU_Edit_File	plugin/mru.vim	/^function! s:MRU_Edit_File(filename, sanitized)$/;"	f
MRU_Exclude_Files	plugin/mru.vim	/^    let MRU_Exclude_Files = ''$/;"	v
MRU_File	plugin/mru.vim	/^                let MRU_File = $USERPROFILE . '\\_vim_mru_files'$/;"	v
MRU_File	plugin/mru.vim	/^        let MRU_File = $HOME . '\/.vim_mru_files'$/;"	v
MRU_File	plugin/mru.vim	/^        let MRU_File = $VIM . '\/_vim_mru_files'$/;"	v
MRU_Include_Files	plugin/mru.vim	/^    let MRU_Include_Files = ''$/;"	v
MRU_LoadList	plugin/mru.vim	/^function! s:MRU_LoadList()$/;"	f
MRU_Max_Entries	plugin/mru.vim	/^    let MRU_Max_Entries = 100$/;"	v
MRU_Max_Menu_Entries	plugin/mru.vim	/^    let MRU_Max_Menu_Entries = 10$/;"	v
MRU_Max_Submenu_Entries	plugin/mru.vim	/^    let MRU_Max_Submenu_Entries = 10$/;"	v
MRU_Open_Window	plugin/mru.vim	/^function! s:MRU_Open_Window(...)$/;"	f
MRU_Refresh_Menu	plugin/mru.vim	/^function! s:MRU_Refresh_Menu()$/;"	f
MRU_SaveList	plugin/mru.vim	/^function! s:MRU_SaveList()$/;"	f
MRU_Select_File_Cmd	plugin/mru.vim	/^function! s:MRU_Select_File_Cmd(opt) range$/;"	f
MRU_Use_Current_Window	plugin/mru.vim	/^    let MRU_Use_Current_Window = 0$/;"	v
MRU_Warn_Msg	plugin/mru.vim	/^function! s:MRU_Warn_Msg(msg)$/;"	f
MRU_Window_Edit_File	plugin/mru.vim	/^function! s:MRU_Window_Edit_File(fname, multi, edit_type, open_type)$/;"	f
MRU_Window_Height	plugin/mru.vim	/^    let MRU_Window_Height = 8$/;"	v
MRU_add_files_to_menu	plugin/mru.vim	/^function! s:MRU_add_files_to_menu(prefix, file_list)$/;"	f
MRU_escape_filename	plugin/mru.vim	/^function! s:MRU_escape_filename(fname)$/;"	f
MakeSnip	plugin/snipMate.vim	/^fun! MakeSnip(scope, trigger, content, ...)$/;"	f
MapKeys	plugin/tagbar.vim	/^function! s:MapKeys()$/;"	f
Mark	autoload/mark.vim	/^augroup Mark$/;"	a
Mark	plugin/mark.vim	/^command! -nargs=? Mark call mark#DoMark(<f-args>)$/;"	c
MarkMatch	autoload/mark.vim	/^function! s:MarkMatch( indices, expr )$/;"	f
MarkOrigBufferForSetup	plugin/vcscommand.vim	/^function! s:MarkOrigBufferForSetup(buffer)$/;"	f
MarkScope	autoload/mark.vim	/^function! s:MarkScope( indices, expr )$/;"	f
MatchDebug	plugin/matchit.vim	/^  command! -nargs=0 MatchDebug call s:Match_debug()$/;"	c
MatchWindow	ruby/command-t/match_window.rb	/^  class MatchWindow$/;"	c	class:CommandT
Match_debug	plugin/matchit.vim	/^fun! s:Match_debug()$/;"	f
Match_wrapper	plugin/matchit.vim	/^function! s:Match_wrapper(word, forward, mode) range$/;"	f
Matrix	plugin/matrix.vim	/^   command! Matrix call Matrix()$/;"	c
Matrix	plugin/matrix.vim	/^function! Matrix()$/;"	f
MenuController.New	plugin/NERD_tree.vim	/^function! s:MenuController.New(menuItems)$/;"	f
MenuController._allIndexesFor	plugin/NERD_tree.vim	/^function! s:MenuController._allIndexesFor(shortcut)$/;"	f
MenuController._current	plugin/NERD_tree.vim	/^function! s:MenuController._current()$/;"	f
MenuController._cursorDown	plugin/NERD_tree.vim	/^function! s:MenuController._cursorDown()$/;"	f
MenuController._cursorUp	plugin/NERD_tree.vim	/^function! s:MenuController._cursorUp()$/;"	f
MenuController._echoPrompt	plugin/NERD_tree.vim	/^function! s:MenuController._echoPrompt()$/;"	f
MenuController._handleKeypress	plugin/NERD_tree.vim	/^function! s:MenuController._handleKeypress(key)$/;"	f
MenuController._nextIndexFor	plugin/NERD_tree.vim	/^function! s:MenuController._nextIndexFor(shortcut)$/;"	f
MenuController._restoreOptions	plugin/NERD_tree.vim	/^function! s:MenuController._restoreOptions()$/;"	f
MenuController._saveOptions	plugin/NERD_tree.vim	/^function! s:MenuController._saveOptions()$/;"	f
MenuController._setCmdheight	plugin/NERD_tree.vim	/^function! s:MenuController._setCmdheight()$/;"	f
MenuController.showMenu	plugin/NERD_tree.vim	/^function! s:MenuController.showMenu()$/;"	f
MenuItem.All	plugin/NERD_tree.vim	/^function! s:MenuItem.All()$/;"	f
MenuItem.AllEnabled	plugin/NERD_tree.vim	/^function! s:MenuItem.AllEnabled()$/;"	f
MenuItem.Create	plugin/NERD_tree.vim	/^function! s:MenuItem.Create(options)$/;"	f
MenuItem.CreateSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSeparator(options)$/;"	f
MenuItem.CreateSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.CreateSubmenu(options)$/;"	f
MenuItem.enabled	plugin/NERD_tree.vim	/^function! s:MenuItem.enabled()$/;"	f
MenuItem.execute	plugin/NERD_tree.vim	/^function! s:MenuItem.execute()$/;"	f
MenuItem.isSeparator	plugin/NERD_tree.vim	/^function! s:MenuItem.isSeparator()$/;"	f
MenuItem.isSubmenu	plugin/NERD_tree.vim	/^function! s:MenuItem.isSubmenu()$/;"	f
Mru	plugin/mru.vim	/^command! -nargs=? -complete=customlist,s:MRU_Complete Mru$/;"	c
MultiMatch	plugin/matchit.vim	/^fun! s:MultiMatch(spflag, mode)$/;"	f
Multipart	plugin/NERD_commenter.vim	/^function s:Multipart()$/;"	f
NERDComment	plugin/NERD_commenter.vim	/^function! NERDComment(isVisual, type) range$/;"	f
NERDTree	plugin/NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeAddKeyMap	plugin/NERD_tree.vim	/^function! NERDTreeAddKeyMap(options)$/;"	f
NERDTreeAddMenuItem	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuItem(options)$/;"	f
NERDTreeAddMenuSeparator	plugin/NERD_tree.vim	/^function! NERDTreeAddMenuSeparator(...)$/;"	f
NERDTreeAddNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeAddNode()$/;"	f
NERDTreeAddSubmenu	plugin/NERD_tree.vim	/^function! NERDTreeAddSubmenu(options)$/;"	f
NERDTreeClose	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeCopyNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeCopyNode()$/;"	f
NERDTreeDeleteNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeDeleteNode()$/;"	f
NERDTreeExecFile	nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFile()$/;"	f
NERDTreeExecFileActive	nerdtree_plugin/exec_menuitem.vim	/^function! NERDTreeExecFileActive()$/;"	f
NERDTreeFind	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeFind call s:findAndRevealPath()$/;"	c
NERDTreeFromBookmark	plugin/NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeHijackNetrw	plugin/NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	plugin/NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeMoveNode	nerdtree_plugin/fs_menu.vim	/^function! NERDTreeMoveNode()$/;"	f
NERDTreeRender	plugin/NERD_tree.vim	/^function! NERDTreeRender()$/;"	f
NERDTreeToggle	plugin/NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NORMAL_PRIORITY_CLASS	autoload/conque_term/conque_win32_util.py	/^NORMAL_PRIORITY_CLASS = 0x00000020$/;"	v
NUMLOCK_ON	autoload/conque_term/conque_win32_util.py	/^NUMLOCK_ON = 0x0020$/;"	v
Navcommand	autoload/rails.vim	/^function! s:Navcommand(bang,...)$/;"	f
NeoComplCacheEnable	plugin/neocomplcache.vim	/^command! -nargs=0 NeoComplCacheEnable call neocomplcache#enable()$/;"	c
NerdEcho	plugin/NERD_commenter.vim	/^function s:NerdEcho(msg, typeOfMsg)$/;"	f
NewProject	autoload/rails.vim	/^function! s:NewProject(proj,rr)$/;"	f
NewProjectTemplate	autoload/rails.vim	/^function! s:NewProjectTemplate(proj,rr)$/;"	f
NormalTag.New	plugin/tagbar.vim	/^function! s:NormalTag.New(name) dict$/;"	f
NormalTag.getPrototype	plugin/tagbar.vim	/^function! s:NormalTag.getPrototype() dict$/;"	f
NormalTag.isNormalTag	plugin/tagbar.vim	/^function! s:NormalTag.isNormalTag() dict$/;"	f
NormalTag.str	plugin/tagbar.vim	/^function! s:NormalTag.str() dict$/;"	f
NumLinesInBuf	plugin/NERD_commenter.vim	/^function s:NumLinesInBuf()$/;"	f
NumberOfLeadingTabs	plugin/NERD_commenter.vim	/^function s:NumberOfLeadingTabs(s)$/;"	f
OBJS	ruby/command-t/Makefile	/^OBJS = match.o matcher.o ext.o$/;"	m
OUTFLAG	ruby/command-t/Makefile	/^OUTFLAG = -o $/;"	m
Open	plugin/gnuchlog.vim	/^function! s:Open()$/;"	f
OpenFold	plugin/tagbar.vim	/^function! s:OpenFold()$/;"	f
OpenParents	plugin/tagbar.vim	/^function! s:OpenParents(...)$/;"	f
OpenWindow	plugin/tagbar.vim	/^function! s:OpenWindow(autoclose)$/;"	f
OverrideOption	plugin/vcscommand.vim	/^function! s:OverrideOption(option, ...)$/;"	f
PROCESS_CREATE_PROCESS	autoload/conque_term/conque_win32_util.py	/^PROCESS_CREATE_PROCESS = 0x0080$/;"	v
PROCESS_CREATE_THREAD	autoload/conque_term/conque_win32_util.py	/^PROCESS_CREATE_THREAD = 0x0002$/;"	v
PROCESS_DUP_HANDLE	autoload/conque_term/conque_win32_util.py	/^PROCESS_DUP_HANDLE = 0x0040$/;"	v
PROCESS_INFORMATION	autoload/conque_term/conque_win32_util.py	/^class PROCESS_INFORMATION(Structure):$/;"	c
PROCESS_QUERY_INFORMATION	autoload/conque_term/conque_win32_util.py	/^PROCESS_QUERY_INFORMATION = 0x0400$/;"	v
PROCESS_QUERY_LIMITED_INFORMATION	autoload/conque_term/conque_win32_util.py	/^PROCESS_QUERY_LIMITED_INFORMATION = 0x1000$/;"	v
PROCESS_SET_INFORMATION	autoload/conque_term/conque_win32_util.py	/^PROCESS_SET_INFORMATION = 0x0200$/;"	v
PROCESS_SET_QUOTA	autoload/conque_term/conque_win32_util.py	/^PROCESS_SET_QUOTA = 0x0100$/;"	v
PROCESS_SUSPEND_RESUME	autoload/conque_term/conque_win32_util.py	/^PROCESS_SUSPEND_RESUME = 0x0800$/;"	v
PROCESS_TERMINATE	autoload/conque_term/conque_win32_util.py	/^PROCESS_TERMINATE = 0x0001$/;"	v
PROCESS_VM_OPERATION	autoload/conque_term/conque_win32_util.py	/^PROCESS_VM_OPERATION = 0x0008$/;"	v
PROCESS_VM_READ	autoload/conque_term/conque_win32_util.py	/^PROCESS_VM_READ = 0x0010$/;"	v
PROCESS_VM_WRITE	autoload/conque_term/conque_win32_util.py	/^PROCESS_VM_WRITE = 0x0020$/;"	v
ParseSkip	plugin/matchit.vim	/^fun! s:ParseSkip(str)$/;"	f
ParseTagline	plugin/tagbar.vim	/^function! s:ParseTagline(part1, part2, typeinfo, fileinfo)$/;"	f
ParseWords	plugin/matchit.vim	/^fun! s:ParseWords(groups)$/;"	f
Path.AbsolutePathFor	plugin/NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	plugin/NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	plugin/NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	plugin/NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	plugin/NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.Slash	plugin/NERD_tree.vim	/^function! s:Path.Slash()$/;"	f
Path.WinToUnixPath	plugin/NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path._str	plugin/NERD_tree.vim	/^function! s:Path._str()$/;"	f
Path._strForCd	plugin/NERD_tree.vim	/^function! s:Path._strForCd()$/;"	f
Path._strForEdit	plugin/NERD_tree.vim	/^function! s:Path._strForEdit()$/;"	f
Path._strForGlob	plugin/NERD_tree.vim	/^function! s:Path._strForGlob()$/;"	f
Path._strForUI	plugin/NERD_tree.vim	/^function! s:Path._strForUI()$/;"	f
Path.bookmarkNames	plugin/NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	plugin/NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	plugin/NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	plugin/NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	plugin/NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	plugin/NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	plugin/NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.displayString	plugin/NERD_tree.vim	/^function! s:Path.displayString()$/;"	f
Path.equals	plugin/NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	plugin/NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	plugin/NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	plugin/NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	plugin/NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	plugin/NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getSortOrderIndex	plugin/NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	plugin/NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.isUnder	plugin/NERD_tree.vim	/^function! s:Path.isUnder(path)$/;"	f
Path.readInfoFromDisk	plugin/NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	plugin/NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	plugin/NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	plugin/NERD_tree.vim	/^function! s:Path.str(...)$/;"	f
Path.strTrunk	plugin/NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PathUtilities	ruby/command-t/vim/path_utilities.rb	/^    module PathUtilities$/;"	m	class:CommandT.VIM
PlaceDelimitersAndInsBetween	plugin/NERD_commenter.vim	/^function s:PlaceDelimitersAndInsBetween()$/;"	f
Preview	autoload/rails.vim	/^function! s:Preview(bang,lnum,arg)$/;"	f
PrintHelp	plugin/tagbar.vim	/^function! s:PrintHelp()$/;"	f
PrintKinds	plugin/tagbar.vim	/^function! s:PrintKinds(typeinfo, fileinfo)$/;"	f
PrintTag	plugin/tagbar.vim	/^function! s:PrintTag(tag, depth, fileinfo, typeinfo)$/;"	f
ProcessFile	plugin/snipMate.vim	/^fun s:ProcessFile(file, ft, ...)$/;"	f
ProcessFile	plugin/tagbar.vim	/^function! s:ProcessFile(fname, ftype)$/;"	f
ProcessPseudoChildren	plugin/tagbar.vim	/^function! s:ProcessPseudoChildren(tags, tag, depth, typeinfo, fileinfo)$/;"	f
ProcessPseudoTag	plugin/tagbar.vim	/^function! s:ProcessPseudoTag(curtags, tag, parent, typeinfo, fileinfo)$/;"	f
ProcessSnippet	autoload/snipMate.vim	/^fun s:ProcessSnippet(snip)$/;"	f
Project	autoload/rails.vim	/^function! s:Project(bang,arg)$/;"	f
ProjectMenu	plugin/rails.vim	/^function! s:ProjectMenu()$/;"	f
Prompt	ruby/command-t/prompt.rb	/^  class Prompt$/;"	c	class:CommandT
PseudoTag.New	plugin/tagbar.vim	/^function! s:PseudoTag.New(name) dict$/;"	f
PseudoTag.isPseudoTag	plugin/tagbar.vim	/^function! s:PseudoTag.isPseudoTag() dict$/;"	f
PseudoTag.str	plugin/tagbar.vim	/^function! s:PseudoTag.str() dict$/;"	f
Queue	autoload/l9/async.py	/^import Queue$/;"	i
QuitIfOnlyWindow	plugin/tagbar.vim	/^function! s:QuitIfOnlyWindow()$/;"	f
RARRAY_LEN	ruby/command-t/ruby_compat.h	43;"	d
RARRAY_PTR	ruby/command-t/ruby_compat.h	38;"	d
REALTIME_PRIORITY_CLASS	autoload/conque_term/conque_win32_util.py	/^REALTIME_PRIORITY_CLASS = 0x00000100$/;"	v
RFLOAT_VALUE	ruby/command-t/ruby_compat.h	48;"	d
RIGHT_ALT_PRESSED	autoload/conque_term/conque_win32_util.py	/^RIGHT_ALT_PRESSED = 0x0001$/;"	v
RIGHT_CTRL_PRESSED	autoload/conque_term/conque_win32_util.py	/^RIGHT_CTRL_PRESSED = 0x0004$/;"	v
RM	ruby/command-t/Makefile	/^RM = rm -f$/;"	m
RMDIRS	ruby/command-t/Makefile	/^RMDIRS = $(RUBY) -run -e rmdir -- -p$/;"	m
RM_RF	ruby/command-t/Makefile	/^RM_RF = $(RUBY) -run -e rm -- -rf$/;"	m
RSTRING_LEN	ruby/command-t/ruby_compat.h	33;"	d
RSTRING_PTR	ruby/command-t/ruby_compat.h	28;"	d
RUBY	ruby/command-t/Makefile	/^RUBY = $(ruby)$/;"	m
RUBYARCHDIR	ruby/command-t/Makefile	/^RUBYARCHDIR   = $(sitearchdir)$(target_prefix)$/;"	m
RUBYCOMMONDIR	ruby/command-t/Makefile	/^RUBYCOMMONDIR = $(sitedir)$(target_prefix)$/;"	m
RUBYLIBDIR	ruby/command-t/Makefile	/^RUBYLIBDIR    = $(sitelibdir)$(target_prefix)$/;"	m
RUBY_BASE_NAME	ruby/command-t/Makefile	/^RUBY_BASE_NAME = ruby$/;"	m
RUBY_EXTCONF_H	ruby/command-t/Makefile	/^RUBY_EXTCONF_H = $/;"	m
RUBY_INSTALL_NAME	ruby/command-t/Makefile	/^RUBY_INSTALL_NAME = ruby$/;"	m
RUBY_SO_NAME	ruby/command-t/Makefile	/^RUBY_SO_NAME = ruby$/;"	m
Ragrep	plugin/grep.vim	/^command! -nargs=* -complete=file Ragrep$/;"	c
RagrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file RagrepAdd$/;"	c
Rails	plugin/rails.vim	/^command! -bar -bang -nargs=* -complete=dir Rails :if s:autoload()|call rails#new_app_command(<bang>0,<f-args>)|endif$/;"	c
RailsBufInit	autoload/rails.vim	/^function! RailsBufInit(path)$/;"	f
RailsFile	autoload/rails.vim	/^function! RailsFile()$/;"	f
RailsFilePath	autoload/rails.vim	/^function! RailsFilePath()$/;"	f
RailsFileType	autoload/rails.vim	/^function! RailsFileType()$/;"	f
RailsFind	autoload/rails.vim	/^function! s:RailsFind()$/;"	f
RailsHelpCommand	autoload/rails.vim	/^function! RailsHelpCommand(...)$/;"	f
RailsIncludeexpr	autoload/rails.vim	/^function! RailsIncludeexpr()$/;"	f
RailsIncludefind	autoload/rails.vim	/^function! s:RailsIncludefind(str,...)$/;"	f
RailsNamedRoutes	autoload/rails.vim	/^function! RailsNamedRoutes()$/;"	f
RailsRevision	autoload/rails.vim	/^function! RailsRevision()$/;"	f
RailsRoot	autoload/rails.vim	/^function! RailsRoot()$/;"	f
Rake	autoload/rails.vim	/^function! s:Rake(bang,lnum,arg)$/;"	f
Rand	plugin/matrix.vim	/^function! s:Rand()$/;"	f
Ref	plugin/matchit.vim	/^fun! s:Ref(string, d, ...)$/;"	f
Refresh	autoload/rails.vim	/^function! s:Refresh(bang)$/;"	f
RefreshBuffer	autoload/rails.vim	/^function! s:RefreshBuffer()$/;"	f
Regrep	plugin/grep.vim	/^command! -nargs=* -complete=file Regrep$/;"	c
RegrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file RegrepAdd$/;"	c
Related	autoload/rails.vim	/^function! s:Related(cmd,line1,line2,count,...)$/;"	f
RemoveDelimiters	plugin/NERD_commenter.vim	/^function s:RemoveDelimiters(left, right, line)$/;"	f
RemoveSnippet	autoload/snipMate.vim	/^fun s:RemoveSnippet()$/;"	f
RenderContent	plugin/tagbar.vim	/^function! s:RenderContent(...)$/;"	f
RenderKeepView	plugin/tagbar.vim	/^function! s:RenderKeepView(...)$/;"	f
ReplaceDelims	plugin/NERD_commenter.vim	/^function s:ReplaceDelims(toReplace1, toReplace2, replacor1, replacor2, str)$/;"	f
ReplaceLeftMostDelim	plugin/NERD_commenter.vim	/^function s:ReplaceLeftMostDelim(toReplace, replacor, str)$/;"	f
ReplaceRightMostDelim	plugin/NERD_commenter.vim	/^function s:ReplaceRightMostDelim(toReplace, replacor, str)$/;"	f
ReportError	plugin/vcscommand.vim	/^function! s:ReportError(error)$/;"	f
Reset	plugin/matrix.vim	/^function! s:Reset()$/;"	f
ResetSnippets	plugin/snipMate.vim	/^fun! ResetSnippets()$/;"	f
Resolve	plugin/matchit.vim	/^fun! s:Resolve(source, target, output)$/;"	f
RestoreScreenState	plugin/NERD_commenter.vim	/^function s:RestoreScreenState()$/;"	f
Rfgrep	plugin/grep.vim	/^command! -nargs=* -complete=file Rfgrep$/;"	c
RfgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file RfgrepAdd$/;"	c
Rgrep	plugin/grep.vim	/^command! -nargs=* -complete=file Rgrep$/;"	c
RgrepAdd	plugin/grep.vim	/^command! -nargs=* -complete=file RgrepAdd$/;"	c
Right	plugin/NERD_commenter.vim	/^function s:Right(...)$/;"	f
RightMostIndx	plugin/NERD_commenter.vim	/^function s:RightMostIndx(countCommentedLines, countEmptyLines, topline, bottomline)$/;"	f
RunGrep	plugin/grep.vim	/^function! s:RunGrep(cmd_name, grep_cmd, action, ...)$/;"	f
RunGrepCmd	plugin/grep.vim	/^function! s:RunGrepCmd(cmd, pattern, action)$/;"	f
RunGrepRecursive	plugin/grep.vim	/^function! s:RunGrepRecursive(cmd_name, grep_cmd, action, ...)$/;"	f
RunGrepSpecial	plugin/grep.vim	/^function! s:RunGrepSpecial(cmd_name, which, action, ...)$/;"	f
S	plugin/surround.vim	/^      vmap  S    <Plug>VSurround$/;"	m
SCROLLLOCK_ON	autoload/conque_term/conque_win32_util.py	/^SCROLLLOCK_ON = 0x0040$/;"	v
SECURITY_ATTRIBUTES	autoload/conque_term/conque_win32_util.py	/^class SECURITY_ATTRIBUTES(Structure):$/;"	c
SHELL	ruby/command-t/Makefile	/^SHELL = \/bin\/sh$/;"	m
SHIFT_PRESSED	autoload/conque_term/conque_win32_util.py	/^SHIFT_PRESSED = 0x0010$/;"	v
SID_PREFIX	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:SID_PREFIX()$/;"	f
SMALL_RECT	autoload/conque_term/conque_win32_util.py	/^class SMALL_RECT(Structure):$/;"	c
SRCS	ruby/command-t/Makefile	/^SRCS = match.c matcher.c ext.c$/;"	m
STARTF_FORCEOFFFEEDBACK	autoload/conque_term/conque_win32_util.py	/^STARTF_FORCEOFFFEEDBACK = 0x00000080$/;"	v
STARTF_FORCEONFEEDBACK	autoload/conque_term/conque_win32_util.py	/^STARTF_FORCEONFEEDBACK = 0x00000040$/;"	v
STARTF_PREVENTPINNING	autoload/conque_term/conque_win32_util.py	/^STARTF_PREVENTPINNING = 0x00002000$/;"	v
STARTF_RUNFULLSCREEN	autoload/conque_term/conque_win32_util.py	/^STARTF_RUNFULLSCREEN = 0x00000020$/;"	v
STARTF_TITLEISAPPID	autoload/conque_term/conque_win32_util.py	/^STARTF_TITLEISAPPID = 0x00001000$/;"	v
STARTF_TITLEISLINKNAME	autoload/conque_term/conque_win32_util.py	/^STARTF_TITLEISLINKNAME = 0x00000800$/;"	v
STARTF_USECOUNTCHARS	autoload/conque_term/conque_win32_util.py	/^STARTF_USECOUNTCHARS = 0x00000008$/;"	v
STARTF_USEFILLATTRIBUTE	autoload/conque_term/conque_win32_util.py	/^STARTF_USEFILLATTRIBUTE = 0x00000010$/;"	v
STARTF_USEHOTKEY	autoload/conque_term/conque_win32_util.py	/^STARTF_USEHOTKEY = 0x00000200$/;"	v
STARTF_USEPOSITION	autoload/conque_term/conque_win32_util.py	/^STARTF_USEPOSITION = 0x00000004$/;"	v
STARTF_USESHOWWINDOW	autoload/conque_term/conque_win32_util.py	/^STARTF_USESHOWWINDOW = 0x00000001$/;"	v
STARTF_USESIZE	autoload/conque_term/conque_win32_util.py	/^STARTF_USESIZE = 0x00000002$/;"	v
STARTF_USESTDHANDLES	autoload/conque_term/conque_win32_util.py	/^STARTF_USESTDHANDLES = 0x00000100$/;"	v
STARTUPINFO	autoload/conque_term/conque_win32_util.py	/^class STARTUPINFO(Structure):$/;"	c
STATIC_LIB	ruby/command-t/Makefile	/^STATIC_LIB = $/;"	m
STD_ERROR_HANDLE	autoload/conque_term/conque_win32_util.py	/^STD_ERROR_HANDLE = c_ulong(-12)$/;"	v
STD_INPUT_HANDLE	autoload/conque_term/conque_win32_util.py	/^STD_INPUT_HANDLE = c_ulong(-10)$/;"	v
STD_OUTPUT_HANDLE	autoload/conque_term/conque_win32_util.py	/^STD_OUTPUT_HANDLE = c_ulong(-11)$/;"	v
SW_FORCEMINIMIZE	autoload/conque_term/conque_win32_util.py	/^SW_FORCEMINIMIZE = 11$/;"	v
SW_HIDE	autoload/conque_term/conque_win32_util.py	/^SW_HIDE = 0$/;"	v
SW_MAXIMIZE	autoload/conque_term/conque_win32_util.py	/^SW_MAXIMIZE = 3$/;"	v
SW_MINIMIZE	autoload/conque_term/conque_win32_util.py	/^SW_MINIMIZE = 6$/;"	v
SW_RESTORE	autoload/conque_term/conque_win32_util.py	/^SW_RESTORE = 9$/;"	v
SW_SHOW	autoload/conque_term/conque_win32_util.py	/^SW_SHOW = 5$/;"	v
SW_SHOWDEFAULT	autoload/conque_term/conque_win32_util.py	/^SW_SHOWDEFAULT = 10$/;"	v
SW_SHOWMAXIMIZED	autoload/conque_term/conque_win32_util.py	/^SW_SHOWMAXIMIZED = 3$/;"	v
SW_SHOWMINIMIZED	autoload/conque_term/conque_win32_util.py	/^SW_SHOWMINIMIZED = 2$/;"	v
SW_SHOWMINNOACTIVE	autoload/conque_term/conque_win32_util.py	/^SW_SHOWMINNOACTIVE = 7$/;"	v
SW_SHOWNA	autoload/conque_term/conque_win32_util.py	/^SW_SHOWNA = 8$/;"	v
SW_SHOWNOACTIVATE	autoload/conque_term/conque_win32_util.py	/^SW_SHOWNOACTIVATE = 4$/;"	v
SW_SHOWNORMAL	autoload/conque_term/conque_win32_util.py	/^SW_SHOWNORMAL = 1$/;"	v
SaveScreenState	plugin/NERD_commenter.vim	/^function s:SaveScreenState()$/;"	f
Scanner	ruby/command-t/scanner.rb	/^  class Scanner; end$/;"	c	class:CommandT
Screen	ruby/command-t/vim/screen.rb	/^    module Screen$/;"	m	class:CommandT.VIM
Search	autoload/mark.vim	/^function! s:Search( pattern, isBackward, currentMarkPosition, searchType )$/;"	f
SelectWord	autoload/snipMate.vim	/^fun s:SelectWord()$/;"	f
Set	autoload/rails.vim	/^function! s:Set(bang,...)$/;"	f
SetBasePath	autoload/rails.vim	/^function! s:SetBasePath()$/;"	f
SetFoldLevel	plugin/tagbar.vim	/^function! s:SetFoldLevel(level)$/;"	f
SetFoldLevelRecursive	plugin/tagbar.vim	/^function! s:SetFoldLevelRecursive(fileinfo, tags, level)$/;"	f
SetOptDefault	plugin/rails.vim	/^function! s:SetOptDefault(opt,val)$/;"	f
SetUpForNewFiletype	plugin/NERD_commenter.vim	/^function s:SetUpForNewFiletype(filetype, forceReset)$/;"	f
Settings	ruby/command-t/settings.rb	/^  class Settings$/;"	c	class:CommandT
SetupBuffer	plugin/vcscommand.vim	/^function! s:SetupBuffer()$/;"	f
SetupScratchBuffer	plugin/vcscommand.vim	/^function! s:SetupScratchBuffer(command, vcsType, originalBuffer, statusText)$/;"	f
ShowAvailableSnips	plugin/snipMate.vim	/^fun! ShowAvailableSnips()$/;"	f
ShowPrototype	plugin/tagbar.vim	/^function! s:ShowPrototype()$/;"	f
SnippetsIndent	indent/snippet.vim	/^function! SnippetsIndent()"{{{$/;"	f
SortTags	plugin/tagbar.vim	/^function! s:SortTags(tags, comparemethod)$/;"	f
Stub	ruby/command-t/stub.rb	/^  class Stub$/;"	c	class:CommandT
SwapOutterMultiPartDelimsForPlaceHolders	plugin/NERD_commenter.vim	/^function s:SwapOutterMultiPartDelimsForPlaceHolders(line)$/;"	f
SwapOutterPlaceHoldersForMultiPartDelims	plugin/NERD_commenter.vim	/^function s:SwapOutterPlaceHoldersForMultiPartDelims(line)$/;"	f
SwitchToAlternativeDelimiters	plugin/NERD_commenter.vim	/^function s:SwitchToAlternativeDelimiters(printMsgs)$/;"	f
TARGET	ruby/command-t/Makefile	/^TARGET = ext$/;"	m
TARGET_SO	ruby/command-t/Makefile	/^TARGET_SO     = $(DLLIB)$/;"	m
TERMINATOR	autoload/conque_term/conque_sole_shared_memory.py	/^    TERMINATOR = None$/;"	v	class:ConqueSoleSharedMemory
TabSpace	plugin/NERD_commenter.vim	/^function s:TabSpace()$/;"	f
TabbedCol	plugin/NERD_commenter.vim	/^function s:TabbedCol(line, col)$/;"	f
TagbarBalloonExpr	plugin/tagbar.vim	/^function! TagbarBalloonExpr()$/;"	f
TagbarClose	plugin/tagbar.vim	/^command! -nargs=0 TagbarClose         call s:CloseWindow()$/;"	c
TagbarGenerateStatusline	plugin/tagbar.vim	/^function! TagbarGenerateStatusline()$/;"	f
TagbarOpen	plugin/tagbar.vim	/^command! -nargs=0 TagbarOpen          call s:OpenWindow(0)$/;"	c
TagbarOpenAutoClose	plugin/tagbar.vim	/^command! -nargs=0 TagbarOpenAutoClose call s:OpenWindow(1)$/;"	c
TagbarSetFoldlevel	plugin/tagbar.vim	/^command! -nargs=1 TagbarSetFoldlevel  call s:SetFoldLevel(<args>)$/;"	c
TagbarShowTag	plugin/tagbar.vim	/^command! -nargs=0 TagbarShowTag       call s:OpenParents()$/;"	c
TagbarToggle	plugin/tagbar.vim	/^command! -nargs=0 TagbarToggle        call s:ToggleWindow()$/;"	c
TheCWord	autoload/rails.vim	/^function! s:TheCWord()$/;"	f
ToggleFold	plugin/tagbar.vim	/^function! s:ToggleFold()$/;"	f
ToggleHelp	plugin/tagbar.vim	/^function! s:ToggleHelp()$/;"	f
ToggleSort	plugin/tagbar.vim	/^function! s:ToggleSort()$/;"	f
ToggleWindow	plugin/tagbar.vim	/^function! s:ToggleWindow()$/;"	f
TreeDirNode.AbsoluteTreeRoot	plugin/NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	plugin/NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	plugin/NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.activate	plugin/NERD_tree.vim	/^function! s:TreeDirNode.activate(forceKeepWinOpen)$/;"	f
TreeDirNode.addChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	plugin/NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	plugin/NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openInNewTab(options)$/;"	f
TreeDirNode.openRecursively	plugin/NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.reveal	plugin/NERD_tree.vim	/^function! s:TreeDirNode.reveal(path)$/;"	f
TreeDirNode.sortChildren	plugin/NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	plugin/NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	plugin/NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootForTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootForTab()$/;"	f
TreeFileNode.GetRootLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	plugin/NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	plugin/NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.activate	plugin/NERD_tree.vim	/^function! s:TreeFileNode.activate(forceKeepWinOpen)$/;"	f
TreeFileNode.bookmark	plugin/NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	plugin/NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	plugin/NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	plugin/NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	plugin/NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.displayString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.displayString()$/;"	f
TreeFileNode.equals	plugin/NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	plugin/NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	plugin/NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	plugin/NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	plugin/NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	plugin/NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openInNewTab	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openInNewTab(options)$/;"	f
TreeFileNode.openSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	plugin/NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	plugin/NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	plugin/NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	plugin/NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	plugin/NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TriggerSnippet	plugin/snipMate.vim	/^fun! TriggerSnippet()$/;"	f
Trim	autoload/mark.vim	/^	function! s:Trim( message )$/;"	f
UnEsc	plugin/NERD_commenter.vim	/^function s:UnEsc(str, escChar)$/;"	f
UncommentLineNormal	plugin/NERD_commenter.vim	/^function s:UncommentLineNormal(line)$/;"	f
UncommentLines	plugin/NERD_commenter.vim	/^function s:UncommentLines(topLine, bottomLine)$/;"	f
UncommentLinesNormal	plugin/NERD_commenter.vim	/^function s:UncommentLinesNormal(topline, bottomline)$/;"	f
UncommentLinesSexy	plugin/NERD_commenter.vim	/^function s:UncommentLinesSexy(topline, bottomline)$/;"	f
UntabbedCol	plugin/NERD_commenter.vim	/^function s:UntabbedCol(line, col)$/;"	f
UpdateChangedSnip	autoload/snipMate.vim	/^fun s:UpdateChangedSnip(entering)$/;"	f
UpdatePlaceholderTabStops	autoload/snipMate.vim	/^fun s:UpdatePlaceholderTabStops()$/;"	f
UpdateTabStops	autoload/snipMate.vim	/^fun s:UpdateTabStops()$/;"	f
UpdateVars	autoload/snipMate.vim	/^fun s:UpdateVars()$/;"	f
VCSAdd	plugin/vcscommand.vim	/^com! -nargs=* VCSAdd call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Add', [<f-args>]))$/;"	c
VCSAnnotate	plugin/vcscommand.vim	/^com! -nargs=* -bang VCSAnnotate call s:VCSAnnotate(<q-bang>, <f-args>)$/;"	c
VCSAnnotate	plugin/vcscommand.vim	/^function! s:VCSAnnotate(bang, ...)$/;"	f
VCSBlame	plugin/vcscommand.vim	/^com! -nargs=* -bang VCSBlame call s:VCSAnnotate(<q-bang>, <f-args>)$/;"	c
VCSCommand	plugin/vcscommand.vim	/^augroup VCSCommand$/;"	a
VCSCommandChangeToCurrentFileDir	plugin/vcscommand.vim	/^function! VCSCommandChangeToCurrentFileDir(fileName)$/;"	f
VCSCommandChdir	plugin/vcscommand.vim	/^function! VCSCommandChdir(directory)$/;"	f
VCSCommandCommit	plugin/vcscommand.vim	/^augroup VCSCommandCommit$/;"	a
VCSCommandDisableBufferSetup	plugin/vcscommand.vim	/^com! VCSCommandDisableBufferSetup call VCSCommandDisableBufferSetup()$/;"	c
VCSCommandDisableBufferSetup	plugin/vcscommand.vim	/^function! VCSCommandDisableBufferSetup()$/;"	f
VCSCommandDoCommand	plugin/vcscommand.vim	/^function! VCSCommandDoCommand(cmd, cmdName, statusText, options)$/;"	f
VCSCommandEnableBufferSetup	plugin/vcscommand.vim	/^com! VCSCommandEnableBufferSetup call VCSCommandEnableBufferSetup()$/;"	c
VCSCommandEnableBufferSetup	plugin/vcscommand.vim	/^function! VCSCommandEnableBufferSetup()$/;"	f
VCSCommandGetOption	plugin/vcscommand.vim	/^function! VCSCommandGetOption(name, default)$/;"	f
VCSCommandGetOriginalBuffer	plugin/vcscommand.vim	/^function! VCSCommandGetOriginalBuffer(vcsBuffer)$/;"	f
VCSCommandGetStatusLine	plugin/vcscommand.vim	/^function! VCSCommandGetStatusLine()$/;"	f
VCSCommandGetVCSType	plugin/vcscommand.vim	/^function! VCSCommandGetVCSType(buffer)$/;"	f
VCSCommandRegisterModule	plugin/vcscommand.vim	/^function! VCSCommandRegisterModule(name, path, commandMap, mappingMap)$/;"	f
VCSCommandUtility.addMenuItem	plugin/vcscommand.vim	/^function! s:VCSCommandUtility.addMenuItem(shortcut, command)$/;"	f
VCSCommandUtility.system	plugin/vcscommand.vim	/^function! s:VCSCommandUtility.system(...)$/;"	f
VCSCommandVIMShutdown	plugin/vcscommand.vim	/^augroup VCSCommandVIMShutdown$/;"	a
VCSCommit	plugin/vcscommand.vim	/^com! -nargs=? -bang VCSCommit call s:VCSCommit(<q-bang>, <q-args>)$/;"	c
VCSCommit	plugin/vcscommand.vim	/^function! s:VCSCommit(bang, message)$/;"	f
VCSDelete	plugin/vcscommand.vim	/^com! -nargs=* VCSDelete call s:ExecuteVCSCommand('Delete', [<f-args>])$/;"	c
VCSDiff	plugin/vcscommand.vim	/^com! -nargs=* VCSDiff call s:VCSDiff(<f-args>)$/;"	c
VCSDiff	plugin/vcscommand.vim	/^function! s:VCSDiff(...)  "{{{2$/;"	f
VCSFinishCommit	plugin/vcscommand.vim	/^function! s:VCSFinishCommit(logMessageList, originalBuffer)$/;"	f
VCSFinishCommitWithBuffer	plugin/vcscommand.vim	/^function! s:VCSFinishCommitWithBuffer()$/;"	f
VCSGotoOriginal	plugin/vcscommand.vim	/^com! -nargs=0 -bang VCSGotoOriginal call s:VCSGotoOriginal(<q-bang>)$/;"	c
VCSGotoOriginal	plugin/vcscommand.vim	/^function! s:VCSGotoOriginal(bang)$/;"	f
VCSInfo	plugin/vcscommand.vim	/^com! -nargs=* VCSInfo call s:ExecuteVCSCommand('Info', [<f-args>])$/;"	c
VCSLock	plugin/vcscommand.vim	/^com! -nargs=* VCSLock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Lock', [<f-args>]))$/;"	c
VCSLog	plugin/vcscommand.vim	/^com! -nargs=* VCSLog call s:ExecuteVCSCommand('Log', [<f-args>])$/;"	c
VCSReload	plugin/vcscommand.vim	/^com! VCSReload let savedPlugins = s:plugins|let s:plugins = {}|call s:ClearMenu()|unlet! g:loaded_VCSCommand|runtime plugin\/vcscommand.vim|for plugin in values(savedPlugins)|execute 'source' plugin[0]|endfor|unlet savedPlugins$/;"	c
VCSRemove	plugin/vcscommand.vim	/^com! -nargs=* VCSRemove call s:ExecuteVCSCommand('Delete', [<f-args>])$/;"	c
VCSRevert	plugin/vcscommand.vim	/^com! -nargs=0 VCSRevert call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Revert', []))$/;"	c
VCSReview	plugin/vcscommand.vim	/^com! -nargs=? VCSReview call s:VCSReview(<f-args>)$/;"	c
VCSReview	plugin/vcscommand.vim	/^function! s:VCSReview(...)  "{{{2$/;"	f
VCSStatus	plugin/vcscommand.vim	/^com! -nargs=* VCSStatus call s:ExecuteVCSCommand('Status', [<f-args>])$/;"	c
VCSUnlock	plugin/vcscommand.vim	/^com! -nargs=* VCSUnlock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Unlock', [<f-args>]))$/;"	c
VCSUpdate	plugin/vcscommand.vim	/^com! -nargs=0 VCSUpdate call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Update', []))$/;"	c
VCSVimDiff	plugin/vcscommand.vim	/^com! -nargs=* VCSVimDiff call s:VCSVimDiff(<f-args>)$/;"	c
VCSVimDiff	plugin/vcscommand.vim	/^function! s:VCSVimDiff(...)$/;"	f
VIM	ruby/command-t/vim.rb	/^  module VIM$/;"	m	class:CommandT
VIM	ruby/command-t/vim/path_utilities.rb	/^  module VIM$/;"	m	class:CommandT
VIM	ruby/command-t/vim/screen.rb	/^  module VIM$/;"	m	class:CommandT
VIM	ruby/command-t/vim/window.rb	/^  module VIM$/;"	m	class:CommandT
VPATH	ruby/command-t/Makefile	/^VPATH = $(srcdir):$(arch_hdrdir)\/ruby:$(hdrdir)\/ruby$/;"	m
VimDiffRestore	plugin/vcscommand.vim	/^augroup VimDiffRestore$/;"	a
VimDiffRestore	plugin/vcscommand.vim	/^function! s:VimDiffRestore(vimDiffBuff)$/;"	f
WINDOW_BUFFER_SIZE_EVENT	autoload/conque_term/conque_win32_util.py	/^WINDOW_BUFFER_SIZE_EVENT = 0x0004$/;"	v
WINDOW_BUFFER_SIZE_RECORD	autoload/conque_term/conque_win32_util.py	/^class WINDOW_BUFFER_SIZE_RECORD(Structure):$/;"	c
Wholematch	plugin/matchit.vim	/^fun! s:Wholematch(string, pat, start)$/;"	f
WideMsg	ftplugin/javascript/jslint.vim	/^  function s:WideMsg(msg)$/;"	f
Window	ruby/command-t/vim/window.rb	/^    class Window$/;"	c	class:CommandT.VIM
WipeoutCommandBuffers	plugin/vcscommand.vim	/^function! s:WipeoutCommandBuffers(originalBuffer, VCSCommand)$/;"	f
Worker	autoload/l9/async.py	/^class Worker(threading.Thread):$/;"	c
WrapMessage	autoload/mark.vim	/^	function! s:WrapMessage( searchType, searchPattern, isBackward )$/;"	f
X	colors/desert256.vim	/^    fun <SID>X(group, fg, bg, attr)$/;"	f
X	colors/jellybeans.vim	/^fun! s:X(group, fg, bg, attr, lcfg, lcbg)$/;"	f
ZoomWindow	plugin/tagbar.vim	/^function! s:ZoomWindow()$/;"	f
[%	plugin/matchit.vim	/^nnoremap <silent> [% :<C-U>call <SID>MultiMatch("bW", "n") <CR>$/;"	m
[%	plugin/matchit.vim	/^onoremap <silent> [% v:<C-U>call <SID>MultiMatch("bW", "o") <CR>$/;"	m
[%	plugin/matchit.vim	/^vmap [% <Esc>[%m'gv``$/;"	m
]%	plugin/matchit.vim	/^nnoremap <silent> ]% :<C-U>call <SID>MultiMatch("W",  "n") <CR>$/;"	m
]%	plugin/matchit.vim	/^onoremap <silent> ]% v:<C-U>call <SID>MultiMatch("W",  "o") <CR>$/;"	m
]%	plugin/matchit.vim	/^vmap ]% <Esc>]%m'gv``$/;"	m
__delitem__	autoload/conque_term/conque_screen.py	/^    def __delitem__(self, key):$/;"	m	class:ConqueScreen	file:
__getitem__	autoload/conque_term/conque_screen.py	/^    def __getitem__(self, key):$/;"	m	class:ConqueScreen	file:
__init__	autoload/conque_term/conque_screen.py	/^    def __init__(self):$/;"	m	class:ConqueScreen
__init__	autoload/conque_term/conque_sole_shared_memory.py	/^    def __init__(self, mem_size, mem_type, mem_key, fixed_length=False, fill_char=' ', serialize=False, encoding='utf-8'):$/;"	m	class:ConqueSoleSharedMemory
__init__	autoload/l9/async.py	/^    def __init__(self):$/;"	m	class:Asyncer
__init__	autoload/l9/async.py	/^    def __init__(self):$/;"	m	class:Worker
__init__	autoload/l9/async.py	/^    def __init__(self, command, cwd, input, appends):$/;"	m	class:Executor
__len__	autoload/conque_term/conque_screen.py	/^    def __len__(self):$/;"	m	class:ConqueScreen	file:
__setitem__	autoload/conque_term/conque_screen.py	/^    def __setitem__(self, key, value):$/;"	m	class:ConqueScreen	file:
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("BaseAddress",       c_void_p),$/;"	v	class:MEMORY_BASIC_INFORMATION
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("Char", CHAR_UNION),$/;"	v	class:CHAR_INFO
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("EventType", c_short),$/;"	v	class:INPUT_RECORD
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("KeyEvent", KEY_EVENT_RECORD),$/;"	v	class:INPUT_UNION
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("Left", c_short),$/;"	v	class:SMALL_RECT
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("Length", c_ulong),$/;"	v	class:SECURITY_ATTRIBUTES
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("UnicodeChar", c_wchar),$/;"	v	class:CHAR_UNION
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("X", c_short),$/;"	v	class:COORD
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("bKeyDown", c_byte),$/;"	v	class:KEY_EVENT_RECORD
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("bSetFocus", c_byte)]$/;"	v	class:FOCUS_EVENT_RECORD
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("cb",            c_ulong),$/;"	v	class:STARTUPINFO
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("dwCommandId", c_uint)]$/;"	v	class:MENU_EVENT_RECORD
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("dwMousePosition", COORD),$/;"	v	class:MOUSE_EVENT_RECORD
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("dwSize", COORD),$/;"	v	class:CONSOLE_SCREEN_BUFFER_INFO
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("dwSize", COORD)]$/;"	v	class:WINDOW_BUFFER_SIZE_RECORD
_fields_	autoload/conque_term/conque_win32_util.py	/^    _fields_ = [("hProcess",    c_void_p),$/;"	v	class:PROCESS_INFORMATION
a%	plugin/matchit.vim	/^vmap a% <Esc>[%v]%$/;"	m
abbrev_len	ruby/command-t/match.c	/^    long    abbrev_len;             \/\/ length of same$/;"	m	struct:__anon1	file:
abbrev_p	ruby/command-t/match.c	/^    char    *abbrev_p;              \/\/ pointer to search string (abbreviation)$/;"	m	struct:__anon1	file:
abbrev_segments	ruby/command-t/prompt.rb	/^    def abbrev_segments$/;"	f	class:CommandT.Prompt
abolish_l	plugin/rails.vim	/^function! s:abolish_l(word)$/;"	f
abolish_setup	plugin/rails.vim	/^function! s:abolish_setup()$/;"	f
abolish_t	plugin/rails.vim	/^function! s:abolish_t(word)$/;"	f
abort	autoload/conque_term/conque.py	/^    def abort(self):$/;"	m	class:Conque
abort	autoload/conque_term/conque_sole.py	/^    def abort(self):$/;"	m	class:ConqueSole
absolute_coords	autoload/conque_term/conque.py	/^    absolute_coords = True$/;"	v	class:Conque
accept_selection	ruby/command-t/controller.rb	/^    def accept_selection options = {}$/;"	f	class:CommandT.Controller
acp#completeSnipmate	autoload/acp.vim	/^function acp#completeSnipmate(findstart, base)$/;"	f
acp#disable	autoload/acp.vim	/^function acp#disable()$/;"	f
acp#enable	autoload/acp.vim	/^function acp#enable()$/;"	f
acp#lock	autoload/acp.vim	/^function acp#lock()$/;"	f
acp#meetsForCssOmni	autoload/acp.vim	/^function acp#meetsForCssOmni(context)$/;"	f
acp#meetsForFile	autoload/acp.vim	/^function acp#meetsForFile(context)$/;"	f
acp#meetsForHtmlOmni	autoload/acp.vim	/^function acp#meetsForHtmlOmni(context)$/;"	f
acp#meetsForKeyword	autoload/acp.vim	/^function acp#meetsForKeyword(context)$/;"	f
acp#meetsForPerlOmni	autoload/acp.vim	/^function acp#meetsForPerlOmni(context)$/;"	f
acp#meetsForPythonOmni	autoload/acp.vim	/^function acp#meetsForPythonOmni(context)$/;"	f
acp#meetsForRubyOmni	autoload/acp.vim	/^function acp#meetsForRubyOmni(context)$/;"	f
acp#meetsForSnipmate	autoload/acp.vim	/^function acp#meetsForSnipmate(context)$/;"	f
acp#meetsForXmlOmni	autoload/acp.vim	/^function acp#meetsForXmlOmni(context)$/;"	f
acp#onBs	autoload/acp.vim	/^function acp#onBs()$/;"	f
acp#onPopupCloseSnipmate	autoload/acp.vim	/^function acp#onPopupCloseSnipmate()$/;"	f
acp#onPopupPost	autoload/acp.vim	/^function acp#onPopupPost()$/;"	f
acp#unlock	autoload/acp.vim	/^function acp#unlock()$/;"	f
activateFufBuffer	autoload/fuf.vim	/^function s:activateFufBuffer()$/;"	f
activateNode	plugin/NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
add!	ruby/command-t/match_window.rb	/^    def add! char$/;"	f	class:CommandT.MatchWindow
add!	ruby/command-t/prompt.rb	/^    def add! char$/;"	f	class:CommandT.Prompt
add_conceal_color	autoload/conque_term/conque_sole.py	/^    def add_conceal_color(self, text, attributes, stats, line_nr):$/;"	m	class:ConqueSole
add_methods	autoload/rails.vim	/^function! s:add_methods(namespace, method_names)$/;"	f
add_paths_for_directory	ruby/command-t/scanner/file_scanner.rb	/^    def add_paths_for_directory dir, accumulator$/;"	f	class:CommandT.FileScanner
addfilecmds	autoload/rails.vim	/^function! s:addfilecmds(type)$/;"	f
addprojectdir	autoload/rails.vim	/^function! s:addprojectdir(rr,parentdir,dir)$/;"	f
addtostatus	autoload/rails.vim	/^function! s:addtostatus(letter,status)$/;"	f
align	autoload/conque_term/conque_screen.py	/^    def align(self):$/;"	m	class:ConqueScreen
always_show_dot_files	ruby/command-t/match.c	/^    int     always_show_dot_files;  \/\/ boolean$/;"	m	struct:__anon1	file:
amp	plugin/gnuchlog.vim	/^                    let amp = stridx(name, '&')$/;"	v
analyze_dictionary_variable_line	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:analyze_dictionary_variable_line(line, keyword_dict, var_name)"{{{$/;"	f
analyze_function_line	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:analyze_function_line(line, keyword_dict, prototype)"{{{$/;"	f
analyze_variable_line	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:analyze_variable_line(line, keyword_dict)"{{{$/;"	f
app_background_script_command	autoload/rails.vim	/^function! s:app_background_script_command(cmd) dict abort$/;"	f
app_dbext_settings	autoload/rails.vim	/^function! s:app_dbext_settings(environment) dict$/;"	f
app_default_locale	autoload/rails.vim	/^function! s:app_default_locale() dict abort$/;"	f
app_destroy_command	autoload/rails.vim	/^function! s:app_destroy_command(bang,...) dict$/;"	f
app_environments	autoload/rails.vim	/^function! s:app_environments() dict$/;"	f
app_eval	autoload/rails.vim	/^function! s:app_eval(ruby,...) dict abort$/;"	f
app_execute_script_command	autoload/rails.vim	/^function! s:app_execute_script_command(cmd) dict abort$/;"	f
app_file	autoload/rails.vim	/^function! s:app_file(name)$/;"	f
app_find_file	autoload/rails.vim	/^function! s:app_find_file(name, ...) dict abort$/;"	f
app_generate_command	autoload/rails.vim	/^function! s:app_generate_command(bang,...) dict$/;"	f
app_generators	autoload/rails.vim	/^function! s:app_generators() dict$/;"	f
app_has	autoload/rails.vim	/^function! s:app_has(feature) dict$/;"	f
app_has_file	autoload/rails.vim	/^function! s:app_has_file(file) dict$/;"	f
app_lightweight_ruby_eval	autoload/rails.vim	/^function! s:app_lightweight_ruby_eval(ruby,...) dict abort$/;"	f
app_migration	autoload/rails.vim	/^function! s:app_migration(file) dict$/;"	f
app_named_route_file	autoload/rails.vim	/^function! s:app_named_route_file(route) dict$/;"	f
app_path	autoload/rails.vim	/^function! s:app_path(...) dict$/;"	f
app_rake_tasks	autoload/rails.vim	/^function! s:app_rake_tasks() dict$/;"	f
app_relglob	autoload/rails.vim	/^function! s:app_relglob(path,glob,...) dict$/;"	f
app_route_names	autoload/rails.vim	/^function! s:app_route_names() dict$/;"	f
app_ruby_shell_command	autoload/rails.vim	/^function! s:app_ruby_shell_command(cmd) dict abort$/;"	f
app_runner_command	autoload/rails.vim	/^function! s:app_runner_command(count,args) dict$/;"	f
app_script_command	autoload/rails.vim	/^function! s:app_script_command(bang,...) dict$/;"	f
app_script_shell_command	autoload/rails.vim	/^function! s:app_script_shell_command(cmd) dict abort$/;"	f
app_server_command	autoload/rails.vim	/^function! s:app_server_command(bang,arg) dict$/;"	f
app_source_callback	autoload/rails.vim	/^function! s:app_source_callback(file) dict$/;"	f
app_tags_command	autoload/rails.vim	/^function! s:app_tags_command() dict$/;"	f
app_test_suites	autoload/rails.vim	/^function! s:app_test_suites() dict$/;"	f
app_user_assertions	autoload/rails.vim	/^function! s:app_user_assertions() dict$/;"	f
app_user_classes	autoload/rails.vim	/^function! s:app_user_classes() dict$/;"	f
append	autoload/conque_term/conque_screen.py	/^    def append(self, value):$/;"	m	class:ConqueScreen
apply_color	autoload/conque_term/conque.py	/^    def apply_color(self, start, end, line=0):$/;"	m	class:Conque
arch	ruby/command-t/Makefile	/^arch = x86_64-linux$/;"	m
arch_hdrdir	ruby/command-t/Makefile	/^arch_hdrdir = \/home\/baguo\/.rvm\/rubies\/ruby-1.9.2-p180\/include\/ruby-1.9.1\/$(arch)$/;"	m
archdir	ruby/command-t/Makefile	/^archdir = $(rubylibdir)\/$(arch)$/;"	m
attribute_cache	autoload/conque_term/conque_sole.py	/^    attribute_cache = {}$/;"	v	class:ConqueSole
attribute_cache	autoload/conque_term/conque_sole_subprocess.py	/^    attribute_cache = {}$/;"	v	class:ConqueSoleSubprocess
attributes	autoload/conque_term/conque_sole_subprocess.py	/^    attributes = []$/;"	v	class:ConqueSoleSubprocess
auto_read	autoload/conque_term/conque.py	/^    def auto_read(self):$/;"	m	class:Conque
autocamelize	autoload/rails.vim	/^function! s:autocamelize(files,test)$/;"	f
autoload	plugin/rails.vim	/^function! s:autoload(...)$/;"	f
autotag	plugin/autotag.vim	/^augroup autotag$/;"	a
autowrap	autoload/conque_term/conque.py	/^    autowrap = True$/;"	v	class:Conque
b:current_syntax	plugin/php.vim	/^let b:current_syntax = "php"$/;"	v
b:current_syntax	syntax/gitannotate.vim	/^let b:current_syntax="gitAnnotate"$/;"	v
b:current_syntax	syntax/javascript.vim	/^let b:current_syntax = "javascript"$/;"	v
b:current_syntax	syntax/snippet.vim	/^let b:current_syntax = "snippet"$/;"	v
b:current_syntax	syntax/svnannotate.vim	/^let b:current_syntax="svnAnnotate"$/;"	v
b:current_syntax	syntax/tagbar.vim	/^let b:current_syntax = "tagbar"$/;"	v
b:current_syntax	syntax/vcscommit.vim	/^let b:current_syntax = "vcscommit"$/;"	v
b:did_indent	indent/javascript.vim	/^let b:did_indent = 1$/;"	v
b:did_indent	indent/snippet.vim	/^let b:did_indent = 1$/;"	v
b:did_jslint_plugin	ftplugin/javascript/jslint.vim	/^  let b:did_jslint_plugin = 1$/;"	v
b:javascript_fold	syntax/javascript.vim	/^let b:javascript_fold='true'$/;"	v
b:showing_message	ftplugin/javascript/jslint.vim	/^let b:showing_message = 0$/;"	v
b:undo_indent	indent/snippet.vim	/^    let b:undo_indent = ''$/;"	v
b:undo_indent	indent/snippet.vim	/^let b:undo_indent .= '$/;"	v
backspace	ruby/command-t/controller.rb	/^    def backspace$/;"	f	class:CommandT.Controller
backspace!	ruby/command-t/match_window.rb	/^    def backspace!$/;"	f	class:CommandT.MatchWindow
backspace!	ruby/command-t/prompt.rb	/^    def backspace!$/;"	f	class:CommandT.Prompt
beep	plugin/surround.vim	/^function! s:beep()$/;"	f
bindMappings	plugin/NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bindir	ruby/command-t/Makefile	/^bindir = $(exec_prefix)\/bin$/;"	m
bookmark	autoload/fuf/bookmarkdir.vim	/^function s:bookmark(word)$/;"	f
bookmarkHere	autoload/fuf/bookmarkfile.vim	/^function s:bookmarkHere(word)$/;"	f
bookmarkNode	plugin/NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bottom	autoload/conque_term/conque.py	/^    bottom = 24 # relative to top of screen$/;"	v	class:Conque
bound	autoload/conque_term/conque.py	/^    def bound(self, val, min, max):$/;"	m	class:Conque
bucket	autoload/conque_term/conque_sole_wrapper.py	/^    bucket = None$/;"	v	class:ConqueSoleWrapper
bufInWindows	plugin/NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
buffer	autoload/conque_term/conque_screen.py	/^    buffer = None$/;"	v	class:ConqueScreen
buffer	autoload/conque_term/conque_sole.py	/^    buffer = None$/;"	v	class:ConqueSole
buffer_app	autoload/rails.vim	/^function! s:buffer_app() dict abort$/;"	f
buffer_getline	autoload/rails.vim	/^function! s:buffer_getline(...) dict abort$/;"	f
buffer_getvar	autoload/rails.vim	/^function! s:buffer_getvar(varname) dict abort$/;"	f
buffer_height	autoload/conque_term/conque_sole_subprocess.py	/^    buffer_height = 100$/;"	v	class:ConqueSoleSubprocess
buffer_lines	autoload/rails.vim	/^function! s:buffer_lines() dict abort$/;"	f
buffer_name	autoload/rails.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_number	autoload/rails.vim	/^function! s:buffer_number() dict abort$/;"	f
buffer_path	autoload/rails.vim	/^function! s:buffer_path() dict abort$/;"	f
buffer_redraw_ct	autoload/conque_term/conque_sole.py	/^    buffer_redraw_ct = 1$/;"	v	class:ConqueSole
buffer_setvar	autoload/rails.vim	/^function! s:buffer_setvar(varname, val) dict abort$/;"	f
buffer_type_name	autoload/rails.vim	/^function! s:buffer_type_name(...) dict abort$/;"	f
buffer_width	autoload/conque_term/conque_sole_subprocess.py	/^    buffer_width = 160$/;"	v	class:ConqueSoleSubprocess
c	autoload/conque_term/conque.py	/^    c = 1 # current cursor column$/;"	v	class:Conque
cCommandTMatch	ruby/command-t/ext.c	/^VALUE cCommandTMatch    = 0; \/\/ class CommandT::Match$/;"	v
cCommandTMatcher	ruby/command-t/ext.c	/^VALUE cCommandTMatcher  = 0; \/\/ class CommandT::Matcher$/;"	v
cache_clear	autoload/rails.vim	/^function! s:cache_clear(...) dict$/;"	f
cache_get	autoload/rails.vim	/^function! s:cache_get(...) dict$/;"	f
cache_has	autoload/rails.vim	/^function! s:cache_has(key) dict$/;"	f
cache_needs	autoload/rails.vim	/^function! s:cache_needs(key) dict$/;"	f
cache_set	autoload/rails.vim	/^function! s:cache_set(key,value) dict$/;"	f
caching	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:caching()"{{{$/;"	f
caching	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:caching()"{{{$/;"	f
caching	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:caching()"{{{$/;"	f
caching_buffer	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:caching_buffer(name)"{{{$/;"	f
caching_completion_from_dict	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:caching_completion_from_dict(dict_name)"{{{$/;"	f
caching_from_cache	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:caching_from_cache(srcname)"{{{$/;"	f
caching_from_dict	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:caching_from_dict(filetype)"{{{$/;"	f
caching_from_dict	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:caching_from_dict(dict_name, kind)"{{{$/;"	f
caching_from_syn	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:caching_from_syn(filetype)"{{{$/;"	f
caching_prototype_from_dict	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:caching_prototype_from_dict(dict_name)"{{{$/;"	f
caching_snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:caching_snippets(filetype)"{{{$/;"	f
caching_tags	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:caching_tags(bufname, force)"{{{$/;"	f
calc_frequency	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:calc_frequency(list)"{{{$/;"	f
cancel	ruby/command-t/controller.rb	/^    def cancel$/;"	f	class:CommandT.Controller
centerView	plugin/NERD_tree.vim	/^function! s:centerView()$/;"	f
cflags	ruby/command-t/Makefile	/^cflags   =  $(optflags) $(debugflags) $(warnflags)$/;"	m
chCwd	plugin/NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	plugin/NERD_tree.vim	/^function! s:chRoot()$/;"	f
changeCoverage	autoload/fuf/coveragefile.vim	/^function s:changeCoverage(name)$/;"	f
change_content	autoload/zencoding.vim	/^function! s:change_content(region, content)$/;"	f
change_title	autoload/conque_term/conque.py	/^    def change_title(self, key, val):$/;"	m	class:Conque
changesurround	plugin/surround.vim	/^function! s:changesurround() " {{{1$/;"	f
char_width	autoload/conque_term/conque_sole_shared_memory.py	/^    char_width = 1$/;"	v	class:ConqueSoleSharedMemory
character_set	autoload/conque_term/conque.py	/^    character_set = 'ascii'$/;"	v	class:Conque
charset_graphics	autoload/conque_term/conque.py	/^    def charset_graphics(self):$/;"	m	class:Conque
charset_uk	autoload/conque_term/conque.py	/^    def charset_uk(self):$/;"	m	class:Conque
charset_us	autoload/conque_term/conque.py	/^    def charset_us(self):$/;"	m	class:Conque
checkDataFileCompatibility	autoload/fuf.vim	/^function s:checkDataFileCompatibility()$/;"	f
checkForActivate	plugin/NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	plugin/NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
checkKey	autoload/l9/async.vim	/^function s:checkKey(key)$/;"	f
check_buffer	autoload/neocomplcache/sources/include_complete.vim	/^function! s:check_buffer(bufname)"{{{$/;"	f
check_buffer_all	autoload/neocomplcache/sources/include_complete.vim	/^function! s:check_buffer_all()"{{{$/;"	f
check_changed_buffer	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:check_changed_buffer(bufnumber)"{{{$/;"	f
check_commands	autoload/conque_term/conque_sole_subprocess.py	/^    def check_commands(self):$/;"	m	class:ConqueSoleSubprocess
check_deleted_buffer	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:check_deleted_buffer()"{{{$/;"	f
check_source	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:check_source()"{{{$/;"	f
clear	autoload/conque_term/conque_screen.py	/^    def clear(self):$/;"	m	class:ConqueScreen
clear	autoload/conque_term/conque_sole_shared_memory.py	/^    def clear(self, start=0):$/;"	m	class:ConqueSoleSharedMemory
clear	ruby/command-t/controller.rb	/^    def clear$/;"	f	class:CommandT.Controller
clear	ruby/command-t/match_window.rb	/^    def clear$/;"	f	class:CommandT.MatchWindow
clear!	ruby/command-t/prompt.rb	/^    def clear!$/;"	f	class:CommandT.Prompt
clearBookmarks	plugin/NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
clear_outputs	autoload/l9/async.py	/^    def clear_outputs(self):$/;"	m	class:Worker
close	autoload/conque_term/conque.py	/^    def close(self):$/;"	m	class:Conque
close	autoload/conque_term/conque_sole.py	/^    def close(self):$/;"	m	class:ConqueSole
close	autoload/conque_term/conque_sole_shared_memory.py	/^    def close(self):$/;"	m	class:ConqueSoleSharedMemory
close	autoload/conque_term/conque_sole_subprocess.py	/^    def close(self):$/;"	m	class:ConqueSoleSubprocess
close	autoload/conque_term/conque_sole_wrapper.py	/^    def close(self):$/;"	m	class:ConqueSoleWrapper
close	autoload/conque_term/conque_subprocess.py	/^    def close(self):$/;"	m	class:ConqueSubprocess
close	ruby/command-t/match_window.rb	/^    def close$/;"	f	class:CommandT.MatchWindow
closeChildren	plugin/NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	plugin/NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	plugin/NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	plugin/NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	plugin/NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
close_pid	autoload/conque_term/conque_sole_subprocess.py	/^    def close_pid(self, pid):$/;"	m	class:ConqueSoleSubprocess
closematch	plugin/surround.vim	/^function! s:closematch(str) " {{{1$/;"	f
cmd	autoload/conque_term/conque_sole_communicator.py	/^                cmd = shm_command.read()$/;"	v
cmd	autoload/conque_term/conque_sole_communicator.py	/^        cmd = shm_command.read()$/;"	v
cmd_line	autoload/conque_term/conque_sole_communicator.py	/^        cmd_line = " ".join(sys.argv[6:])$/;"	v
code_page	autoload/conque_term/conque_sole_communicator.py	/^        code_page = int(sys.argv[4])$/;"	v
color	colors/desert256.vim	/^    fun <SID>color(r, g, b)$/;"	f
color	colors/jellybeans.vim	/^fun! s:color(r, g, b)$/;"	f
color_cache	autoload/conque_term/conque_sole.py	/^    color_cache = {}$/;"	v	class:ConqueSole
color_changes	autoload/conque_term/conque.py	/^    color_changes = {}$/;"	v	class:Conque
color_conceals	autoload/conque_term/conque_sole.py	/^    color_conceals = {}$/;"	v	class:ConqueSole
color_history	autoload/conque_term/conque.py	/^    color_history = {}$/;"	v	class:Conque
color_mode	autoload/conque_term/conque_sole.py	/^    color_mode = None$/;"	v	class:ConqueSole
color_pruning	autoload/conque_term/conque.py	/^    color_pruning = True$/;"	v	class:Conque
colors_name	colors/herald.vim	/^let colors_name = "herald"$/;"	v
colors_name	colors/jellybeans.vim	/^let colors_name = "jellybeans"$/;"	v
colors_name	colors/lucius.vim	/^let colors_name="lucius"$/;"	v
colors_name	colors/moria.vim	/^let colors_name = "moria"$/;"	v
colors_name	colors/neon.vim	/^let colors_name = "neon"$/;"	v
colors_name	colors/no_quarter.vim	/^let colors_name = "no_quarter"$/;"	v
colors_name	colors/rdark.vim	/^let colors_name = "rdark"$/;"	v
colors_name	colors/tango2.vim	/^let colors_name = "tango2"$/;"	v
colors_name	colors/wombat.vim	/^let colors_name = "wombat"$/;"	v
colors_name	colors/xoria256.vim	/^let colors_name = "xoria256"$/;"	v
columns	autoload/conque_term/conque.py	/^    columns = 80 # same as $COLUMNS$/;"	v	class:Conque
columns	autoload/conque_term/conque_sole_wrapper.py	/^    columns = 80$/;"	v	class:ConqueSoleWrapper
comma	plugin/gnuchlog.vim	/^                    let comma = stridx(name, ',')$/;"	v
commentEnablers	plugin/NERD_commenter.vim	/^augroup commentEnablers$/;"	a
comp_alpha	ruby/command-t/matcher.c	/^int comp_alpha(const void *a, const void *b)$/;"	f
comp_score	ruby/command-t/matcher.c	/^int comp_score(const void *a, const void *b)$/;"	f
compact	autoload/rails.vim	/^function! s:compact(ary)$/;"	f
compareBookmarks	plugin/NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	plugin/NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
compareTimeDescending	autoload/fuf/buffer.vim	/^function s:compareTimeDescending(i1, i2)$/;"	f
compare_length	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:compare_length(i1, i2)$/;"	f
compare_pos	autoload/neocomplcache.vim	/^function! s:compare_pos(i1, i2)$/;"	f
compare_words	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:compare_words(i1, i2)$/;"	f
completeBookmarks	plugin/NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
completion_filter	autoload/rails.vim	/^function! s:completion_filter(results,A)$/;"	f
conque_term#bell	autoload/conque_term.vim	/^function! conque_term#bell() " {{{$/;"	f
conque_term#call_hooks	autoload/conque_term.vim	/^function! conque_term#call_hooks(event, t_obj) " {{{$/;"	f
conque_term#close_all	autoload/conque_term.vim	/^function! conque_term#close_all() "{{{$/;"	f
conque_term#create_terminal_object	autoload/conque_term.vim	/^function! conque_term#create_terminal_object(...) " {{{$/;"	f
conque_term#dependency_check	autoload/conque_term.vim	/^function! conque_term#dependency_check() " {{{$/;"	f
conque_term#exec_file	autoload/conque_term.vim	/^function! conque_term#exec_file() "{{{$/;"	f
conque_term#fail	autoload/conque_term.vim	/^function! conque_term#fail(feature) " {{{$/;"	f
conque_term#find_python_exe	autoload/conque_term.vim	/^function! conque_term#find_python_exe() " {{{$/;"	f
conque_term#get_instance	autoload/conque_term.vim	/^function! conque_term#get_instance(...) " {{{$/;"	f
conque_term#init	autoload/conque_term.vim	/^function! conque_term#init() " {{{$/;"	f
conque_term#init_conceal_color	autoload/conque_term.vim	/^function! conque_term#init_conceal_color() " {{{$/;"	f
conque_term#key_press	autoload/conque_term.vim	/^function! conque_term#key_press() "{{{$/;"	f
conque_term#load_python	autoload/conque_term.vim	/^function! conque_term#load_python() " {{{$/;"	f
conque_term#on_blur	autoload/conque_term.vim	/^function! conque_term#on_blur() " {{{$/;"	f
conque_term#on_focus	autoload/conque_term.vim	/^function! conque_term#on_focus(...) " {{{$/;"	f
conque_term#open	autoload/conque_term.vim	/^function! conque_term#open(...) "{{{$/;"	f
conque_term#read_all	autoload/conque_term.vim	/^function! conque_term#read_all(insert_mode) "{{{$/;"	f
conque_term#register_function	autoload/conque_term.vim	/^function! conque_term#register_function(event, function_name) " {{{$/;"	f
conque_term#resume_session	autoload/conque_term.vim	/^function! conque_term#resume_session() " {{{$/;"	f
conque_term#send_file	autoload/conque_term.vim	/^function! conque_term#send_file() "{{{$/;"	f
conque_term#send_selected	autoload/conque_term.vim	/^function! conque_term#send_selected(type) "{{{$/;"	f
conque_term#set_buffer_settings	autoload/conque_term.vim	/^function! conque_term#set_buffer_settings(command, vim_startup_commands) "{{{$/;"	f
conque_term#set_mappings	autoload/conque_term.vim	/^function! conque_term#set_mappings(action) "{{{$/;"	f
conque_term#subprocess	autoload/conque_term.vim	/^function! conque_term#subprocess(command) " {{{$/;"	f
console_height	autoload/conque_term/conque_sole_communicator.py	/^        console_height = int(sys.argv[3])$/;"	v
console_width	autoload/conque_term/conque_sole_communicator.py	/^        console_width = int(sys.argv[2])$/;"	v
controller	autoload/rails.vim	/^function! s:controller(...)$/;"	f
controllerEdit	autoload/rails.vim	/^function! s:controllerEdit(cmd,...)$/;"	f
controllerList	autoload/rails.vim	/^function! s:controllerList(A,L,P)$/;"	f
copy_outputs	autoload/l9/async.py	/^    def copy_outputs(self):$/;"	m	class:Worker
create	autoload/conque_term/conque_sole_shared_memory.py	/^    def create(self, access='write'):$/;"	m	class:ConqueSoleSharedMemory
createChangeCoverageListener	autoload/fuf/coveragefile.vim	/^function s:createChangeCoverageListener()$/;"	f
createDataBufferListener	autoload/fuf.vim	/^function s:createDataBufferListener(dataFile)$/;"	f
createEditDataListener	autoload/fuf.vim	/^function s:createEditDataListener()$/;"	f
createTreeWin	plugin/NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
create_hash	autoload/neocomplcache/cache.vim	/^function! s:create_hash(dir, str)$/;"	f
cs	plugin/surround.vim	/^  nmap      cs   <Plug>Csurround$/;"	m
csi_add_spaces	autoload/conque_term/conque.py	/^    def csi_add_spaces(self, csi):$/;"	m	class:Conque
csi_clear_line	autoload/conque_term/conque.py	/^    def csi_clear_line(self, csi):$/;"	m	class:Conque
csi_clear_screen	autoload/conque_term/conque.py	/^    def csi_clear_screen(self, csi):$/;"	m	class:Conque
csi_cursor	autoload/conque_term/conque.py	/^    def csi_cursor(self, csi):$/;"	m	class:Conque
csi_cursor_down	autoload/conque_term/conque.py	/^    def csi_cursor_down(self, csi):$/;"	m	class:Conque
csi_cursor_left	autoload/conque_term/conque.py	/^    def csi_cursor_left(self, csi):$/;"	m	class:Conque
csi_cursor_right	autoload/conque_term/conque.py	/^    def csi_cursor_right(self, csi):$/;"	m	class:Conque
csi_cursor_to_column	autoload/conque_term/conque.py	/^    def csi_cursor_to_column(self, csi):$/;"	m	class:Conque
csi_cursor_up	autoload/conque_term/conque.py	/^    def csi_cursor_up(self, csi):$/;"	m	class:Conque
csi_delete_chars	autoload/conque_term/conque.py	/^    def csi_delete_chars(self, csi):$/;"	m	class:Conque
csi_font	autoload/conque_term/conque.py	/^    def csi_font(self, csi):$/;"	m	class:Conque
csi_reset	autoload/conque_term/conque.py	/^    def csi_reset(self, csi):$/;"	m	class:Conque
csi_set	autoload/conque_term/conque.py	/^    def csi_set(self, csi):$/;"	m	class:Conque
csi_set_coords	autoload/conque_term/conque.py	/^    def csi_set_coords(self, csi):$/;"	m	class:Conque
csi_tab_clear	autoload/conque_term/conque.py	/^    def csi_tab_clear(self, csi):$/;"	m	class:Conque
ctl_bel	autoload/conque_term/conque.py	/^    def ctl_bel(self):$/;"	m	class:Conque
ctl_bs	autoload/conque_term/conque.py	/^    def ctl_bs(self):$/;"	m	class:Conque
ctl_cr	autoload/conque_term/conque.py	/^    def ctl_cr(self):$/;"	m	class:Conque
ctl_nl	autoload/conque_term/conque.py	/^    def ctl_nl(self):$/;"	m	class:Conque
ctl_si	autoload/conque_term/conque.py	/^    def ctl_si(self):$/;"	m	class:Conque
ctl_so	autoload/conque_term/conque.py	/^    def ctl_so(self):$/;"	m	class:Conque
ctl_soh	autoload/conque_term/conque.py	/^    def ctl_soh(self):$/;"	m	class:Conque
ctl_stx	autoload/conque_term/conque.py	/^    def ctl_stx(self):$/;"	m	class:Conque
ctl_tab	autoload/conque_term/conque.py	/^    def ctl_tab(self):$/;"	m	class:Conque
ctypes	autoload/conque_term/conque_sole_subprocess.py	/^import ctypes$/;"	i
ctypes	autoload/conque_term/conque_sole_wrapper.py	/^import ctypes$/;"	i
cursor_col	autoload/conque_term/conque_sole_subprocess.py	/^    cursor_col = 0$/;"	v	class:ConqueSoleSubprocess
cursor_end	ruby/command-t/controller.rb	/^    def cursor_end$/;"	f	class:CommandT.Controller
cursor_end	ruby/command-t/prompt.rb	/^    def cursor_end$/;"	f	class:CommandT.Prompt
cursor_in_region	autoload/zencoding.vim	/^function! s:cursor_in_region(region)$/;"	f
cursor_left	ruby/command-t/controller.rb	/^    def cursor_left$/;"	f	class:CommandT.Controller
cursor_left	ruby/command-t/prompt.rb	/^    def cursor_left$/;"	f	class:CommandT.Prompt
cursor_line	autoload/conque_term/conque_sole_subprocess.py	/^    cursor_line = 0$/;"	v	class:ConqueSoleSubprocess
cursor_right	ruby/command-t/controller.rb	/^    def cursor_right$/;"	f	class:CommandT.Controller
cursor_right	ruby/command-t/prompt.rb	/^    def cursor_right$/;"	f	class:CommandT.Prompt
cursor_set	autoload/conque_term/conque.py	/^    cursor_set = False$/;"	v	class:Conque
cursor_start	ruby/command-t/controller.rb	/^    def cursor_start$/;"	f	class:CommandT.Controller
cursor_start	ruby/command-t/prompt.rb	/^    def cursor_start$/;"	f	class:CommandT.Prompt
data	autoload/conque_term/conque_sole_subprocess.py	/^    data = []$/;"	v	class:ConqueSoleSubprocess
datadir	ruby/command-t/Makefile	/^datadir = $(datarootdir)$/;"	m
datarootdir	ruby/command-t/Makefile	/^datarootdir = $(prefix)\/share$/;"	m
dd	ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> dd dd:JSLintUpdate<CR>$/;"	m
deactivateFufBuffer	autoload/fuf.vim	/^function s:deactivateFufBuffer()$/;"	f
debug	autoload/rails.vim	/^function! s:debug(str)$/;"	f
debugflags	ruby/command-t/Makefile	/^debugflags = -ggdb$/;"	m
default_attribute	autoload/conque_term/conque_sole_subprocess.py	/^    default_attribute = 7$/;"	v	class:ConqueSoleSubprocess
default_open_command	ruby/command-t/controller.rb	/^    def default_open_command$/;"	f	class:CommandT.Controller
defineOption	plugin/acp.vim	/^function s:defineOption(name, default)$/;"	f
delete	ruby/command-t/controller.rb	/^    def delete$/;"	f	class:CommandT.Controller
delete!	ruby/command-t/prompt.rb	/^    def delete!$/;"	f	class:CommandT.Prompt
deleteBookmark	plugin/NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
delete_content	autoload/zencoding.vim	/^function! s:delete_content(region)$/;"	f
did_gitannotate_syntax_inits	syntax/gitannotate.vim	/^	let did_gitannotate_syntax_inits = 1$/;"	v
did_javascript_syn_inits	syntax/javascript.vim	/^    let did_javascript_syn_inits = 1$/;"	v
did_php_syn_inits	plugin/php.vim	/^    let did_php_syn_inits = 1$/;"	v
did_svnannotate_syntax_inits	syntax/svnannotate.vim	/^	let did_svnannotate_syntax_inits = 1$/;"	v
disable_caching	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:disable_caching(name)"{{{$/;"	f
displayHelp	plugin/NERD_tree.vim	/^function! s:displayHelp()$/;"	f
display_neco	autoload/neocomplcache.vim	/^function! s:display_neco(number)"{{{$/;"	f
dispose	ruby/command-t/prompt.rb	/^    def dispose$/;"	f	class:CommandT.Prompt
djump	autoload/rails.vim	/^function! s:djump(def)$/;"	f
dldflags	ruby/command-t/Makefile	/^dldflags = $/;"	m
do_color	autoload/conque_term/conque_sole.py	/^    def do_color(self, start=0, end=0, attributes='', stats=None):$/;"	m	class:ConqueSole
doc_dict.search	autoload/neocomplcache/sources/include_complete.vim	/^function! s:doc_dict.search(cur_text)"{{{$/;"	f
doc_dict.search	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:doc_dict.search(cur_text)"{{{$/;"	f
doc_dict.search	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:doc_dict.search(cur_text)"{{{$/;"	f
docdir	ruby/command-t/Makefile	/^docdir = $(datarootdir)\/doc\/$(PACKAGE)$/;"	m
dosurround	plugin/surround.vim	/^function! s:dosurround(...) " {{{1$/;"	f
dot_file	ruby/command-t/match.c	/^    int     dot_file;               \/\/ boolean: true if str is a dot-file$/;"	m	struct:__anon1	file:
ds	plugin/surround.vim	/^  nmap      ds   <Plug>Dsurround$/;"	m
dumpHelp	plugin/NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
dvidir	ruby/command-t/Makefile	/^dvidir = $(docdir)$/;"	m
dw	ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> dw dw:JSLintUpdate<CR>$/;"	m
echo	nerdtree_plugin/fs_menu.vim	/^function! s:echo(msg)$/;"	f
echo	plugin/NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	plugin/NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	nerdtree_plugin/fs_menu.vim	/^function! s:echoWarning(msg)$/;"	f
echoWarning	plugin/NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
edit	autoload/rails.vim	/^function! s:edit(cmd,file,...)$/;"	f
edit_snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:edit_snippets(filetype, isruntime)"{{{$/;"	f
editcmdfor	autoload/rails.vim	/^function! s:editcmdfor(cmd)$/;"	f
enable_caching	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:enable_caching(name)"{{{$/;"	f
enable_colors	autoload/conque_term/conque.py	/^    enable_colors = True$/;"	v	class:Conque
encoding	autoload/conque_term/conque_sole.py	/^    encoding = None$/;"	v	class:ConqueSole
encoding	autoload/conque_term/conque_sole_shared_memory.py	/^    encoding = 'utf-8'$/;"	v	class:ConqueSoleSharedMemory
endof	autoload/rails.vim	/^function! s:endof(lnum)$/;"	f
ensure_appropriate_window_selection	ruby/command-t/controller.rb	/^    def ensure_appropriate_window_selection$/;"	f	class:CommandT.Controller
enumHelpTags	autoload/fuf/help.vim	/^function s:enumHelpTags(tagFiles)$/;"	f
enumItems	autoload/fuf/callbackfile.vim	/^function s:enumItems(dir)$/;"	f
enumItems	autoload/fuf/coveragefile.vim	/^function s:enumItems()$/;"	f
enumItems	autoload/fuf/dir.vim	/^function s:enumItems(dir)$/;"	f
enumItems	autoload/fuf/file.vim	/^function s:enumItems(dir)$/;"	f
enumNonCurrentItems	autoload/fuf/file.vim	/^function s:enumNonCurrentItems(dir, bufNrPrev, cache)$/;"	f
enumTaggedFiles	autoload/fuf/taggedfile.vim	/^function s:enumTaggedFiles(tagFiles)$/;"	f
enumTags	autoload/fuf/tag.vim	/^function s:enumTags(tagFiles)$/;"	f
environment	autoload/rails.vim	/^function! s:environment()$/;"	f
environmentEdit	autoload/rails.vim	/^function! s:environmentEdit(cmd,...)$/;"	f
environmentList	autoload/rails.vim	/^function! s:environmentList(A,L,P)$/;"	f
error	autoload/rails.vim	/^function! s:error(str)$/;"	f
error	plugin/rails.vim	/^function! s:error(str)$/;"	f
esc_next_line	autoload/conque_term/conque.py	/^    def esc_next_line(self):$/;"	m	class:Conque
esc_scroll_down	autoload/conque_term/conque.py	/^    def esc_scroll_down(self):$/;"	m	class:Conque
esc_scroll_up	autoload/conque_term/conque.py	/^    def esc_scroll_up(self):$/;"	m	class:Conque
esc_set_tab	autoload/conque_term/conque.py	/^    def esc_set_tab(self):$/;"	m	class:Conque
escape_for_single_quotes	ruby/command-t/vim.rb	/^    def self.escape_for_single_quotes str$/;"	F	class:CommandT.VIM
escarg	autoload/rails.vim	/^function! s:escarg(p)$/;"	f
esccmd	autoload/rails.vim	/^function! s:esccmd(p)$/;"	f
escvar	plugin/rails.vim	/^function! s:escvar(r)$/;"	f
eval_snippet	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:eval_snippet(snippet_text)"{{{$/;"	f
evaluateLearningRank	autoload/fuf.vim	/^function s:evaluateLearningRank(word, stats)$/;"	f
exec	plugin/NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
exec_highlight	autoload/conque_term/conque.py	/^    def exec_highlight(self, buffer_line, start, end, highlight):$/;"	m	class:Conque
exec_prefix	ruby/command-t/Makefile	/^exec_prefix = $(prefix)$/;"	m
execute	autoload/l9/async.py	/^    def execute(self, var_key, var_command, var_cwd, var_input, var_appends):$/;"	m	class:Asyncer
execute	autoload/l9/async.py	/^    def execute(self, worker):$/;"	m	class:Executor
exists?	ruby/command-t/controller.rb	/^    def exists? name$/;"	f	class:CommandT.Controller
exists_current_source	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:exists_current_source()"{{{$/;"	f
expandAbbrevMap	autoload/fuf.vim	/^function s:expandAbbrevMap(pattern, abbrevMap)$/;"	f
expandSearchDir	autoload/fuf/mrufile.vim	/^function s:expandSearchDir(dir, level)$/;"	f
expand_newline	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:expand_newline()"{{{$/;"	f
expand_tabline	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:expand_tabline()"{{{$/;"	f
extout	ruby/command-t/Makefile	/^extout = $/;"	m
extout_prefix	ruby/command-t/Makefile	/^extout_prefix = $/;"	m
extractafter	plugin/surround.vim	/^function! s:extractafter(str)$/;"	f
extractbefore	plugin/surround.vim	/^function! s:extractbefore(str)$/;"	f
extractdbvar	autoload/rails.vim	/^function! s:extractdbvar(str,arg)$/;"	f
fast_mode	autoload/conque_term/conque_sole_communicator.py	/^        fast_mode = int(sys.argv[5])$/;"	v
fast_mode	autoload/conque_term/conque_sole_subprocess.py	/^    fast_mode = 0$/;"	v	class:ConqueSoleSubprocess
fcntl	autoload/conque_term/conque_subprocess.py	/^import fcntl$/;"	i
fd	autoload/conque_term/conque_subprocess.py	/^    fd = None$/;"	v	class:ConqueSubprocess
feedPopup	autoload/acp.vim	/^function s:feedPopup()$/;"	f
file_contents	autoload/conque_term.vim	/^            let file_contents = ['let g:ConqueTerm_MsgCt = ' . msg_ct, 'let g:ConqueTerm_MsgVer = ' . g:ConqueTerm_Version]$/;"	v
file_getline	autoload/rails.vim	/^function! s:file_getline(lnum,...) dict abort$/;"	f
file_lines	autoload/rails.vim	/^function! s:file_lines() dict abort$/;"	f
file_name	autoload/rails.vim	/^function! s:file_name() dict abort$/;"	f
file_path	autoload/rails.vim	/^function! s:file_path() dict abort$/;"	f
fileinput	plugin/autotag.vim	/^import fileinput$/;"	m
find	ruby/command-t/match_window.rb	/^    def find char$/;"	f	class:CommandT.MatchWindow
findAndRevealPath	plugin/NERD_tree.vim	/^function! s:findAndRevealPath()$/;"	f
findItem	autoload/fuf/bookmarkdir.vim	/^function s:findItem(items, word)$/;"	f
findItem	autoload/fuf/bookmarkfile.vim	/^function s:findItem(items, word)$/;"	f
findItem	autoload/fuf/buffer.vim	/^function s:findItem(items, word)$/;"	f
findamethod	autoload/rails.vim	/^function! s:findamethod(func,repl)$/;"	f
findasymbol	autoload/rails.vim	/^function! s:findasymbol(sym,repl)$/;"	f
findcmdfor	autoload/rails.vim	/^function! s:findcmdfor(cmd)$/;"	f
findedit	autoload/rails.vim	/^function! s:findedit(cmd,files,...) abort$/;"	f
findfromview	autoload/rails.vim	/^function! s:findfromview(func,repl)$/;"	f
findit	autoload/rails.vim	/^function! s:findit(pat,repl)$/;"	f
findlayout	autoload/rails.vim	/^function! s:findlayout(name)$/;"	f
findview	autoload/rails.vim	/^function! s:findview(name)$/;"	f
finishPopup	autoload/acp.vim	/^function s:finishPopup(fGroup1)$/;"	f
firstUsableWindow	plugin/NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fixed_length	autoload/conque_term/conque_sole_shared_memory.py	/^    fixed_length = False$/;"	v	class:ConqueSoleSharedMemory
fixindent	plugin/surround.vim	/^function! s:fixindent(str,spc)$/;"	f
fixturesEdit	autoload/rails.vim	/^function! s:fixturesEdit(cmd,...)$/;"	f
fixturesList	autoload/rails.vim	/^function! s:fixturesList(A,L,P)$/;"	f
flush	ruby/command-t/controller.rb	/^    def flush$/;"	f	class:CommandT.Controller
flush	ruby/command-t/finder.rb	/^    def flush$/;"	f	class:CommandT.Finder
flush	ruby/command-t/scanner/file_scanner.rb	/^    def flush$/;"	f	class:CommandT.FileScanner
flush	ruby/command-t/stub.rb	/^    def flush$/;"	f	class:CommandT.Stub
focus	ruby/command-t/match_window.rb	/^    def focus$/;"	f	class:CommandT.MatchWindow
focus	ruby/command-t/prompt.rb	/^    def focus$/;"	f	class:CommandT.Prompt
format	autoload/rails.vim	/^function! s:format(...)$/;"	f
formatItemUsingCache	autoload/fuf/mrufile.vim	/^function s:formatItemUsingCache(item)$/;"	f
fuf#addMode	autoload/fuf.vim	/^function fuf#addMode(modeName)$/;"	f
fuf#bookmarkdir#createHandler	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#createHandler(base)$/;"	f
fuf#bookmarkdir#getEditableDataNames	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#getEditableDataNames()$/;"	f
fuf#bookmarkdir#getSwitchOrder	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#getSwitchOrder()$/;"	f
fuf#bookmarkdir#onInit	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#onInit()$/;"	f
fuf#bookmarkdir#renewCache	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#renewCache()$/;"	f
fuf#bookmarkdir#requiresOnCommandPre	autoload/fuf/bookmarkdir.vim	/^function fuf#bookmarkdir#requiresOnCommandPre()$/;"	f
fuf#bookmarkfile#createHandler	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#createHandler(base)$/;"	f
fuf#bookmarkfile#getEditableDataNames	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#getEditableDataNames()$/;"	f
fuf#bookmarkfile#getSwitchOrder	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#getSwitchOrder()$/;"	f
fuf#bookmarkfile#onInit	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#onInit()$/;"	f
fuf#bookmarkfile#renewCache	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#renewCache()$/;"	f
fuf#bookmarkfile#requiresOnCommandPre	autoload/fuf/bookmarkfile.vim	/^function fuf#bookmarkfile#requiresOnCommandPre()$/;"	f
fuf#buffer#createHandler	autoload/fuf/buffer.vim	/^function fuf#buffer#createHandler(base)$/;"	f
fuf#buffer#getEditableDataNames	autoload/fuf/buffer.vim	/^function fuf#buffer#getEditableDataNames()$/;"	f
fuf#buffer#getSwitchOrder	autoload/fuf/buffer.vim	/^function fuf#buffer#getSwitchOrder()$/;"	f
fuf#buffer#onInit	autoload/fuf/buffer.vim	/^function fuf#buffer#onInit()$/;"	f
fuf#buffer#renewCache	autoload/fuf/buffer.vim	/^function fuf#buffer#renewCache()$/;"	f
fuf#buffer#requiresOnCommandPre	autoload/fuf/buffer.vim	/^function fuf#buffer#requiresOnCommandPre()$/;"	f
fuf#buffertag#createHandler	autoload/fuf/buffertag.vim	/^function fuf#buffertag#createHandler(base)$/;"	f
fuf#buffertag#getEditableDataNames	autoload/fuf/buffertag.vim	/^function fuf#buffertag#getEditableDataNames()$/;"	f
fuf#buffertag#getSwitchOrder	autoload/fuf/buffertag.vim	/^function fuf#buffertag#getSwitchOrder()$/;"	f
fuf#buffertag#onInit	autoload/fuf/buffertag.vim	/^function fuf#buffertag#onInit()$/;"	f
fuf#buffertag#renewCache	autoload/fuf/buffertag.vim	/^function fuf#buffertag#renewCache()$/;"	f
fuf#buffertag#requiresOnCommandPre	autoload/fuf/buffertag.vim	/^function fuf#buffertag#requiresOnCommandPre()$/;"	f
fuf#callbackfile#createHandler	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#createHandler(base)$/;"	f
fuf#callbackfile#getEditableDataNames	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#getEditableDataNames()$/;"	f
fuf#callbackfile#getSwitchOrder	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#getSwitchOrder()$/;"	f
fuf#callbackfile#launch	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#launch(initialPattern, partialMatching, prompt, exclude, listener)$/;"	f
fuf#callbackfile#onInit	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#onInit()$/;"	f
fuf#callbackfile#renewCache	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#renewCache()$/;"	f
fuf#callbackfile#requiresOnCommandPre	autoload/fuf/callbackfile.vim	/^function fuf#callbackfile#requiresOnCommandPre()$/;"	f
fuf#callbackitem#createHandler	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#createHandler(base)$/;"	f
fuf#callbackitem#getEditableDataNames	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#getEditableDataNames()$/;"	f
fuf#callbackitem#getSwitchOrder	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#getSwitchOrder()$/;"	f
fuf#callbackitem#launch	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#launch(initialPattern, partialMatching, prompt, listener, items, forPath)$/;"	f
fuf#callbackitem#onInit	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#onInit()$/;"	f
fuf#callbackitem#renewCache	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#renewCache()$/;"	f
fuf#callbackitem#requiresOnCommandPre	autoload/fuf/callbackitem.vim	/^function fuf#callbackitem#requiresOnCommandPre()$/;"	f
fuf#changelist#createHandler	autoload/fuf/changelist.vim	/^function fuf#changelist#createHandler(base)$/;"	f
fuf#changelist#getEditableDataNames	autoload/fuf/changelist.vim	/^function fuf#changelist#getEditableDataNames()$/;"	f
fuf#changelist#getSwitchOrder	autoload/fuf/changelist.vim	/^function fuf#changelist#getSwitchOrder()$/;"	f
fuf#changelist#onInit	autoload/fuf/changelist.vim	/^function fuf#changelist#onInit()$/;"	f
fuf#changelist#renewCache	autoload/fuf/changelist.vim	/^function fuf#changelist#renewCache()$/;"	f
fuf#changelist#requiresOnCommandPre	autoload/fuf/changelist.vim	/^function fuf#changelist#requiresOnCommandPre()$/;"	f
fuf#compareRanks	autoload/fuf.vim	/^function fuf#compareRanks(i1, i2)$/;"	f
fuf#countModifiedFiles	autoload/fuf.vim	/^function fuf#countModifiedFiles(files, time)$/;"	f
fuf#coveragefile#createHandler	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#createHandler(base)$/;"	f
fuf#coveragefile#getEditableDataNames	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#getEditableDataNames()$/;"	f
fuf#coveragefile#getSwitchOrder	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#getSwitchOrder()$/;"	f
fuf#coveragefile#onInit	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#onInit()$/;"	f
fuf#coveragefile#renewCache	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#renewCache()$/;"	f
fuf#coveragefile#requiresOnCommandPre	autoload/fuf/coveragefile.vim	/^function fuf#coveragefile#requiresOnCommandPre()$/;"	f
fuf#defineKeyMappingInHandler	autoload/fuf.vim	/^function fuf#defineKeyMappingInHandler(key, func)$/;"	f
fuf#defineLaunchCommand	autoload/fuf.vim	/^function fuf#defineLaunchCommand(CmdName, modeName, prefixInitialPattern, tempVars)$/;"	f
fuf#dir#createHandler	autoload/fuf/dir.vim	/^function fuf#dir#createHandler(base)$/;"	f
fuf#dir#getEditableDataNames	autoload/fuf/dir.vim	/^function fuf#dir#getEditableDataNames()$/;"	f
fuf#dir#getSwitchOrder	autoload/fuf/dir.vim	/^function fuf#dir#getSwitchOrder()$/;"	f
fuf#dir#onInit	autoload/fuf/dir.vim	/^function fuf#dir#onInit()$/;"	f
fuf#dir#renewCache	autoload/fuf/dir.vim	/^function fuf#dir#renewCache()$/;"	f
fuf#dir#requiresOnCommandPre	autoload/fuf/dir.vim	/^function fuf#dir#requiresOnCommandPre()$/;"	f
fuf#echoError	autoload/fuf.vim	/^function fuf#echoError(msg)$/;"	f
fuf#echoWarning	autoload/fuf.vim	/^function fuf#echoWarning(msg)$/;"	f
fuf#editDataFile	autoload/fuf.vim	/^function fuf#editDataFile()$/;"	f
fuf#enumExpandedDirsEntries	autoload/fuf.vim	/^function fuf#enumExpandedDirsEntries(dir, exclude)$/;"	f
fuf#expandTailDotSequenceToParentDir	autoload/fuf.vim	/^function fuf#expandTailDotSequenceToParentDir(pattern)$/;"	f
fuf#file#createHandler	autoload/fuf/file.vim	/^function fuf#file#createHandler(base)$/;"	f
fuf#file#getEditableDataNames	autoload/fuf/file.vim	/^function fuf#file#getEditableDataNames()$/;"	f
fuf#file#getSwitchOrder	autoload/fuf/file.vim	/^function fuf#file#getSwitchOrder()$/;"	f
fuf#file#onInit	autoload/fuf/file.vim	/^function fuf#file#onInit()$/;"	f
fuf#file#renewCache	autoload/fuf/file.vim	/^function fuf#file#renewCache()$/;"	f
fuf#file#requiresOnCommandPre	autoload/fuf/file.vim	/^function fuf#file#requiresOnCommandPre()$/;"	f
fuf#formatPrompt	autoload/fuf.vim	/^function fuf#formatPrompt(prompt, partialMatching, otherString)$/;"	f
fuf#getCurrentTagFiles	autoload/fuf.vim	/^function fuf#getCurrentTagFiles()$/;"	f
fuf#getDataFileTime	autoload/fuf.vim	/^function fuf#getDataFileTime(modeName, dataName)$/;"	f
fuf#getFileLines	autoload/fuf.vim	/^function fuf#getFileLines(file)$/;"	f
fuf#getModeNames	autoload/fuf.vim	/^function fuf#getModeNames()$/;"	f
fuf#getRunningHandler	autoload/fuf.vim	/^function fuf#getRunningHandler()$/;"	f
fuf#givencmd#createHandler	autoload/fuf/givencmd.vim	/^function fuf#givencmd#createHandler(base)$/;"	f
fuf#givencmd#getEditableDataNames	autoload/fuf/givencmd.vim	/^function fuf#givencmd#getEditableDataNames()$/;"	f
fuf#givencmd#getSwitchOrder	autoload/fuf/givencmd.vim	/^function fuf#givencmd#getSwitchOrder()$/;"	f
fuf#givencmd#launch	autoload/fuf/givencmd.vim	/^function fuf#givencmd#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givencmd#onInit	autoload/fuf/givencmd.vim	/^function fuf#givencmd#onInit()$/;"	f
fuf#givencmd#renewCache	autoload/fuf/givencmd.vim	/^function fuf#givencmd#renewCache()$/;"	f
fuf#givencmd#requiresOnCommandPre	autoload/fuf/givencmd.vim	/^function fuf#givencmd#requiresOnCommandPre()$/;"	f
fuf#givendir#createHandler	autoload/fuf/givendir.vim	/^function fuf#givendir#createHandler(base)$/;"	f
fuf#givendir#getEditableDataNames	autoload/fuf/givendir.vim	/^function fuf#givendir#getEditableDataNames()$/;"	f
fuf#givendir#getSwitchOrder	autoload/fuf/givendir.vim	/^function fuf#givendir#getSwitchOrder()$/;"	f
fuf#givendir#launch	autoload/fuf/givendir.vim	/^function fuf#givendir#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givendir#onInit	autoload/fuf/givendir.vim	/^function fuf#givendir#onInit()$/;"	f
fuf#givendir#renewCache	autoload/fuf/givendir.vim	/^function fuf#givendir#renewCache()$/;"	f
fuf#givendir#requiresOnCommandPre	autoload/fuf/givendir.vim	/^function fuf#givendir#requiresOnCommandPre()$/;"	f
fuf#givenfile#createHandler	autoload/fuf/givenfile.vim	/^function fuf#givenfile#createHandler(base)$/;"	f
fuf#givenfile#getEditableDataNames	autoload/fuf/givenfile.vim	/^function fuf#givenfile#getEditableDataNames()$/;"	f
fuf#givenfile#getSwitchOrder	autoload/fuf/givenfile.vim	/^function fuf#givenfile#getSwitchOrder()$/;"	f
fuf#givenfile#launch	autoload/fuf/givenfile.vim	/^function fuf#givenfile#launch(initialPattern, partialMatching, prompt, items)$/;"	f
fuf#givenfile#onInit	autoload/fuf/givenfile.vim	/^function fuf#givenfile#onInit()$/;"	f
fuf#givenfile#renewCache	autoload/fuf/givenfile.vim	/^function fuf#givenfile#renewCache()$/;"	f
fuf#givenfile#requiresOnCommandPre	autoload/fuf/givenfile.vim	/^function fuf#givenfile#requiresOnCommandPre()$/;"	f
fuf#glob	autoload/fuf.vim	/^function fuf#glob(expr)$/;"	f
fuf#help#createHandler	autoload/fuf/help.vim	/^function fuf#help#createHandler(base)$/;"	f
fuf#help#getEditableDataNames	autoload/fuf/help.vim	/^function fuf#help#getEditableDataNames()$/;"	f
fuf#help#getSwitchOrder	autoload/fuf/help.vim	/^function fuf#help#getSwitchOrder()$/;"	f
fuf#help#onInit	autoload/fuf/help.vim	/^function fuf#help#onInit()$/;"	f
fuf#help#renewCache	autoload/fuf/help.vim	/^function fuf#help#renewCache()$/;"	f
fuf#help#requiresOnCommandPre	autoload/fuf/help.vim	/^function fuf#help#requiresOnCommandPre()$/;"	f
fuf#jumplist#createHandler	autoload/fuf/jumplist.vim	/^function fuf#jumplist#createHandler(base)$/;"	f
fuf#jumplist#getEditableDataNames	autoload/fuf/jumplist.vim	/^function fuf#jumplist#getEditableDataNames()$/;"	f
fuf#jumplist#getSwitchOrder	autoload/fuf/jumplist.vim	/^function fuf#jumplist#getSwitchOrder()$/;"	f
fuf#jumplist#onInit	autoload/fuf/jumplist.vim	/^function fuf#jumplist#onInit()$/;"	f
fuf#jumplist#renewCache	autoload/fuf/jumplist.vim	/^function fuf#jumplist#renewCache()$/;"	f
fuf#jumplist#requiresOnCommandPre	autoload/fuf/jumplist.vim	/^function fuf#jumplist#requiresOnCommandPre()$/;"	f
fuf#launch	autoload/fuf.vim	/^function fuf#launch(modeName, initialPattern, partialMatching)$/;"	f
fuf#line#createHandler	autoload/fuf/line.vim	/^function fuf#line#createHandler(base)$/;"	f
fuf#line#getEditableDataNames	autoload/fuf/line.vim	/^function fuf#line#getEditableDataNames()$/;"	f
fuf#line#getSwitchOrder	autoload/fuf/line.vim	/^function fuf#line#getSwitchOrder()$/;"	f
fuf#line#onInit	autoload/fuf/line.vim	/^function fuf#line#onInit()$/;"	f
fuf#line#renewCache	autoload/fuf/line.vim	/^function fuf#line#renewCache()$/;"	f
fuf#line#requiresOnCommandPre	autoload/fuf/line.vim	/^function fuf#line#requiresOnCommandPre()$/;"	f
fuf#loadDataFile	autoload/fuf.vim	/^function fuf#loadDataFile(modeName, dataName)$/;"	f
fuf#makeNonPathItem	autoload/fuf.vim	/^function fuf#makeNonPathItem(word, menu)$/;"	f
fuf#makePathItem	autoload/fuf.vim	/^function fuf#makePathItem(fname, menu, appendsDirSuffix)$/;"	f
fuf#makePatternSet	autoload/fuf.vim	/^function fuf#makePatternSet(patternBase, interpreter, partialMatching)$/;"	f
fuf#makePreviewLinesAround	autoload/fuf.vim	/^function fuf#makePreviewLinesAround(lines, indices, page, maxHeight)$/;"	f
fuf#makePreviewLinesForFile	autoload/fuf.vim	/^function fuf#makePreviewLinesForFile(file, count, maxHeight)$/;"	f
fuf#mapToSetAbbrWithSnippedWordAsPath	autoload/fuf.vim	/^function fuf#mapToSetAbbrWithSnippedWordAsPath(items)$/;"	f
fuf#mapToSetSerialIndex	autoload/fuf.vim	/^function fuf#mapToSetSerialIndex(in, offset)$/;"	f
fuf#mrucmd#createHandler	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#createHandler(base)$/;"	f
fuf#mrucmd#getEditableDataNames	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#getEditableDataNames()$/;"	f
fuf#mrucmd#getSwitchOrder	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#getSwitchOrder()$/;"	f
fuf#mrucmd#onCommandPre	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#onCommandPre(cmd)$/;"	f
fuf#mrucmd#onInit	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#onInit()$/;"	f
fuf#mrucmd#renewCache	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#renewCache()$/;"	f
fuf#mrucmd#requiresOnCommandPre	autoload/fuf/mrucmd.vim	/^function fuf#mrucmd#requiresOnCommandPre()$/;"	f
fuf#mrufile#createHandler	autoload/fuf/mrufile.vim	/^function fuf#mrufile#createHandler(base)$/;"	f
fuf#mrufile#getEditableDataNames	autoload/fuf/mrufile.vim	/^function fuf#mrufile#getEditableDataNames()$/;"	f
fuf#mrufile#getSwitchOrder	autoload/fuf/mrufile.vim	/^function fuf#mrufile#getSwitchOrder()$/;"	f
fuf#mrufile#onInit	autoload/fuf/mrufile.vim	/^function fuf#mrufile#onInit()$/;"	f
fuf#mrufile#renewCache	autoload/fuf/mrufile.vim	/^function fuf#mrufile#renewCache()$/;"	f
fuf#mrufile#requiresOnCommandPre	autoload/fuf/mrufile.vim	/^function fuf#mrufile#requiresOnCommandPre()$/;"	f
fuf#onComplete	autoload/fuf.vim	/^function fuf#onComplete(findstart, base)$/;"	f
fuf#openBuffer	autoload/fuf.vim	/^function fuf#openBuffer(bufNr, mode, reuse)$/;"	f
fuf#openFile	autoload/fuf.vim	/^function fuf#openFile(path, mode, reuse)$/;"	f
fuf#openHelp	autoload/fuf.vim	/^function fuf#openHelp(tag, mode)$/;"	f
fuf#openTag	autoload/fuf.vim	/^function fuf#openTag(tag, mode)$/;"	f
fuf#prejump	autoload/fuf.vim	/^function fuf#prejump(mode)$/;"	f
fuf#quickfix#createHandler	autoload/fuf/quickfix.vim	/^function fuf#quickfix#createHandler(base)$/;"	f
fuf#quickfix#getEditableDataNames	autoload/fuf/quickfix.vim	/^function fuf#quickfix#getEditableDataNames()$/;"	f
fuf#quickfix#getSwitchOrder	autoload/fuf/quickfix.vim	/^function fuf#quickfix#getSwitchOrder()$/;"	f
fuf#quickfix#onInit	autoload/fuf/quickfix.vim	/^function fuf#quickfix#onInit()$/;"	f
fuf#quickfix#renewCache	autoload/fuf/quickfix.vim	/^function fuf#quickfix#renewCache()$/;"	f
fuf#quickfix#requiresOnCommandPre	autoload/fuf/quickfix.vim	/^function fuf#quickfix#requiresOnCommandPre()$/;"	f
fuf#saveDataFile	autoload/fuf.vim	/^function fuf#saveDataFile(modeName, dataName, items)$/;"	f
fuf#setAbbrWithFormattedWord	autoload/fuf.vim	/^function fuf#setAbbrWithFormattedWord(item, abbrIndex)$/;"	f
fuf#setOneTimeVariables	autoload/fuf.vim	/^function fuf#setOneTimeVariables(...)$/;"	f
fuf#splitPath	autoload/fuf.vim	/^function fuf#splitPath(path)$/;"	f
fuf#suffixNumber	autoload/fuf.vim	/^function fuf#suffixNumber(str)$/;"	f
fuf#tag#createHandler	autoload/fuf/tag.vim	/^function fuf#tag#createHandler(base)$/;"	f
fuf#tag#getEditableDataNames	autoload/fuf/tag.vim	/^function fuf#tag#getEditableDataNames()$/;"	f
fuf#tag#getSwitchOrder	autoload/fuf/tag.vim	/^function fuf#tag#getSwitchOrder()$/;"	f
fuf#tag#onInit	autoload/fuf/tag.vim	/^function fuf#tag#onInit()$/;"	f
fuf#tag#renewCache	autoload/fuf/tag.vim	/^function fuf#tag#renewCache()$/;"	f
fuf#tag#requiresOnCommandPre	autoload/fuf/tag.vim	/^function fuf#tag#requiresOnCommandPre()$/;"	f
fuf#taggedfile#createHandler	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#createHandler(base)$/;"	f
fuf#taggedfile#getEditableDataNames	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#getEditableDataNames()$/;"	f
fuf#taggedfile#getSwitchOrder	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#getSwitchOrder()$/;"	f
fuf#taggedfile#onInit	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#onInit()$/;"	f
fuf#taggedfile#renewCache	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#renewCache()$/;"	f
fuf#taggedfile#requiresOnCommandPre	autoload/fuf/taggedfile.vim	/^function fuf#taggedfile#requiresOnCommandPre()$/;"	f
fuf#updateMruList	autoload/fuf.vim	/^function fuf#updateMruList(mrulist, newItem, maxItem, exclude)$/;"	f
function	autoload/rails.vim	/^function! s:function(name)$/;"	f
function	plugin/rails.vim	/^function! s:function(name)$/;"	f
functionaltestEdit	autoload/rails.vim	/^function! s:functionaltestEdit(cmd,...)$/;"	f
functionaltestList	autoload/rails.vim	/^function! s:functionaltestList(A,L,P)$/;"	f
fuzzyglob	autoload/rails.vim	/^function! s:fuzzyglob(arg)$/;"	f
g%	plugin/matchit.vim	/^nnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'n') <CR>$/;"	m
g%	plugin/matchit.vim	/^onoremap <silent> g% v:<C-U>call <SID>Match_wrapper('',0,'o') <CR>$/;"	m
g%	plugin/matchit.vim	/^vnoremap <silent> g% :<C-U>call <SID>Match_wrapper('',0,'v') <CR>m'gv``$/;"	m
g:ConqueTerm_CWInsert	plugin/conque_term.vim	/^    let g:ConqueTerm_CWInsert = 0$/;"	v
g:ConqueTerm_CloseOnEnd	plugin/conque_term.vim	/^    let g:ConqueTerm_CloseOnEnd = 0$/;"	v
g:ConqueTerm_CodePage	plugin/conque_term.vim	/^    let g:ConqueTerm_CodePage = 0$/;"	v
g:ConqueTerm_Color	plugin/conque_term.vim	/^    let g:ConqueTerm_Color = 1$/;"	v
g:ConqueTerm_ColorMode	plugin/conque_term.vim	/^    let g:ConqueTerm_ColorMode = ''$/;"	v
g:ConqueTerm_EscKey	plugin/conque_term.vim	/^    let g:ConqueTerm_EscKey = '<Esc>'$/;"	v
g:ConqueTerm_ExecFileKey	plugin/conque_term.vim	/^    let g:ConqueTerm_ExecFileKey = '<F11>'$/;"	v
g:ConqueTerm_FastMode	plugin/conque_term.vim	/^    let g:ConqueTerm_FastMode = 0$/;"	v
g:ConqueTerm_Idx	autoload/conque_term.vim	/^let g:ConqueTerm_Idx = 0$/;"	v
g:ConqueTerm_Idx	plugin/conque_term.vim	/^let g:ConqueTerm_Idx = 0$/;"	v
g:ConqueTerm_InsertOnEnter	plugin/conque_term.vim	/^    let g:ConqueTerm_InsertOnEnter = 0$/;"	v
g:ConqueTerm_Loaded	plugin/conque_term.vim	/^let g:ConqueTerm_Loaded = 1$/;"	v
g:ConqueTerm_PromptRegex	plugin/conque_term.vim	/^    let g:ConqueTerm_PromptRegex = '^\\w\\+@[0-9A-Za-z_.-]\\+:[0-9A-Za-z_.\/\\~,:-]\\+\\$'$/;"	v
g:ConqueTerm_PyExe	plugin/conque_term.vim	/^    let g:ConqueTerm_PyExe = ''$/;"	v
g:ConqueTerm_PyVersion	plugin/conque_term.vim	/^    let g:ConqueTerm_PyVersion = 2$/;"	v
g:ConqueTerm_ReadUnfocused	plugin/conque_term.vim	/^    let g:ConqueTerm_ReadUnfocused = 0$/;"	v
g:ConqueTerm_SendFileKey	plugin/conque_term.vim	/^    let g:ConqueTerm_SendFileKey = '<F10>'$/;"	v
g:ConqueTerm_SendFunctionKeys	plugin/conque_term.vim	/^    let g:ConqueTerm_SendFunctionKeys = 0$/;"	v
g:ConqueTerm_SendVisKey	plugin/conque_term.vim	/^    let g:ConqueTerm_SendVisKey = '<F9>'$/;"	v
g:ConqueTerm_SessionSupport	plugin/conque_term.vim	/^    let g:ConqueTerm_SessionSupport = 0$/;"	v
g:ConqueTerm_StartMessages	autoload/conque_term.vim	/^    let g:ConqueTerm_StartMessages = msg_show$/;"	v
g:ConqueTerm_StartMessages	plugin/conque_term.vim	/^    let g:ConqueTerm_StartMessages = 0$/;"	v
g:ConqueTerm_Syntax	plugin/conque_term.vim	/^    let g:ConqueTerm_Syntax = 'conque_term'$/;"	v
g:ConqueTerm_TERM	plugin/conque_term.vim	/^    let g:ConqueTerm_TERM =  'vt100'$/;"	v
g:ConqueTerm_Terminals	autoload/conque_term.vim	/^let g:ConqueTerm_Terminals = {}$/;"	v
g:ConqueTerm_TerminalsString	autoload/conque_term.vim	/^let g:ConqueTerm_TerminalsString = ''$/;"	v
g:ConqueTerm_ToggleKey	plugin/conque_term.vim	/^    let g:ConqueTerm_ToggleKey = '<F8>'$/;"	v
g:ConqueTerm_Version	plugin/conque_term.vim	/^let g:ConqueTerm_Version = 210$/;"	v
g:JSLintHighlightErrorLine	ftplugin/javascript/jslint.vim	/^  let g:JSLintHighlightErrorLine = 1$/;"	v
g:NERDTreeBookmark	plugin/NERD_tree.vim	/^let g:NERDTreeBookmark = s:Bookmark$/;"	v
g:NERDTreeDirNode	plugin/NERD_tree.vim	/^let g:NERDTreeDirNode = s:TreeDirNode$/;"	v
g:NERDTreeFileNode	plugin/NERD_tree.vim	/^let g:NERDTreeFileNode = s:TreeFileNode$/;"	v
g:NERDTreeIgnore	plugin/NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreePath	plugin/NERD_tree.vim	/^let g:NERDTreePath = s:Path$/;"	v
g:NERDTreeSortOrder	plugin/NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:NERDTreeStatusline	plugin/NERD_tree.vim	/^    let g:NERDTreeStatusline = "%{exists('b:NERDTreeRoot')?b:NERDTreeRoot.path.str():''}"$/;"	v
g:VCSCOMMAND_IDENTIFY_EXACT	plugin/vcscommand.vim	/^let g:VCSCOMMAND_IDENTIFY_EXACT = 1$/;"	v
g:VCSCOMMAND_IDENTIFY_INEXACT	plugin/vcscommand.vim	/^let g:VCSCOMMAND_IDENTIFY_INEXACT = -1$/;"	v
g:autoloaded_rails	autoload/rails.vim	/^let g:autoloaded_rails = '4.3'$/;"	v
g:autotag_vim_version_sourced	plugin/autotag.vim	/^let g:autotag_vim_version_sourced=s:autotag_vim_version$/;"	v
g:calendar_action	plugin/calendar.vim	/^  let g:calendar_action = "<SID>CalendarDiary"$/;"	v
g:calendar_datetime	plugin/calendar.vim	/^  let g:calendar_datetime = 'title'$/;"	v
g:calendar_diary	plugin/calendar.vim	/^  let g:calendar_diary = "~\/diary"$/;"	v
g:calendar_focus_today	plugin/calendar.vim	/^  let g:calendar_focus_today = 0$/;"	v
g:calendar_mark	plugin/calendar.vim	/^  let g:calendar_mark = 'left'$/;"	v
g:calendar_navi	plugin/calendar.vim	/^  let g:calendar_navi = 'top'$/;"	v
g:calendar_navi_label	plugin/calendar.vim	/^  let g:calendar_navi_label = "Prev,Today,Next"$/;"	v
g:calendar_options	plugin/calendar.vim	/^    let g:calendar_options .= " nornu"$/;"	v
g:calendar_options	plugin/calendar.vim	/^  let g:calendar_options="fdc=0 nonu"$/;"	v
g:calendar_sign	plugin/calendar.vim	/^  let g:calendar_sign = "<SID>CalendarSign"$/;"	v
g:calendar_version	plugin/calendar.vim	/^let g:calendar_version = "2.5"$/;"	v
g:changelog_dateformat	plugin/gnuchlog.vim	/^    let g:changelog_dateformat = "%Y-%m-%d"$/;"	v
g:changelog_relativepath	plugin/gnuchlog.vim	/^    let g:changelog_relativepath = 1$/;"	v
g:changelog_username	plugin/gnuchlog.vim	/^        let g:changelog_username = $EMAIL$/;"	v
g:changelog_username	plugin/gnuchlog.vim	/^        let g:changelog_username = $EMAIL_ADDRESS$/;"	v
g:changelog_username	plugin/gnuchlog.vim	/^        let g:changelog_username = name . '  <' . login . '@' . hostname . '>'$/;"	v
g:colors_name	colors/anotherdark.vim	/^let g:colors_name="anotherdark"$/;"	v
g:colors_name	colors/desert256.vim	/^let g:colors_name="desert256"$/;"	v
g:colors_name	colors/molokai.vim	/^let g:colors_name="molokai"$/;"	v
g:colors_name	colors/railscasts.vim	/^let g:colors_name = "railscasts"$/;"	v
g:colors_name	colors/rootwater.vim	/^let g:colors_name = 'rootwater'$/;"	v
g:did_ft	plugin/snipMate.vim	/^let g:did_ft = {}$/;"	v
g:js_indent_log	indent/javascript.vim	/^	let g:js_indent_log = 1$/;"	v
g:loaded_GnuChangeLog	plugin/gnuchlog.vim	/^let g:loaded_GnuChangeLog= "v10"$/;"	v
g:loaded_acp	plugin/acp.vim	/^let g:loaded_acp = 1$/;"	v
g:loaded_autoload_acp	autoload/acp.vim	/^let g:loaded_autoload_acp = 1$/;"	v
g:loaded_autoload_l9	autoload/l9.vim	/^let g:loaded_autoload_l9 = 1$/;"	v
g:loaded_mark	plugin/mark.vim	/^let g:loaded_mark = 1$/;"	v
g:loaded_neocomplcache	plugin/neocomplcache.vim	/^let g:loaded_neocomplcache = 1$/;"	v
g:loaded_nerdtree_exec_menuitem	nerdtree_plugin/exec_menuitem.vim	/^let g:loaded_nerdtree_exec_menuitem = 1$/;"	v
g:loaded_nerdtree_fs_menu	nerdtree_plugin/fs_menu.vim	/^let g:loaded_nerdtree_fs_menu = 1$/;"	v
g:loaded_rails	plugin/rails.vim	/^let g:loaded_rails = 1$/;"	v
g:loaded_surround	plugin/surround.vim	/^let g:loaded_surround = 1$/;"	v
g:loaded_tagbar	plugin/tagbar.vim	/^let g:loaded_tagbar = 1$/;"	v
g:loaded_zencoding_vim	plugin/zencoding.vim	/^let g:loaded_zencoding_vim = 1$/;"	v
g:mwHistAdd	plugin/mark.vim	/^	let g:mwHistAdd = '\/@'$/;"	v
g:neocomplcache_auto_completion_start_length	plugin/neocomplcache.vim	/^  let g:neocomplcache_auto_completion_start_length = 2$/;"	v
g:neocomplcache_caching_limit_file_size	plugin/neocomplcache.vim	/^  let g:neocomplcache_caching_limit_file_size = 500000$/;"	v
g:neocomplcache_ctags_program	plugin/neocomplcache.vim	/^  let g:neocomplcache_ctags_program = 'ctags'$/;"	v
g:neocomplcache_cursor_hold_i_time	plugin/neocomplcache.vim	/^  let g:neocomplcache_cursor_hold_i_time = 300$/;"	v
g:neocomplcache_disable_auto_complete	plugin/neocomplcache.vim	/^  let g:neocomplcache_disable_auto_complete = 0$/;"	v
g:neocomplcache_disable_auto_select_buffer_name_pattern	plugin/neocomplcache.vim	/^  let g:neocomplcache_disable_auto_select_buffer_name_pattern = ''$/;"	v
g:neocomplcache_disable_caching_buffer_name_pattern	plugin/neocomplcache.vim	/^  let g:neocomplcache_disable_caching_buffer_name_pattern = ''$/;"	v
g:neocomplcache_enable_auto_delimiter	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_auto_delimiter = 0$/;"	v
g:neocomplcache_enable_auto_select	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_auto_select = 0$/;"	v
g:neocomplcache_enable_caching_message	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_caching_message = 1$/;"	v
g:neocomplcache_enable_camel_case_completion	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_camel_case_completion = 0$/;"	v
g:neocomplcache_enable_cursor_hold_i	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_cursor_hold_i = 0$/;"	v
g:neocomplcache_enable_ignore_case	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_ignore_case = &ignorecase$/;"	v
g:neocomplcache_enable_quick_match	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_quick_match = 0$/;"	v
g:neocomplcache_enable_smart_case	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_smart_case = 0$/;"	v
g:neocomplcache_enable_underbar_completion	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_underbar_completion = 0$/;"	v
g:neocomplcache_enable_wildcard	plugin/neocomplcache.vim	/^  let g:neocomplcache_enable_wildcard = 1$/;"	v
g:neocomplcache_force_caching_buffer_name_pattern	plugin/neocomplcache.vim	/^  let g:neocomplcache_force_caching_buffer_name_pattern = ''$/;"	v
g:neocomplcache_include_exprs	autoload/neocomplcache/sources/include_complete.vim	/^  let g:neocomplcache_include_exprs = {}$/;"	v
g:neocomplcache_include_paths	autoload/neocomplcache/sources/include_complete.vim	/^  let g:neocomplcache_include_paths = {}$/;"	v
g:neocomplcache_include_patterns	autoload/neocomplcache/sources/include_complete.vim	/^  let g:neocomplcache_include_patterns = {}$/;"	v
g:neocomplcache_include_suffixes	autoload/neocomplcache/sources/include_complete.vim	/^  let g:neocomplcache_include_suffixes = {}$/;"	v
g:neocomplcache_lock_buffer_name_pattern	plugin/neocomplcache.vim	/^  let g:neocomplcache_lock_buffer_name_pattern = ''$/;"	v
g:neocomplcache_manual_completion_start_length	plugin/neocomplcache.vim	/^  let g:neocomplcache_manual_completion_start_length = 2$/;"	v
g:neocomplcache_max_filename_width	plugin/neocomplcache.vim	/^  let g:neocomplcache_max_filename_width = 15$/;"	v
g:neocomplcache_max_keyword_width	plugin/neocomplcache.vim	/^  let g:neocomplcache_max_keyword_width = 50$/;"	v
g:neocomplcache_max_list	plugin/neocomplcache.vim	/^  let g:neocomplcache_max_list = 100$/;"	v
g:neocomplcache_min_keyword_length	plugin/neocomplcache.vim	/^  let g:neocomplcache_min_keyword_length = 4$/;"	v
g:neocomplcache_min_syntax_length	autoload/neocomplcache/sources/syntax_complete.vim	/^  let g:neocomplcache_min_syntax_length = 4$/;"	v
g:neocomplcache_plugin_completion_length	plugin/neocomplcache.vim	/^  let g:neocomplcache_plugin_completion_length = {}$/;"	v
g:neocomplcache_plugin_disable	plugin/neocomplcache.vim	/^  let g:neocomplcache_plugin_disable = {}$/;"	v
g:neocomplcache_plugin_rank	plugin/neocomplcache.vim	/^  let g:neocomplcache_plugin_rank = {}$/;"	v
g:neocomplcache_quick_match_table	plugin/neocomplcache.vim	/^  let g:neocomplcache_quick_match_table = {$/;"	v
g:neocomplcache_temporary_dir	plugin/neocomplcache.vim	/^  let g:neocomplcache_temporary_dir = '~\/.neocon'$/;"	v
g:neocomplcache_temporary_dir	plugin/neocomplcache.vim	/^let g:neocomplcache_temporary_dir = expand(g:neocomplcache_temporary_dir)$/;"	v
g:tagbar_autoclose	plugin/tagbar.vim	/^    let g:tagbar_autoclose = 0$/;"	v
g:tagbar_autofocus	plugin/tagbar.vim	/^    let g:tagbar_autofocus = 0$/;"	v
g:tagbar_autoshowtag	plugin/tagbar.vim	/^    let g:tagbar_autoshowtag = 0$/;"	v
g:tagbar_compact	plugin/tagbar.vim	/^    let g:tagbar_compact = 0$/;"	v
g:tagbar_ctags_bin	plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'ctags'$/;"	v
g:tagbar_ctags_bin	plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'ctags-exuberant'$/;"	v
g:tagbar_ctags_bin	plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'ctags.exe'$/;"	v
g:tagbar_ctags_bin	plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'exctags'$/;"	v
g:tagbar_ctags_bin	plugin/tagbar.vim	/^        let g:tagbar_ctags_bin = 'tags'$/;"	v
g:tagbar_ctags_bin	plugin/tagbar.vim	/^    let g:tagbar_ctags_bin = expand(g:tagbar_ctags_bin)$/;"	v
g:tagbar_expand	plugin/tagbar.vim	/^    let g:tagbar_expand = 0$/;"	v
g:tagbar_foldlevel	plugin/tagbar.vim	/^    let g:tagbar_foldlevel = 99$/;"	v
g:tagbar_left	plugin/tagbar.vim	/^    let g:tagbar_left = 0$/;"	v
g:tagbar_sort	plugin/tagbar.vim	/^    let g:tagbar_sort = 1$/;"	v
g:tagbar_usearrows	plugin/tagbar.vim	/^    let g:tagbar_usearrows = 0$/;"	v
g:tagbar_width	plugin/tagbar.vim	/^    let g:tagbar_width = 40$/;"	v
g:user_zen_leader_key	plugin/zencoding.vim	/^  let g:user_zen_leader_key = '<c-y>'$/;"	v
g:zencoding_debug	plugin/zencoding.vim	/^  let g:zencoding_debug = 0$/;"	v
gS	plugin/surround.vim	/^    vmap    gS   <Plug>VgSurround$/;"	m
getBufIndicator	autoload/fuf/buffer.vim	/^function s:getBufIndicator(bufNr)$/;"	f
getChangesLines	autoload/fuf/changelist.vim	/^function s:getChangesLines()$/;"	f
getCurrentHelpTagFiles	autoload/fuf/help.vim	/^function s:getCurrentHelpTagFiles()$/;"	f
getCurrentText	autoload/acp.vim	/^function s:getCurrentText()$/;"	f
getCurrentWord	autoload/acp.vim	/^function s:getCurrentWord()$/;"	f
getEditableDataFiles	autoload/fuf.vim	/^function s:getEditableDataFiles(modeName)$/;"	f
getFileType	autoload/fuf/buffertag.vim	/^function s:getFileType(bufNr)$/;"	f
getFuncName	plugin/gnuchlog.vim	/^function! s:getFuncName()$/;"	f
getHelpTagEntries	autoload/fuf/help.vim	/^function s:getHelpTagEntries(tagFile)$/;"	f
getJumpsLines	autoload/fuf/jumplist.vim	/^function s:getJumpsLines()$/;"	f
getJumpsLines	autoload/fuf/quickfix.vim	/^function s:getJumpsLines()$/;"	f
getLastBlockLength	autoload/fuf.vim	/^function s:getLastBlockLength(pattern, patternIsPath)$/;"	f
getLinePattern	autoload/fuf/bookmarkfile.vim	/^function s:getLinePattern(lnum)$/;"	f
getMatchingIndex	autoload/fuf/help.vim	/^function s:getMatchingIndex(lines, pattern)$/;"	f
getMatchingIndex	autoload/fuf/tag.vim	/^function s:getMatchingIndex(lines, cmd)$/;"	f
getMatchingLineNumber	autoload/fuf/bookmarkfile.vim	/^function s:getMatchingLineNumber(lines, pattern, lnumBegin)$/;"	f
getMatchingSnipItems	autoload/acp.vim	/^function s:getMatchingSnipItems(base)$/;"	f
getPath	plugin/NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getPostText	autoload/acp.vim	/^function s:getPostText()$/;"	f
getSnippedHead	autoload/fuf.vim	/^function s:getSnippedHead(head, baseLen)$/;"	f
getTagData	autoload/fuf/buffertag.vim	/^function s:getTagData(bufNrs)$/;"	f
getTagItems	autoload/fuf/buffertag.vim	/^function s:getTagItems(bufNr)$/;"	f
getTagNames	autoload/fuf/tag.vim	/^function s:getTagNames(tagFile)$/;"	f
getTaggedFileList	autoload/fuf/taggedfile.vim	/^function s:getTaggedFileList(tagfile)$/;"	f
getTreeWinNum	plugin/NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
getWordBoundaries	autoload/fuf.vim	/^function s:getWordBoundaries(word)$/;"	f
get_augrouplist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_augrouplist()"{{{$/;"	f
get_bool	ruby/command-t/controller.rb	/^    def get_bool name$/;"	f	class:CommandT.Controller
get_bool	ruby/command-t/settings.rb	/^    def get_bool setting$/;"	f	class:CommandT.Settings
get_buffer_include_files	autoload/neocomplcache/sources/include_complete.vim	/^function! s:get_buffer_include_files(bufnumber)"{{{$/;"	f
get_buffer_info	autoload/conque_term/conque_sole_subprocess.py	/^    def get_buffer_info(self):$/;"	m	class:ConqueSoleSubprocess
get_buffer_line	autoload/conque_term/conque.py	/^    def get_buffer_line(self, line):$/;"	m	class:Conque
get_buffer_line	autoload/conque_term/conque_screen.py	/^    def get_buffer_line(self, line):$/;"	m	class:ConqueScreen
get_buffer_line	autoload/conque_term/conque_sole.py	/^    def get_buffer_line(self, line):$/;"	m	class:ConqueSole
get_cached_script_candidates	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_cached_script_candidates()"{{{$/;"	f
get_cmdlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_cmdlist()"{{{$/;"	f
get_complete_result	autoload/neocomplcache.vim	/^function! s:get_complete_result(cur_text, ...)"{{{$/;"	f
get_completefunc_list	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:get_completefunc_list(list)"{{{$/;"	f
get_content	autoload/zencoding.vim	/^function! s:get_content(region)$/;"	f
get_content_from_url	autoload/zencoding.vim	/^function! s:get_content_from_url(url)$/;"	f
get_cur_text	autoload/neocomplcache.vim	/^function! s:get_cur_text()"{{{$/;"	f
get_cursor_highlight	ruby/command-t/match_window.rb	/^    def get_cursor_highlight$/;"	f	class:CommandT.MatchWindow
get_cursor_snippet	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:get_cursor_snippet(snippets, cur_text)"{{{$/;"	f
get_endlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_endlist()"{{{$/;"	f
get_envlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_envlist()"{{{$/;"	f
get_functionlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_functionlist()"{{{$/;"	f
get_include_files	autoload/neocomplcache/sources/include_complete.vim	/^function! s:get_include_files(nestlevel, lines, filetype, pattern, path, expr)"{{{$/;"	f
get_list_or_string	ruby/command-t/controller.rb	/^    def get_list_or_string name$/;"	f	class:CommandT.Controller
get_local_dictionary_variables	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_local_dictionary_variables(var_name)"{{{$/;"	f
get_local_variables	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_local_variables()"{{{$/;"	f
get_mappinglist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_mappinglist()"{{{$/;"	f
get_new_output	autoload/conque_term/conque_sole.py	/^    def get_new_output(self, lines, update_top, stats):$/;"	m	class:ConqueSole
get_number	ruby/command-t/controller.rb	/^    def get_number name$/;"	f	class:CommandT.Controller
get_number	ruby/command-t/settings.rb	/^    def get_number setting$/;"	f	class:CommandT.Settings
get_omni_list	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:get_omni_list(list)"{{{$/;"	f
get_quick_match_pattern	autoload/neocomplcache.vim	/^function! s:get_quick_match_pattern()"{{{$/;"	f
get_real_idx	autoload/conque_term/conque_screen.py	/^    def get_real_idx(self, line):$/;"	m	class:ConqueScreen
get_screen_text	autoload/conque_term/conque_sole_subprocess.py	/^    def get_screen_text(self):$/;"	m	class:ConqueSoleSubprocess
get_script_candidates	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_script_candidates(bufnumber)"{{{$/;"	f
get_snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:get_snippets()"{{{$/;"	f
get_sources_list	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:get_sources_list()"{{{$/;"	f
get_stats	autoload/conque_term/conque_sole_wrapper.py	/^    def get_stats(self):$/;"	m	class:ConqueSoleWrapper
get_string	ruby/command-t/controller.rb	/^    def get_string name$/;"	f	class:CommandT.Controller
get_text_from_html	autoload/zencoding.vim	/^function! s:get_text_from_html(buf)$/;"	f
get_top	autoload/conque_term/conque_screen.py	/^    def get_top(self):$/;"	m	class:ConqueScreen
get_variable_type	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_variable_type(expression)"{{{$/;"	f
get_variablelist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:get_variablelist()"{{{$/;"	f
get_visualblock	autoload/zencoding.vim	/^function! s:get_visualblock()$/;"	f
getchar	plugin/surround.vim	/^function! s:getchar()$/;"	f
getopt	autoload/rails.vim	/^function! s:getopt(opt,...)$/;"	f
getpidfor	autoload/rails.vim	/^function! s:getpidfor(bind,port)$/;"	f
gitFunctions.Add	plugin/vcsgit.vim	/^function! s:gitFunctions.Add(argList)$/;"	f
gitFunctions.Annotate	plugin/vcsgit.vim	/^function! s:gitFunctions.Annotate(argList)$/;"	f
gitFunctions.Commit	plugin/vcsgit.vim	/^function! s:gitFunctions.Commit(argList)$/;"	f
gitFunctions.Delete	plugin/vcsgit.vim	/^function! s:gitFunctions.Delete(argList)$/;"	f
gitFunctions.Diff	plugin/vcsgit.vim	/^function! s:gitFunctions.Diff(argList)$/;"	f
gitFunctions.GetBufferInfo	plugin/vcsgit.vim	/^function! s:gitFunctions.GetBufferInfo()$/;"	f
gitFunctions.Identify	plugin/vcsgit.vim	/^function! s:gitFunctions.Identify(buffer)$/;"	f
gitFunctions.Log	plugin/vcsgit.vim	/^function! s:gitFunctions.Log(argList)$/;"	f
gitFunctions.Revert	plugin/vcsgit.vim	/^function! s:gitFunctions.Revert(argList)$/;"	f
gitFunctions.Review	plugin/vcsgit.vim	/^function! s:gitFunctions.Review(argList)$/;"	f
gitFunctions.Status	plugin/vcsgit.vim	/^function! s:gitFunctions.Status(argList)$/;"	f
gitFunctions.Update	plugin/vcsgit.vim	/^function! s:gitFunctions.Update(argList)$/;"	f
grey_color	colors/desert256.vim	/^    fun <SID>grey_color(n)$/;"	f
grey_color	colors/jellybeans.vim	/^fun! s:grey_color(n)$/;"	f
grey_level	colors/desert256.vim	/^    fun <SID>grey_level(n)$/;"	f
grey_level	colors/jellybeans.vim	/^fun! s:grey_level(n)$/;"	f
grey_number	colors/desert256.vim	/^    fun <SID>grey_number(x)$/;"	f
grey_number	colors/jellybeans.vim	/^fun! s:grey_number(x)$/;"	f
gsub	autoload/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
gsub	plugin/rails.vim	/^function! s:gsub(str,pat,rep)$/;"	f
handle	autoload/conque_term/conque_sole_subprocess.py	/^    handle = None$/;"	v	class:ConqueSoleSubprocess
handle	autoload/conque_term/conque_sole_wrapper.py	/^    handle = None$/;"	v	class:ConqueSoleWrapper
handleFailedAssersion	plugin/l9.vim	/^  function s:handleFailedAssersion(expr)$/;"	f
handleMiddleMouse	plugin/NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
handle_key	ruby/command-t/controller.rb	/^    def handle_key$/;"	f	class:CommandT.Controller
handler.getCompleteItems	autoload/fuf/bookmarkdir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/bookmarkfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/buffer.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/buffertag.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/callbackfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/callbackitem.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/changelist.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/coveragefile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/dir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/file.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/givencmd.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/givendir.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/givenfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/help.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/jumplist.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/line.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/mrucmd.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/mrufile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/quickfix.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/tag.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getCompleteItems	autoload/fuf/taggedfile.vim	/^function s:handler.getCompleteItems(patternPrimary)$/;"	f
handler.getModeName	autoload/fuf/bookmarkdir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/bookmarkfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/buffer.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/buffertag.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/callbackfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/callbackitem.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/changelist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/coveragefile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/dir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/file.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/givencmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/givendir.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/givenfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/help.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/jumplist.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/line.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/mrucmd.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/mrufile.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/quickfix.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/tag.vim	/^function s:handler.getModeName()$/;"	f
handler.getModeName	autoload/fuf/taggedfile.vim	/^function s:handler.getModeName()$/;"	f
handler.getPreviewHeight	autoload/fuf/bookmarkdir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/bookmarkfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/buffer.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/buffertag.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/callbackfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/callbackitem.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/changelist.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/coveragefile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/dir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/file.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/givencmd.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/givendir.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/givenfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/help.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/jumplist.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/line.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/mrucmd.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/mrufile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/quickfix.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/tag.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPreviewHeight	autoload/fuf/taggedfile.vim	/^function s:handler.getPreviewHeight()$/;"	f
handler.getPrompt	autoload/fuf/bookmarkdir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/bookmarkfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/buffer.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/buffertag.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/callbackfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/callbackitem.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/changelist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/coveragefile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/dir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/file.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/givencmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/givendir.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/givenfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/help.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/jumplist.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/line.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/mrucmd.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/mrufile.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/quickfix.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/tag.vim	/^function s:handler.getPrompt()$/;"	f
handler.getPrompt	autoload/fuf/taggedfile.vim	/^function s:handler.getPrompt()$/;"	f
handler.isOpenable	autoload/fuf/bookmarkdir.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/bookmarkfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/buffer.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/buffertag.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/callbackfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/callbackitem.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/changelist.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/coveragefile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/dir.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/file.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/givencmd.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/givendir.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/givenfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/help.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/jumplist.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/line.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/mrucmd.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/mrufile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/quickfix.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/tag.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.isOpenable	autoload/fuf/taggedfile.vim	/^function s:handler.isOpenable(enteredPattern)$/;"	f
handler.makePatternSet	autoload/fuf/bookmarkdir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/bookmarkfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/buffer.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/buffertag.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/callbackfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/callbackitem.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/changelist.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/coveragefile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/dir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/file.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/givencmd.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/givendir.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/givenfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/help.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/jumplist.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/line.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/mrucmd.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/mrufile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/quickfix.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/tag.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePatternSet	autoload/fuf/taggedfile.vim	/^function s:handler.makePatternSet(patternBase)$/;"	f
handler.makePreviewLines	autoload/fuf/bookmarkdir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/bookmarkfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/buffer.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/buffertag.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/callbackfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/callbackitem.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/changelist.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/coveragefile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/dir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/file.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/givencmd.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/givendir.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/givenfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/help.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/jumplist.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/line.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/mrucmd.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/mrufile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/quickfix.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/tag.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.makePreviewLines	autoload/fuf/taggedfile.vim	/^function s:handler.makePreviewLines(word, count)$/;"	f
handler.onModeEnterPost	autoload/fuf/bookmarkdir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/bookmarkfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/buffer.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/buffertag.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/callbackfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/callbackitem.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/changelist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/coveragefile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/dir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/file.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/givencmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/givendir.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/givenfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/help.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/jumplist.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/line.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/mrucmd.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/mrufile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/quickfix.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/tag.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPost	autoload/fuf/taggedfile.vim	/^function s:handler.onModeEnterPost()$/;"	f
handler.onModeEnterPre	autoload/fuf/bookmarkdir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/bookmarkfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/buffer.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/buffertag.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/callbackfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/callbackitem.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/changelist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/coveragefile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/dir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/file.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/givencmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/givendir.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/givenfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/help.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/jumplist.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/line.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/mrucmd.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/mrufile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/quickfix.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/tag.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeEnterPre	autoload/fuf/taggedfile.vim	/^function s:handler.onModeEnterPre()$/;"	f
handler.onModeLeavePost	autoload/fuf/bookmarkdir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/bookmarkfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/buffer.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/buffertag.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/callbackfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/callbackitem.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/changelist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/coveragefile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/dir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/file.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/givencmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/givendir.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/givenfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/help.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/jumplist.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/line.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/mrucmd.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/mrufile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/quickfix.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/tag.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onModeLeavePost	autoload/fuf/taggedfile.vim	/^function s:handler.onModeLeavePost(opened)$/;"	f
handler.onOpen	autoload/fuf/bookmarkdir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/bookmarkfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/buffer.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/buffertag.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/callbackfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/callbackitem.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/changelist.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/coveragefile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/dir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/file.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/givencmd.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/givendir.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/givenfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/help.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/jumplist.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/line.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/mrucmd.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/mrufile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/quickfix.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/tag.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handler.onOpen	autoload/fuf/taggedfile.vim	/^function s:handler.onOpen(word, mode)$/;"	f
handlerBase.addStat	autoload/fuf.vim	/^function s:handlerBase.addStat(pattern, word)$/;"	f
handlerBase.concretize	autoload/fuf.vim	/^function s:handlerBase.concretize(deriv)$/;"	f
handlerBase.existsPrompt	autoload/fuf.vim	/^function s:handlerBase.existsPrompt(line)$/;"	f
handlerBase.getMatchingCompleteItems	autoload/fuf.vim	/^function s:handlerBase.getMatchingCompleteItems(patternBase)$/;"	f
handlerBase.onBs	autoload/fuf.vim	/^function s:handlerBase.onBs()$/;"	f
handlerBase.onComplete	autoload/fuf.vim	/^function s:handlerBase.onComplete(findstart, base)$/;"	f
handlerBase.onCr	autoload/fuf.vim	/^function s:handlerBase.onCr(openType)$/;"	f
handlerBase.onCursorMovedI	autoload/fuf.vim	/^function s:handlerBase.onCursorMovedI()$/;"	f
handlerBase.onDeleteWord	autoload/fuf.vim	/^function s:handlerBase.onDeleteWord()$/;"	f
handlerBase.onInsertLeave	autoload/fuf.vim	/^function s:handlerBase.onInsertLeave()$/;"	f
handlerBase.onPreviewBase	autoload/fuf.vim	/^function s:handlerBase.onPreviewBase(repeatable)$/;"	f
handlerBase.onRecallPattern	autoload/fuf.vim	/^function s:handlerBase.onRecallPattern(shift)$/;"	f
handlerBase.onSwitchMatching	autoload/fuf.vim	/^function s:handlerBase.onSwitchMatching()$/;"	f
handlerBase.onSwitchMode	autoload/fuf.vim	/^function s:handlerBase.onSwitchMode(shift)$/;"	f
handlerBase.removePrompt	autoload/fuf.vim	/^function s:handlerBase.removePrompt(line)$/;"	f
handlerBase.restorePrompt	autoload/fuf.vim	/^function s:handlerBase.restorePrompt(line)$/;"	f
has_syntax	ruby/command-t/vim.rb	/^    def self.has_syntax?$/;"	F	class:CommandT.VIM
hash_screen_alignment_test	autoload/conque_term/conque.py	/^    def hash_screen_alignment_test(self):$/;"	m	class:Conque
hdrdir	ruby/command-t/Makefile	/^hdrdir = \/home\/baguo\/.rvm\/rubies\/ruby-1.9.2-p180\/include\/ruby-1.9.1$/;"	m
helperEdit	autoload/rails.vim	/^function! s:helperEdit(cmd,...)$/;"	f
helperList	autoload/rails.vim	/^function! s:helperList(A,L,P)$/;"	f
helpermethods	autoload/rails.vim	/^function! s:helpermethods()$/;"	f
hide	ruby/command-t/controller.rb	/^    def hide$/;"	f	class:CommandT.Controller
hide_cursor	ruby/command-t/match_window.rb	/^    def hide_cursor$/;"	f	class:CommandT.MatchWindow
highlightError	autoload/fuf.vim	/^function s:highlightError()$/;"	f
highlightPrompt	autoload/fuf.vim	/^function s:highlightPrompt(prompt)$/;"	f
highlight_groups	autoload/conque_term/conque.py	/^    highlight_groups = {}$/;"	v	class:Conque
hostname	plugin/gnuchlog.vim	/^                let hostname = strpart(hostname, 0, newline)$/;"	v
hostname	plugin/gnuchlog.vim	/^            let hostname = 'localhost'$/;"	v
hostname	plugin/gnuchlog.vim	/^        let hostname = system('hostname')$/;"	v
htmldir	ruby/command-t/Makefile	/^htmldir = $(docdir)$/;"	m
idle	autoload/conque_term/conque.py	/^    def idle(self):$/;"	m	class:Conque
idle	autoload/conque_term/conque_sole.py	/^    def idle(self):$/;"	m	class:ConqueSole
idle	autoload/conque_term/conque_sole_wrapper.py	/^    def idle(self):$/;"	m	class:ConqueSoleWrapper
idle_sleep_time	autoload/conque_term/conque_sole_communicator.py	/^        idle_sleep_time = 0.10$/;"	v
includedir	ruby/command-t/Makefile	/^includedir = $(prefix)\/include$/;"	m
indentLevelFor	plugin/NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
infodir	ruby/command-t/Makefile	/^infodir = $(datarootdir)\/info$/;"	m
initNerdTree	plugin/NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	plugin/NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	plugin/NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initOpenURL	autoload/rails.vim	/^function! s:initOpenURL()$/;"	f
initVariable	plugin/NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
init_shared_memory	autoload/conque_term/conque_sole_subprocess.py	/^    def init_shared_memory(self, mem_key):$/;"	m	class:ConqueSoleSubprocess
init_shared_memory	autoload/conque_term/conque_sole_wrapper.py	/^    def init_shared_memory(self, mem_key):$/;"	m	class:ConqueSoleWrapper
init_tabstops	autoload/conque_term/conque.py	/^    def init_tabstops(self):$/;"	m	class:Conque
initialize	plugin/fuf.vim	/^function s:initialize()$/;"	f
initialize	ruby/command-t/controller.rb	/^    def initialize$/;"	f	class:CommandT.Controller
initialize	ruby/command-t/finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.Finder
initialize	ruby/command-t/finder/buffer_finder.rb	/^    def initialize$/;"	f	class:CommandT.BufferFinder
initialize	ruby/command-t/finder/file_finder.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileFinder
initialize	ruby/command-t/match_window.rb	/^    def initialize options = {}$/;"	f	class:CommandT.MatchWindow
initialize	ruby/command-t/prompt.rb	/^    def initialize$/;"	f	class:CommandT.Prompt
initialize	ruby/command-t/scanner/file_scanner.rb	/^    def initialize path = Dir.pwd, options = {}$/;"	f	class:CommandT.FileScanner
initialize	ruby/command-t/settings.rb	/^    def initialize$/;"	f	class:CommandT.Settings
initialize_dictionary	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:initialize_dictionary(filetype)"{{{$/;"	f
initialize_source	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:initialize_source(srcname)"{{{$/;"	f
initialize_tags	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:initialize_tags(filename)"{{{$/;"	f
initializerEdit	autoload/rails.vim	/^function! s:initializerEdit(cmd,...)$/;"	f
initializerList	autoload/rails.vim	/^function! s:initializerList(A,L,P)$/;"	f
inputreplacement	plugin/surround.vim	/^function! s:inputreplacement()$/;"	f
inputtarget	plugin/surround.vim	/^function! s:inputtarget()$/;"	f
insert	autoload/conque_term/conque_screen.py	/^    def insert(self, line, value):$/;"	m	class:ConqueScreen
insert	plugin/surround.vim	/^function! s:insert(...) " {{{1$/;"	f
insert_enter	autoload/conque_term/conque.py	/^    def insert_enter(self):$/;"	m	class:Conque
install_plugin	plugin/zencoding.vim	/^function! s:install_plugin()$/;"	f
integrate_completion	autoload/neocomplcache.vim	/^function! s:integrate_completion(complete_result, is_sort)"{{{$/;"	f
integrationtestEdit	autoload/rails.vim	/^function! s:integrationtestEdit(cmd,...)$/;"	f
integrationtestList	autoload/rails.vim	/^function! s:integrationtestList(A,L,P)$/;"	f
interpretPrimaryPatternForNonPath	autoload/fuf.vim	/^function s:interpretPrimaryPatternForNonPath(pattern)$/;"	f
interpretPrimaryPatternForPath	autoload/fuf.vim	/^function s:interpretPrimaryPatternForPath(pattern)$/;"	f
interpretPrimaryPatternForPathTail	autoload/fuf.vim	/^function s:interpretPrimaryPatternForPathTail(pattern)$/;"	f
invertrange	autoload/rails.vim	/^function! s:invertrange(beg,end)$/;"	f
isModifiedSinceLastCall	autoload/acp.vim	/^function s:isModifiedSinceLastCall()$/;"	f
isTreeOpen	plugin/NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	plugin/NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
is_alive	autoload/conque_term/conque_sole_subprocess.py	/^    def is_alive(self):$/;"	m	class:ConqueSoleSubprocess
is_alive	autoload/conque_term/conque_sole_subprocess.py	/^    is_alive = True$/;"	v	class:ConqueSoleSubprocess
is_alive	autoload/conque_term/conque_sole_wrapper.py	/^    def is_alive(self):$/;"	m	class:ConqueSoleWrapper
is_alive	autoload/conque_term/conque_subprocess.py	/^    def is_alive(self):$/;"	m	class:ConqueSubprocess
is_idle	autoload/conque_term/conque_sole_communicator.py	/^                        is_idle = False$/;"	v
is_idle	autoload/conque_term/conque_sole_communicator.py	/^                        is_idle = True$/;"	v
is_idle	autoload/conque_term/conque_sole_communicator.py	/^                is_idle = True$/;"	v
is_idle	autoload/conque_term/conque_sole_communicator.py	/^        is_idle = False$/;"	v
javascriptEdit	autoload/rails.vim	/^function! s:javascriptEdit(cmd,...)$/;"	f
javascriptList	autoload/rails.vim	/^function! s:javascriptList(A,L,P)$/;"	f
jumpToBookmark	autoload/fuf/bookmarkfile.vim	/^function s:jumpToBookmark(path, mode, pattern, lnum)$/;"	f
jumpToChild	plugin/NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	plugin/NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	plugin/NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	plugin/NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	plugin/NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	plugin/NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
jumpToTag	autoload/fuf/buffertag.vim	/^function s:jumpToTag(item, mode)$/;"	f
keyword_filter	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:keyword_filter(list, cur_keyword_str)"{{{$/;"	f
known_files.get	plugin/tagbar.vim	/^function! s:known_files.get(fname) dict$/;"	f
known_files.getCurrent	plugin/tagbar.vim	/^function! s:known_files.getCurrent() dict$/;"	f
known_files.has	plugin/tagbar.vim	/^function! s:known_files.has(fname) dict$/;"	f
known_files.put	plugin/tagbar.vim	/^function! s:known_files.put(fileinfo, ...) dict$/;"	f
known_files.rm	plugin/tagbar.vim	/^function! s:known_files.rm(fname) dict$/;"	f
known_files.setCurrent	plugin/tagbar.vim	/^function! s:known_files.setCurrent(fileinfo) dict$/;"	f
l	autoload/conque_term/conque.py	/^    l = 1 # current cursor line$/;"	v	class:Conque
l9#async#execute	autoload/l9/async.vim	/^function l9#async#execute(key, cmd, cwd, input, appends)$/;"	f
l9#async#listActiveWorkers	autoload/l9/async.vim	/^function l9#async#listActiveWorkers()$/;"	f
l9#async#listWorkers	autoload/l9/async.vim	/^function l9#async#listWorkers()$/;"	f
l9#async#read	autoload/l9/async.vim	/^function l9#async#read(key)$/;"	f
l9#completeForInputHl	autoload/l9.vim	/^function l9#completeForInputHl(lead, line, pos)$/;"	f
l9#concat	autoload/l9.vim	/^function l9#concat(items)$/;"	f
l9#concatPaths	autoload/l9.vim	/^function l9#concatPaths(paths)$/;"	f
l9#convertWildcardToRegexp	autoload/l9.vim	/^function l9#convertWildcardToRegexp(expr)$/;"	f
l9#defineVariableDefault	autoload/l9.vim	/^function l9#defineVariableDefault(name, default)$/;"	f
l9#deleteAllBuffersExcept	autoload/l9.vim	/^function l9#deleteAllBuffersExcept(files)$/;"	f
l9#echoHl	autoload/l9.vim	/^function l9#echoHl(hl, msg, prefix, addingHistory)$/;"	f
l9#filterWithLimit	autoload/l9.vim	/^function l9#filterWithLimit(items, expr, limit)$/;"	f
l9#getPathSeparator	autoload/l9.vim	/^function l9#getPathSeparator()$/;"	f
l9#getSelectedText	autoload/l9.vim	/^function l9#getSelectedText()$/;"	f
l9#getVersion	autoload/l9.vim	/^function l9#getVersion()$/;"	f
l9#grepBuffers	autoload/l9.vim	/^function l9#grepBuffers(pattern, bufNrs)$/;"	f
l9#grepFiles	autoload/l9.vim	/^function l9#grepFiles(pattern, files)$/;"	f
l9#guardScriptLoading	autoload/l9.vim	/^function l9#guardScriptLoading(path, vimVersion, l9Version, exprs)$/;"	f
l9#hash224	autoload/l9.vim	/^function l9#hash224(str)$/;"	f
l9#inputHl	autoload/l9.vim	/^function l9#inputHl(hl, ...)$/;"	f
l9#isCompatible	autoload/l9.vim	/^function l9#isCompatible(ver)$/;"	f
l9#loadFilesToBuffers	autoload/l9.vim	/^function l9#loadFilesToBuffers(files)$/;"	f
l9#loadScript	autoload/l9.vim	/^function l9#loadScript(text)$/;"	f
l9#modifyPathRelativeToDir	autoload/l9.vim	/^function l9#modifyPathRelativeToDir(path, dir)$/;"	f
l9#moveToBufferWindowInCurrentTabpage	autoload/l9.vim	/^function l9#moveToBufferWindowInCurrentTabpage(bufNr)$/;"	f
l9#moveToBufferWindowInOtherTabpage	autoload/l9.vim	/^function l9#moveToBufferWindowInOtherTabpage(bufNr)$/;"	f
l9#notifyBalloonly	autoload/l9.vim	/^function l9#notifyBalloonly(msg)$/;"	f
l9#notifyExternally	autoload/l9.vim	/^function l9#notifyExternally(msg)$/;"	f
l9#notifyScreen	autoload/l9.vim	/^function l9#notifyScreen(msg)$/;"	f
l9#notifyTmux	autoload/l9.vim	/^function l9#notifyTmux(msg)$/;"	f
l9#placeSign	autoload/l9.vim	/^function l9#placeSign(linehl, text, texthl, locations)$/;"	f
l9#quickfix#compareEntries	autoload/l9/quickfix.vim	/^function l9#quickfix#compareEntries(e0, e1)$/;"	f
l9#quickfix#isWindowOpened	autoload/l9/quickfix.vim	/^function l9#quickfix#isWindowOpened()$/;"	f
l9#quickfix#openIfNotEmpty	autoload/l9/quickfix.vim	/^function l9#quickfix#openIfNotEmpty(onlyRecognized, holdCursor)$/;"	f
l9#quickfix#placeSign	autoload/l9/quickfix.vim	/^function l9#quickfix#placeSign()$/;"	f
l9#quickfix#setMakeResult	autoload/l9/quickfix.vim	/^function l9#quickfix#setMakeResult(lines)$/;"	f
l9#quickfix#sort	autoload/l9/quickfix.vim	/^function l9#quickfix#sort()$/;"	f
l9#quickfix#toggleWindow	autoload/l9/quickfix.vim	/^function l9#quickfix#toggleWindow()$/;"	f
l9#readFile	autoload/l9.vim	/^function l9#readFile(...)$/;"	f
l9#removeIf	autoload/l9.vim	/^function l9#removeIf(items, expr)$/;"	f
l9#removeLinesBetween	autoload/l9.vim	/^function l9#removeLinesBetween(lines, begin, end)$/;"	f
l9#shiftWinNextTabpage	autoload/l9.vim	/^function l9#shiftWinNextTabpage()$/;"	f
l9#shiftWinPrevTabpage	autoload/l9.vim	/^function l9#shiftWinPrevTabpage()$/;"	f
l9#snipHead	autoload/l9.vim	/^function l9#snipHead(str, len, mask)$/;"	f
l9#snipMid	autoload/l9.vim	/^function l9#snipMid(str, len, mask)$/;"	f
l9#snipTail	autoload/l9.vim	/^function l9#snipTail(str, len, mask)$/;"	f
l9#tempbuffer#close	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#close(bufname)$/;"	f
l9#tempbuffer#isOpen	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#isOpen(bufname)$/;"	f
l9#tempbuffer#moveTo	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#moveTo(bufname)$/;"	f
l9#tempbuffer#openReadOnly	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#openReadOnly(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempbuffer#openScratch	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#openScratch(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempbuffer#openWritable	autoload/l9/tempbuffer.vim	/^function l9#tempbuffer#openWritable(bufname, filetype, lines, topleft, vertical, height, listener)$/;"	f
l9#tempvariables#end	autoload/l9/tempvariables.vim	/^function l9#tempvariables#end(group)$/;"	f
l9#tempvariables#getList	autoload/l9/tempvariables.vim	/^function l9#tempvariables#getList(group)$/;"	f
l9#tempvariables#set	autoload/l9/tempvariables.vim	/^function l9#tempvariables#set(group, name, value)$/;"	f
l9#tempvariables#setList	autoload/l9/tempvariables.vim	/^function l9#tempvariables#setList(group, variables)$/;"	f
l9#unique	autoload/l9.vim	/^function l9#unique(items)$/;"	f
l9#uniqueStably	autoload/l9.vim	/^function l9#uniqueStably(items)$/;"	f
l9#writeAll	autoload/l9.vim	/^function l9#writeAll()$/;"	f
l9#writeFile	autoload/l9.vim	/^function l9#writeFile(...)$/;"	f
l9#zip	autoload/l9.vim	/^function l9#zip(items)$/;"	f
lastformat	autoload/rails.vim	/^function! s:lastformat(start)$/;"	f
lastmethod	autoload/rails.vim	/^function! s:lastmethod(...)$/;"	f
lastmethodline	autoload/rails.vim	/^function! s:lastmethodline(start)$/;"	f
lastopeningline	autoload/rails.vim	/^function! s:lastopeningline(pattern,limit,start)$/;"	f
layoutEdit	autoload/rails.vim	/^function! s:layoutEdit(cmd,...)$/;"	f
layoutList	autoload/rails.vim	/^function! s:layoutList(A,L,P)$/;"	f
ldflags	ruby/command-t/Makefile	/^ldflags  = -L.  -rdynamic -Wl,-export-dynamic$/;"	m
leave	ruby/command-t/controller.rb	/^    def leave$/;"	f	class:CommandT.Controller
leave	ruby/command-t/match_window.rb	/^    def leave$/;"	f	class:CommandT.MatchWindow
libEdit	autoload/rails.vim	/^function! s:libEdit(cmd,...)$/;"	f
libList	autoload/rails.vim	/^function! s:libList(A,L,P)$/;"	f
libdir	ruby/command-t/Makefile	/^libdir = $(exec_prefix)\/lib$/;"	m
libexecdir	ruby/command-t/Makefile	/^libexecdir = $(exec_prefix)\/libexec$/;"	m
libpath	ruby/command-t/Makefile	/^libpath = . $(libdir)$/;"	m
line_offset	autoload/conque_term/conque_sole_subprocess.py	/^    line_offset = 0$/;"	v	class:ConqueSoleSubprocess
linepeak	autoload/rails.vim	/^function! s:linepeak()$/;"	f
lines	autoload/conque_term/conque.py	/^    lines = 24 # same as $LINES$/;"	v	class:Conque
lines	autoload/conque_term/conque_sole_wrapper.py	/^    lines = 24$/;"	v	class:ConqueSoleWrapper
lines	ruby/command-t/vim/screen.rb	/^      def self.lines$/;"	F	class:CommandT.VIM.Screen
listAroundFiles	autoload/fuf/mrufile.vim	/^function s:listAroundFiles(dir)$/;"	f
list_matches	ruby/command-t/controller.rb	/^    def list_matches$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
load_from_cache	autoload/neocomplcache/sources/include_complete.vim	/^function! s:load_from_cache(filename)"{{{$/;"	f
load_from_file	autoload/neocomplcache/sources/include_complete.vim	/^function! s:load_from_file(filename, filetype)"{{{$/;"	f
load_from_file_fast	autoload/neocomplcache/cache.vim	/^function! s:load_from_file_fast(lines, pattern, menu)"{{{$/;"	f
load_from_tags	autoload/neocomplcache/sources/include_complete.vim	/^function! s:load_from_tags(filename, filetype)"{{{$/;"	f
load_snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:load_snippets(snippets_file)"{{{$/;"	f
loaded_VCSCommand	plugin/vcscommand.vim	/^let loaded_VCSCommand = 1$/;"	v
loaded_VCSCommand	plugin/vcscommand.vim	/^let loaded_VCSCommand = 2$/;"	v
loaded_grep	plugin/grep.vim	/^let loaded_grep = 1$/;"	v
loaded_gsearch	plugin/gsearch.vim	/^let loaded_gsearch = 1$/;"	v
loaded_matchit	plugin/matchit.vim	/^let loaded_matchit = 1$/;"	v
loaded_mru	plugin/mru.vim	/^let loaded_mru=1$/;"	v
loaded_nerd_comments	plugin/NERD_commenter.vim	/^let loaded_nerd_comments = 1$/;"	v
loaded_nerd_tree	plugin/NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_snips	plugin/snipMate.vim	/^let loaded_snips = 1$/;"	v
localeEdit	autoload/rails.vim	/^function! s:localeEdit(cmd,...)$/;"	f
localeList	autoload/rails.vim	/^function! s:localeList(A,L,P)$/;"	f
localedir	ruby/command-t/Makefile	/^localedir = $(datarootdir)\/locale$/;"	m
localstatedir	ruby/command-t/Makefile	/^localstatedir = $(prefix)\/var$/;"	m
lock	autoload/neocomplcache.vim	/^function! s:lock()"{{{$/;"	f
lock	ruby/command-t/match_window.rb	/^    def lock$/;"	f	class:CommandT.MatchWindow
logging	plugin/autotag.vim	/^import logging$/;"	m
login	plugin/gnuchlog.vim	/^                let login = strpart(login, 0, newline)$/;"	v
login	plugin/gnuchlog.vim	/^            let login = 'unknown'$/;"	v
login	plugin/gnuchlog.vim	/^        let login = system('whoami')$/;"	v
loops	autoload/conque_term/conque_sole_communicator.py	/^        loops = 0$/;"	v
mCommandT	ruby/command-t/ext.c	/^VALUE mCommandT         = 0; \/\/ module CommandT$/;"	v
mailerEdit	autoload/rails.vim	/^function! s:mailerEdit(cmd,...)$/;"	f
mailerList	autoload/rails.vim	/^function! s:mailerList(A,L,P)$/;"	f
main_syntax	plugin/php.vim	/^  let main_syntax = 'php'$/;"	v
main_syntax	syntax/javascript.vim	/^  let main_syntax = 'javascript'$/;"	v
makeAdditionalMigemoPattern	autoload/fuf.vim	/^function s:makeAdditionalMigemoPattern(pattern)$/;"	f
makeCtagsCmd	autoload/fuf/buffertag.vim	/^function s:makeCtagsCmd(bufNr)$/;"	f
makeCurrentBehaviorSet	autoload/acp.vim	/^function s:makeCurrentBehaviorSet()$/;"	f
makeDefaultBehavior	plugin/acp.vim	/^function s:makeDefaultBehavior()$/;"	f
makeFileAbbrInfo	autoload/fuf.vim	/^function s:makeFileAbbrInfo(item, maxLenStats)$/;"	f
makeFuzzyMatchingExpr	autoload/fuf.vim	/^function s:makeFuzzyMatchingExpr(target, pattern)$/;"	f
makeItem	autoload/fuf/buffer.vim	/^function s:makeItem(nr)$/;"	f
makeItem	autoload/fuf/buffertag.vim	/^function s:makeItem(tag, itemMap)$/;"	f
makeItem	autoload/fuf/changelist.vim	/^function s:makeItem(line)$/;"	f
makeItem	autoload/fuf/jumplist.vim	/^function s:makeItem(line, bufnrPrev)$/;"	f
makeItem	autoload/fuf/quickfix.vim	/^function s:makeItem(qfItem)$/;"	f
makePartialMatchingExpr	autoload/fuf.vim	/^function s:makePartialMatchingExpr(target, pattern)$/;"	f
makeRefiningExpr	autoload/fuf.vim	/^function s:makeRefiningExpr(pattern)$/;"	f
makeSnipmateItem	autoload/acp.vim	/^function s:makeSnipmateItem(key, snip)$/;"	f
make_completion_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:make_completion_list(list, menu_pattern, kind)"{{{$/;"	f
make_quick_match_list	autoload/neocomplcache.vim	/^function! s:make_quick_match_list(list, cur_keyword_str)"{{{$/;"	f
makewithruby	autoload/rails.vim	/^function! s:makewithruby(arg,bang,...)$/;"	f
mandir	ruby/command-t/Makefile	/^mandir = $(datarootdir)\/man$/;"	m
map	ruby/command-t/controller.rb	/^    def map key, function, param = nil$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
mapForMappingDriven	autoload/acp.vim	/^function s:mapForMappingDriven()$/;"	f
mark#CurrentMark	autoload/mark.vim	/^function! mark#CurrentMark()$/;"	f
mark#DoMark	autoload/mark.vim	/^function! mark#DoMark(...) " DoMark(regexp)$/;"	f
mark#GetVisualSelectionAsLiteralPattern	autoload/mark.vim	/^function! mark#GetVisualSelectionAsLiteralPattern()$/;"	f
mark#GetVisualSelectionAsRegexp	autoload/mark.vim	/^function! mark#GetVisualSelectionAsRegexp()$/;"	f
mark#MarkCurrentWord	autoload/mark.vim	/^function! mark#MarkCurrentWord()$/;"	f
mark#MarkRegex	autoload/mark.vim	/^function! mark#MarkRegex( regexpPreset )$/;"	f
mark#SearchAnyMark	autoload/mark.vim	/^function! mark#SearchAnyMark( isBackward )$/;"	f
mark#SearchCurrentMark	autoload/mark.vim	/^function! mark#SearchCurrentMark( isBackward )$/;"	f
mark#SearchNext	autoload/mark.vim	/^function! mark#SearchNext( isBackward )$/;"	f
mark#UpdateMark	autoload/mark.vim	/^function! mark#UpdateMark()$/;"	f
mark#UpdateScope	autoload/mark.vim	/^function! mark#UpdateScope()$/;"	f
match_limit	ruby/command-t/controller.rb	/^    def match_limit$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
match_pair	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:match_pair(string, start_pattern, end_pattern, start_cnt)"{{{$/;"	f
match_text_for_idx	ruby/command-t/match_window.rb	/^    def match_text_for_idx idx$/;"	f	class:CommandT.MatchWindow
match_type	autoload/rails.vim	/^function! s:match_type(type,...)$/;"	f
match_wildcard	autoload/neocomplcache.vim	/^function! s:match_wildcard(cur_text, pattern, cur_keyword_pos)"{{{$/;"	f
matchcursor	autoload/rails.vim	/^function! s:matchcursor(pat)$/;"	f
matches=	ruby/command-t/match_window.rb	/^    def matches= matches$/;"	f	class:CommandT.MatchWindow
matchinfo_t	ruby/command-t/match.c	/^} matchinfo_t;$/;"	t	typeref:struct:__anon1	file:
math	autoload/conque_term/conque.py	/^import math$/;"	i
max_loops	autoload/conque_term/conque_sole_communicator.py	/^        max_loops = 0$/;"	v
max_score_per_char	ruby/command-t/match.c	/^    double  max_score_per_char;$/;"	m	struct:__anon1	file:
mem_key	autoload/conque_term/conque_sole_communicator.py	/^        mem_key = sys.argv[1]$/;"	v
mem_key	autoload/conque_term/conque_sole_shared_memory.py	/^    mem_key = None$/;"	v	class:ConqueSoleSharedMemory
mem_redraw_ct	autoload/conque_term/conque_sole_subprocess.py	/^    mem_redraw_ct = 0$/;"	v	class:ConqueSoleSubprocess
mem_size	autoload/conque_term/conque_sole_shared_memory.py	/^    mem_size = None$/;"	v	class:ConqueSoleSharedMemory
mem_type	autoload/conque_term/conque_sole_shared_memory.py	/^    mem_type = None$/;"	v	class:ConqueSoleSharedMemory
menuBufEnter	plugin/rails.vim	/^function! s:menuBufEnter()$/;"	f
menuBufLeave	plugin/rails.vim	/^function! s:menuBufLeave()$/;"	f
menuRoot	plugin/NERD_commenter.vim	/^        let menuRoot = '&Plugin.&comment'$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^        let menuRoot = '&comment'$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^        let menuRoot = 'comment'$/;"	v
menuRoot	plugin/NERD_commenter.vim	/^    let menuRoot = ""$/;"	v
menucmd	plugin/rails.vim	/^function! s:menucmd(priority)$/;"	f
menuprompt	plugin/rails.vim	/^function! s:menuprompt(vimcmd,prompt)$/;"	f
metalEdit	autoload/rails.vim	/^function! s:metalEdit(cmd,...)$/;"	f
metalList	autoload/rails.vim	/^function! s:metalList(A,L,P)$/;"	f
mextargs	autoload/rails.vim	/^function! s:mextargs(str,num)$/;"	f
migrationEdit	autoload/rails.vim	/^function! s:migrationEdit(cmd,...)$/;"	f
migrationList	autoload/rails.vim	/^function! s:migrationList(A,L,P)$/;"	f
migspc	autoload/rails.vim	/^function! s:migspc(line)$/;"	f
missing	ruby/command-t/extconf.rb	/^def missing item$/;"	f
mkeep	autoload/rails.vim	/^function! s:mkeep(str)$/;"	f
mmap	autoload/conque_term/conque_sole_shared_memory.py	/^import mmap$/;"	i
model	autoload/rails.vim	/^function! s:model(...)$/;"	f
modelEdit	autoload/rails.vim	/^function! s:modelEdit(cmd,...)$/;"	f
modelList	autoload/rails.vim	/^function! s:modelList(A,L,P)$/;"	f
moveToOtherTabpageOpeningBuffer	autoload/l9.vim	/^function s:moveToOtherTabpageOpeningBuffer(bufNr)$/;"	f
move_cursor_to_selected_line	ruby/command-t/match_window.rb	/^    def move_cursor_to_selected_line$/;"	f	class:CommandT.MatchWindow
msg_ct	autoload/conque_term.vim	/^                        let msg_ct = g:ConqueTerm_MsgCt + 1$/;"	v
msg_ct	autoload/conque_term.vim	/^    let msg_ct = 1$/;"	v
msg_file	autoload/conque_term.vim	/^    let msg_file = s:scriptdirpy . 'version.vim'$/;"	v
msg_show	autoload/conque_term.vim	/^                        let msg_show = 0$/;"	v
msg_show	autoload/conque_term.vim	/^    let msg_show = 1$/;"	v
name	plugin/gnuchlog.vim	/^                        let name = strpart(name, 0, amp) . toupper(login[0]) .$/;"	v
name	plugin/gnuchlog.vim	/^                        let name = strpart(name, 0, comma)$/;"	v
name	plugin/gnuchlog.vim	/^                    let name = substitute(line,'^\\%([^:]*:\\)\\{4}\\([^:]*\\):.*$','\\1','')$/;"	v
name	plugin/gnuchlog.vim	/^                let name = $NAME$/;"	v
name	plugin/gnuchlog.vim	/^                let name = toupper(login[0]) . strpart(login, 1)$/;"	v
neocomplcache	plugin/neocomplcache.vim	/^  augroup neocomplcache$/;"	a
neocomplcache#add_dictionaries	autoload/neocomplcache.vim	/^function! neocomplcache#add_dictionaries(dictionaries)"{{{$/;"	f
neocomplcache#auto_complete	autoload/neocomplcache.vim	/^function! neocomplcache#auto_complete(findstart, base)"{{{$/;"	f
neocomplcache#available_complfuncs	autoload/neocomplcache.vim	/^function! neocomplcache#available_complfuncs()"{{{$/;"	f
neocomplcache#available_ftplugins	autoload/neocomplcache.vim	/^function! neocomplcache#available_ftplugins()"{{{$/;"	f
neocomplcache#available_loaded_ftplugins	autoload/neocomplcache.vim	/^function! neocomplcache#available_loaded_ftplugins()"{{{$/;"	f
neocomplcache#available_plugins	autoload/neocomplcache.vim	/^function! neocomplcache#available_plugins()"{{{$/;"	f
neocomplcache#available_sources	autoload/neocomplcache.vim	/^function! neocomplcache#available_sources()"{{{$/;"	f
neocomplcache#cache#check_dir	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#check_dir(cache_dir)"{{{$/;"	f
neocomplcache#cache#check_old_cache	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#check_old_cache(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#encode_name	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#encode_name(cache_dir, filename)$/;"	f
neocomplcache#cache#filereadable	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#filereadable(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#getfilename	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#getfilename(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#index_load_from_cache	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#index_load_from_cache(cache_dir, filename, completion_length)"{{{$/;"	f
neocomplcache#cache#load_from_cache	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#load_from_cache(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#load_from_file	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#load_from_file(filename, pattern, mark)"{{{$/;"	f
neocomplcache#cache#load_from_tags	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#load_from_tags(cache_dir, filename, tags_list, mark, filetype)"{{{$/;"	f
neocomplcache#cache#readfile	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#readfile(cache_dir, filename)"{{{$/;"	f
neocomplcache#cache#save_cache	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#save_cache(cache_dir, filename, keyword_list)"{{{$/;"	f
neocomplcache#cache#writefile	autoload/neocomplcache/cache.vim	/^function! neocomplcache#cache#writefile(cache_dir, filename, list)"{{{$/;"	f
neocomplcache#cancel_popup	autoload/neocomplcache.vim	/^function! neocomplcache#cancel_popup()"{{{$/;"	f
neocomplcache#check_match_filter	autoload/neocomplcache.vim	/^function! neocomplcache#check_match_filter(cur_keyword_str, ...)"{{{$/;"	f
neocomplcache#close_popup	autoload/neocomplcache.vim	/^function! neocomplcache#close_popup()"{{{$/;"	f
neocomplcache#compare_rank	autoload/neocomplcache.vim	/^function! neocomplcache#compare_rank(i1, i2)$/;"	f
neocomplcache#complete_common_string	autoload/neocomplcache.vim	/^function! neocomplcache#complete_common_string()"{{{$/;"	f
neocomplcache#dictionary_filter	autoload/neocomplcache.vim	/^function! neocomplcache#dictionary_filter(dictionary, cur_keyword_str, completion_length)"{{{$/;"	f
neocomplcache#disable	autoload/neocomplcache.vim	/^function! neocomplcache#disable()"{{{$/;"	f
neocomplcache#do_auto_complete	autoload/neocomplcache.vim	/^function! neocomplcache#do_auto_complete(is_moved)"{{{$/;"	f
neocomplcache#dup_filter	autoload/neocomplcache.vim	/^function! neocomplcache#dup_filter(list)"{{{$/;"	f
neocomplcache#enable	autoload/neocomplcache.vim	/^function! neocomplcache#enable() "{{{$/;"	f
neocomplcache#escape_match	autoload/neocomplcache.vim	/^function! neocomplcache#escape_match(str)"{{{$/;"	f
neocomplcache#exists_echodoc	autoload/neocomplcache.vim	/^function! neocomplcache#exists_echodoc()"{{{$/;"	f
neocomplcache#filetype_complete	autoload/neocomplcache.vim	/^function! neocomplcache#filetype_complete(arglead, cmdline, cursorpos)"{{{$/;"	f
neocomplcache#fuzzy_filter	autoload/neocomplcache.vim	/^function! neocomplcache#fuzzy_filter(list, cur_keyword_str)"{{{$/;"	f
neocomplcache#get_auto_completion_length	autoload/neocomplcache.vim	/^function! neocomplcache#get_auto_completion_length(plugin_name)"{{{$/;"	f
neocomplcache#get_completion_length	autoload/neocomplcache.vim	/^function! neocomplcache#get_completion_length(plugin_name)"{{{$/;"	f
neocomplcache#get_context_filetype	autoload/neocomplcache.vim	/^function! neocomplcache#get_context_filetype(...)"{{{$/;"	f
neocomplcache#get_cur_text	autoload/neocomplcache.vim	/^function! neocomplcache#get_cur_text(...)"{{{$/;"	f
neocomplcache#get_keyword_pattern	autoload/neocomplcache.vim	/^function! neocomplcache#get_keyword_pattern(...)"{{{$/;"	f
neocomplcache#get_keyword_pattern_end	autoload/neocomplcache.vim	/^function! neocomplcache#get_keyword_pattern_end(...)"{{{$/;"	f
neocomplcache#get_next_keyword_pattern	autoload/neocomplcache.vim	/^function! neocomplcache#get_next_keyword_pattern(...)"{{{$/;"	f
neocomplcache#get_plugin_rank	autoload/neocomplcache.vim	/^function! neocomplcache#get_plugin_rank(plugin_name)"{{{$/;"	f
neocomplcache#get_prev_word	autoload/neocomplcache.vim	/^function! neocomplcache#get_prev_word(cur_keyword_str)"{{{$/;"	f
neocomplcache#get_source_filetypes	autoload/neocomplcache.vim	/^function! neocomplcache#get_source_filetypes(filetype)"{{{$/;"	f
neocomplcache#get_sources_list	autoload/neocomplcache.vim	/^function! neocomplcache#get_sources_list(dictionary, filetype)"{{{$/;"	f
neocomplcache#get_syn_name	autoload/neocomplcache.vim	/^function! neocomplcache#get_syn_name(is_trans)"{{{$/;"	f
neocomplcache#head_filter	autoload/neocomplcache.vim	/^function! neocomplcache#head_filter(list, cur_keyword_str)"{{{$/;"	f
neocomplcache#head_match	autoload/neocomplcache.vim	/^function! neocomplcache#head_match(checkstr, headstr)"{{{$/;"	f
neocomplcache#is_auto_complete	autoload/neocomplcache.vim	/^function! neocomplcache#is_auto_complete()"{{{$/;"	f
neocomplcache#is_auto_select	autoload/neocomplcache.vim	/^function! neocomplcache#is_auto_select()"{{{$/;"	f
neocomplcache#is_enabled	autoload/neocomplcache.vim	/^function! neocomplcache#is_enabled()"{{{$/;"	f
neocomplcache#is_eskk_enabled	autoload/neocomplcache.vim	/^function! neocomplcache#is_eskk_enabled()"{{{$/;"	f
neocomplcache#is_locked	autoload/neocomplcache.vim	/^function! neocomplcache#is_locked(...)"{{{$/;"	f
neocomplcache#is_text_mode	autoload/neocomplcache.vim	/^function! neocomplcache#is_text_mode()"{{{$/;"	f
neocomplcache#is_win	autoload/neocomplcache.vim	/^function! neocomplcache#is_win()"{{{$/;"	f
neocomplcache#keyword_escape	autoload/neocomplcache.vim	/^function! neocomplcache#keyword_escape(cur_keyword_str)"{{{$/;"	f
neocomplcache#keyword_filter	autoload/neocomplcache.vim	/^function! neocomplcache#keyword_filter(list, cur_keyword_str)"{{{$/;"	f
neocomplcache#manual_complete	autoload/neocomplcache.vim	/^function! neocomplcache#manual_complete(findstart, base)"{{{$/;"	f
neocomplcache#manual_filename_complete	autoload/neocomplcache.vim	/^function! neocomplcache#manual_filename_complete()"{{{$/;"	f
neocomplcache#manual_keyword_complete	autoload/neocomplcache.vim	/^function! neocomplcache#manual_keyword_complete()"{{{$/;"	f
neocomplcache#manual_omni_complete	autoload/neocomplcache.vim	/^function! neocomplcache#manual_omni_complete()"{{{$/;"	f
neocomplcache#match_word	autoload/neocomplcache.vim	/^function! neocomplcache#match_word(cur_text, ...)"{{{$/;"	f
neocomplcache#print_caching	autoload/neocomplcache.vim	/^function! neocomplcache#print_caching(string)"{{{$/;"	f
neocomplcache#print_error	autoload/neocomplcache.vim	/^function! neocomplcache#print_error(string)"{{{$/;"	f
neocomplcache#print_warning	autoload/neocomplcache.vim	/^function! neocomplcache#print_warning(string)"{{{$/;"	f
neocomplcache#rand	autoload/neocomplcache.vim	/^function! neocomplcache#rand(max)"{{{$/;"	f
neocomplcache#set_completion_length	autoload/neocomplcache.vim	/^function! neocomplcache#set_completion_length(plugin_name, length)"{{{$/;"	f
neocomplcache#set_dictionary_helper	autoload/neocomplcache.vim	/^function! neocomplcache#set_dictionary_helper(variable, keys, pattern)"{{{$/;"	f
neocomplcache#smart_close_popup	autoload/neocomplcache.vim	/^function! neocomplcache#smart_close_popup()"{{{$/;"	f
neocomplcache#sources#abbrev_complete#define	autoload/neocomplcache/sources/abbrev_complete.vim	/^function! neocomplcache#sources#abbrev_complete#define()"{{{$/;"	f
neocomplcache#sources#buffer_complete#caching_current_cache_line	autoload/neocomplcache/sources/buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#caching_current_cache_line()"{{{$/;"	f
neocomplcache#sources#buffer_complete#define	autoload/neocomplcache/sources/buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#define()"{{{$/;"	f
neocomplcache#sources#buffer_complete#get_frequencies	autoload/neocomplcache/sources/buffer_complete.vim	/^function! neocomplcache#sources#buffer_complete#get_frequencies()"{{{$/;"	f
neocomplcache#sources#completefunc_complete#call_completefunc	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! neocomplcache#sources#completefunc_complete#call_completefunc(funcname)"{{{$/;"	f
neocomplcache#sources#completefunc_complete#define	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! neocomplcache#sources#completefunc_complete#define()"{{{$/;"	f
neocomplcache#sources#dictionary_complete#define	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! neocomplcache#sources#dictionary_complete#define()"{{{$/;"	f
neocomplcache#sources#filename_complete#define	autoload/neocomplcache/sources/filename_complete.vim	/^function! neocomplcache#sources#filename_complete#define()"{{{$/;"	f
neocomplcache#sources#include_complete#define	autoload/neocomplcache/sources/include_complete.vim	/^function! neocomplcache#sources#include_complete#define()"{{{$/;"	f
neocomplcache#sources#include_complete#get_include_files	autoload/neocomplcache/sources/include_complete.vim	/^function! neocomplcache#sources#include_complete#get_include_files(bufnumber)"{{{$/;"	f
neocomplcache#sources#keyword_complete#define	autoload/neocomplcache/sources/keyword_complete.vim	/^function! neocomplcache#sources#keyword_complete#define()"{{{$/;"	f
neocomplcache#sources#omni_complete#define	autoload/neocomplcache/sources/omni_complete.vim	/^function! neocomplcache#sources#omni_complete#define()"{{{$/;"	f
neocomplcache#sources#snippets_complete#define	autoload/neocomplcache/sources/snippets_complete.vim	/^function! neocomplcache#sources#snippets_complete#define()"{{{$/;"	f
neocomplcache#sources#snippets_complete#expandable	autoload/neocomplcache/sources/snippets_complete.vim	/^function! neocomplcache#sources#snippets_complete#expandable()"{{{$/;"	f
neocomplcache#sources#syntax_complete#define	autoload/neocomplcache/sources/syntax_complete.vim	/^function! neocomplcache#sources#syntax_complete#define()"{{{$/;"	f
neocomplcache#sources#tags_complete#define	autoload/neocomplcache/sources/tags_complete.vim	/^function! neocomplcache#sources#tags_complete#define()"{{{$/;"	f
neocomplcache#sources#vim_complete#define	autoload/neocomplcache/sources/vim_complete.vim	/^function! neocomplcache#sources#vim_complete#define()"{{{$/;"	f
neocomplcache#sources#vim_complete#get_command	autoload/neocomplcache/sources/vim_complete.vim	/^function! neocomplcache#sources#vim_complete#get_command(cur_text)"{{{$/;"	f
neocomplcache#sources#vim_complete#get_cur_text	autoload/neocomplcache/sources/vim_complete.vim	/^function! neocomplcache#sources#vim_complete#get_cur_text()"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#augroup	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#augroup(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#autocmd_args	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#autocmd_args(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#buffer	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#buffer(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#colorscheme_args	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#colorscheme_args(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#command	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#command(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#command_args	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#command_args(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#custom	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#custom(command_name, cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#customlist	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#customlist(command_name, cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#dir	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#dir(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#environment	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#environment(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#event	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#event(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#expand	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#expand(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#expression	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#expression(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#feature	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#feature(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#file	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#file(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#filetype	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#filetype(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#function	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#function(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#get_command_completion	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#get_command_completion(command_name, cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#get_completion_name	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#get_completion_name(command_name)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#help	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#help(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#highlight	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#highlight(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#let	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#let(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#mapping	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#mapping(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#menu	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#menu(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#on_filetype	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#on_filetype()"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#option	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#option(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#recaching	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#recaching(bufname)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#shellcmd	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#shellcmd(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#tag	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#tag(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#tag_listfiles	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#tag_listfiles(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#var	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#var(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#sources#vim_complete#helper#var_dictionary	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! neocomplcache#sources#vim_complete#helper#var_dictionary(cur_text, cur_keyword_str)"{{{$/;"	f
neocomplcache#start_manual_complete	autoload/neocomplcache.vim	/^function! neocomplcache#start_manual_complete(complfunc_name)"{{{$/;"	f
neocomplcache#start_manual_complete_list	autoload/neocomplcache.vim	/^function! neocomplcache#start_manual_complete_list(cur_keyword_pos, cur_keyword_str, complete_words)"{{{$/;"	f
neocomplcache#system	autoload/neocomplcache.vim	/^function! neocomplcache#system(str, ...)"{{{$/;"	f
neocomplcache#trunk_string	autoload/neocomplcache.vim	/^function! neocomplcache#trunk_string(string, max)"{{{$/;"	f
neocomplcache#undo_completion	autoload/neocomplcache.vim	/^function! neocomplcache#undo_completion()"{{{$/;"	f
neocomplcache#unpack_dictionary	autoload/neocomplcache.vim	/^function! neocomplcache#unpack_dictionary(dict)"{{{$/;"	f
neocomplcache#unpack_dictionary_dictionary	autoload/neocomplcache.vim	/^function! neocomplcache#unpack_dictionary_dictionary(dict)"{{{$/;"	f
neocomplcache#used_match_filter	autoload/neocomplcache.vim	/^function! neocomplcache#used_match_filter()"{{{$/;"	f
neocomplcache#util#truncate	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#truncate(str, num)"{{{$/;"	f
neocomplcache#util#wcswidth	autoload/neocomplcache/util.vim	/^function! neocomplcache#util#wcswidth(str)"{{{$/;"	f
neocomplcache#within_comment	autoload/neocomplcache.vim	/^function! neocomplcache#within_comment()"{{{$/;"	f
never_show_dot_files	ruby/command-t/match.c	/^    int     never_show_dot_files;   \/\/ boolean$/;"	m	struct:__anon1	file:
new_gnu_changelog_entry	plugin/gnuchlog.vim	/^function! s:new_gnu_changelog_entry(filename, funcname)$/;"	f
newline	plugin/gnuchlog.vim	/^            let newline = stridx(hostname, "\\n")$/;"	v
newline	plugin/gnuchlog.vim	/^            let newline = stridx(login, "\\n")$/;"	v
nextBufferName	plugin/NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
observerEdit	autoload/rails.vim	/^function! s:observerEdit(cmd,...)$/;"	f
observerList	autoload/rails.vim	/^function! s:observerList(A,L,P)$/;"	f
offset	autoload/conque_term/conque_sole.py	/^    offset = 0$/;"	v	class:ConqueSole
oldincludedir	ruby/command-t/Makefile	/^oldincludedir = $(DESTDIR)\/usr\/include$/;"	m
onBufDelete	autoload/l9/tempbuffer.vim	/^function s:onBufDelete(bufname)$/;"	f
onBufWriteCmd	autoload/l9/tempbuffer.vim	/^function s:onBufWriteCmd(bufname)$/;"	f
onCommandPre	autoload/fuf.vim	/^function s:onCommandPre()$/;"	f
on_hold_i	autoload/neocomplcache.vim	/^function! s:on_hold_i()"{{{$/;"	f
on_insert_enter	autoload/neocomplcache.vim	/^function! s:on_insert_enter()"{{{$/;"	f
on_insert_leave	autoload/neocomplcache.vim	/^function! s:on_insert_leave()"{{{$/;"	f
on_moved_i	autoload/neocomplcache.vim	/^function! s:on_moved_i()"{{{$/;"	f
open	autoload/conque_term/conque.py	/^    def open(self):$/;"	m	class:Conque
open	autoload/conque_term/conque_sole.py	/^    def open(self):$/;"	m	class:ConqueSole
open	autoload/conque_term/conque_sole_subprocess.py	/^    def open(self, cmd, mem_key, options={}):$/;"	m	class:ConqueSoleSubprocess
open	autoload/conque_term/conque_sole_wrapper.py	/^    def open(self, cmd, lines, columns, python_exe='python.exe', communicator_py='conque_sole_communicator.py', options={}):$/;"	m	class:ConqueSoleWrapper
open	autoload/conque_term/conque_subprocess.py	/^    def open(self, command, env={}):$/;"	m	class:ConqueSubprocess
openBookmark	plugin/NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	plugin/NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	plugin/NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	plugin/NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	plugin/NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
open_selection	ruby/command-t/controller.rb	/^    def open_selection selection, options = {}$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
opfunc	plugin/surround.vim	/^function! s:opfunc(type,...) " {{{1$/;"	f
opfunc2	plugin/surround.vim	/^function! s:opfunc2(arg)$/;"	f
optflags	ruby/command-t/Makefile	/^optflags = -O3$/;"	m
options	autoload/conque_term/conque_sole_communicator.py	/^        options = {'LINES': console_height, 'COLUMNS': console_width, 'CODE_PAGE': code_page, 'FAST_MODE': fast_mode}$/;"	v
opts	autoload/rails.vim	/^function! s:opts()$/;"	f
os	autoload/conque_term/conque_sole_subprocess.py	/^import os$/;"	i
os	autoload/conque_term/conque_subprocess.py	/^import os$/;"	i
os	autoload/l9/async.py	/^import os$/;"	i
os	plugin/autotag.vim	/^import os$/;"	m
os.path	plugin/autotag.vim	/^import os.path$/;"	m
output_blocks	autoload/conque_term/conque_sole_subprocess.py	/^    output_blocks = 1$/;"	v	class:ConqueSoleSubprocess
output_keyword	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:output_keyword(name)"{{{$/;"	f
padding_for_selected_match	ruby/command-t/match_window.rb	/^    def padding_for_selected_match str$/;"	f	class:CommandT.MatchWindow
parseChangesLine	autoload/fuf/changelist.vim	/^function s:parseChangesLine(line)$/;"	f
parseHelpTagEntry	autoload/fuf/help.vim	/^function s:parseHelpTagEntry(line, tagFile)$/;"	f
parseHelpTagFiles	autoload/fuf/help.vim	/^function s:parseHelpTagFiles(tagFiles, key)$/;"	f
parseJumpsLine	autoload/fuf/jumplist.vim	/^function s:parseJumpsLine(line, bufnrPrev)$/;"	f
parseJumpsLine	autoload/fuf/quickfix.vim	/^function s:parseJumpsLine(line)$/;"	f
parseTagFiles	autoload/fuf/tag.vim	/^function s:parseTagFiles(tagFiles, key)$/;"	f
parseTagFiles	autoload/fuf/taggedfile.vim	/^function s:parseTagFiles(tagFiles, key)$/;"	f
parseTagLine	autoload/fuf/buffertag.vim	/^function s:parseTagLine(line)$/;"	f
parse_csi	autoload/conque_term/conque.py	/^    def parse_csi(self, s):$/;"	m	class:Conque
path=	ruby/command-t/finder.rb	/^    def path= path$/;"	f	class:CommandT.Finder
path=	ruby/command-t/scanner/file_scanner.rb	/^    def path= str$/;"	f	class:CommandT.FileScanner
path_excluded?	ruby/command-t/scanner/file_scanner.rb	/^    def path_excluded? path$/;"	f	class:CommandT.FileScanner
pathjoin	autoload/rails.vim	/^function! s:pathjoin(...) abort$/;"	f
paths	ruby/command-t/scanner/buffer_scanner.rb	/^    def paths$/;"	f	class:CommandT.BufferScanner
paths	ruby/command-t/scanner/file_scanner.rb	/^    def paths$/;"	f	class:CommandT.FileScanner
pathsplit	autoload/rails.vim	/^function! s:pathsplit(path) abort$/;"	f
pdfdir	ruby/command-t/Makefile	/^pdfdir = $(docdir)$/;"	m
php_sync_method	plugin/php.vim	/^    let php_sync_method=-1$/;"	v
php_sync_method	plugin/php.vim	/^    let php_sync_method=php_minlines$/;"	v
pickle	autoload/conque_term/conque_sole_shared_memory.py	/^    import cPickle as pickle$/;"	i
pickle	autoload/conque_term/conque_sole_shared_memory.py	/^    import pickle$/;"	i
pid	autoload/conque_term/conque_sole_subprocess.py	/^    pid = None$/;"	v	class:ConqueSoleSubprocess
pid	autoload/conque_term/conque_sole_wrapper.py	/^    pid = None$/;"	v	class:ConqueSoleWrapper
pid	autoload/conque_term/conque_subprocess.py	/^    pid = 0$/;"	v	class:ConqueSubprocess
plain_text	autoload/conque_term/conque.py	/^    def plain_text(self, input):$/;"	m	class:Conque
plain_text	autoload/conque_term/conque_sole.py	/^    def plain_text(self, line_nr, text, attributes, stats):$/;"	m	class:ConqueSole
pluginEdit	autoload/rails.vim	/^function! s:pluginEdit(cmd,...)$/;"	f
pluginList	autoload/rails.vim	/^function! s:pluginList(A,L,P)$/;"	f
point_in_region	autoload/zencoding.vim	/^function! s:point_in_region(point, region)$/;"	f
pop_command	autoload/rails.vim	/^function! s:pop_command()$/;"	f
prefix	ruby/command-t/Makefile	/^prefix = $(DESTDIR)\/home\/baguo\/.rvm\/rubies\/ruby-1.9.2-p180$/;"	m
pregPattern_D	plugin/php.vim	/^      function! s:pregPattern_D(open, close)$/;"	f
pregPattern_S	plugin/php.vim	/^      function! s:pregPattern_S(open, close)$/;"	f
preload	ruby/command-t/Makefile	/^preload = $/;"	m
prephelp	autoload/rails.vim	/^function! s:prephelp()$/;"	f
previewNode	plugin/NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
print_active_worker_keys	autoload/l9/async.py	/^    def print_active_worker_keys(self):$/;"	m	class:Asyncer
print_error	ruby/command-t/match_window.rb	/^    def print_error msg$/;"	f	class:CommandT.MatchWindow
print_match	ruby/command-t/match_window.rb	/^    def print_match idx$/;"	f	class:CommandT.MatchWindow
print_matches	ruby/command-t/match_window.rb	/^    def print_matches$/;"	f	class:CommandT.MatchWindow
print_no_such_file_or_directory	ruby/command-t/match_window.rb	/^    def print_no_such_file_or_directory$/;"	f	class:CommandT.MatchWindow
print_output	autoload/l9/async.py	/^    def print_output(self, var_key):$/;"	m	class:Asyncer
print_snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:print_snippets(filetype)"{{{$/;"	f
print_source	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:print_source(name)"{{{$/;"	f
print_worker_keys	autoload/l9/async.py	/^    def print_worker_keys(self):$/;"	m	class:Asyncer
proc	autoload/conque_term/conque.py	/^    proc = None$/;"	v	class:Conque
proc	autoload/conque_term/conque_sole_communicator.py	/^        proc = ConqueSoleSubprocess()$/;"	v
proc	autoload/conque_term/conque_sole_wrapper.py	/^    proc = None$/;"	v	class:ConqueSoleWrapper
process	plugin/surround.vim	/^function! s:process(string)$/;"	f
promptToDelBuffer	nerdtree_plugin/fs_menu.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
promptToDelBuffer	plugin/NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
prune_colors	autoload/conque_term/conque.py	/^    def prune_colors(self):$/;"	m	class:Conque
psdir	ruby/command-t/Makefile	/^psdir = $(docdir)$/;"	m
pty	autoload/conque_term/conque_subprocess.py	/^import pty$/;"	i
push_chdir	autoload/rails.vim	/^function! s:push_chdir(...)$/;"	f
put	autoload/l9/async.py	/^    def put(self, executor):$/;"	m	class:Worker
putCursorInTreeWin	plugin/NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	plugin/NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
pwd	ruby/command-t/vim.rb	/^    def self.pwd$/;"	F	class:CommandT.VIM
rails#STATUSLINE	autoload/rails.vim	/^function! rails#STATUSLINE(...)$/;"	f
rails#app	autoload/rails.vim	/^function! rails#app(...)$/;"	f
rails#buffer	autoload/rails.vim	/^function! rails#buffer(...)$/;"	f
rails#cache_clear	autoload/rails.vim	/^function! rails#cache_clear(...)$/;"	f
rails#camelize	autoload/rails.vim	/^function! rails#camelize(str)$/;"	f
rails#log_syntax	autoload/rails.vim	/^function! rails#log_syntax()$/;"	f
rails#new_app_command	autoload/rails.vim	/^function! rails#new_app_command(bang,...)$/;"	f
rails#pluralize	autoload/rails.vim	/^function! rails#pluralize(word)$/;"	f
rails#singularize	autoload/rails.vim	/^function! rails#singularize(word)$/;"	f
rails#statusline	autoload/rails.vim	/^function! rails#statusline(...)$/;"	f
rails#underscore	autoload/rails.vim	/^function! rails#underscore(str)$/;"	f
railsPluginAbolish	plugin/rails.vim	/^augroup railsPluginAbolish$/;"	a
railsPluginAuto	autoload/rails.vim	/^augroup railsPluginAuto$/;"	a
railsPluginDetect	plugin/rails.vim	/^augroup railsPluginDetect$/;"	a
railsPluginMenu	plugin/rails.vim	/^augroup railsPluginMenu$/;"	a
rank_caching_current_cache_line	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:rank_caching_current_cache_line(is_force)"{{{$/;"	f
re	autoload/conque_term/conque.py	/^import re$/;"	i
re	autoload/conque_term/conque_globals.py	/^import re$/;"	i
re	autoload/conque_term/conque_sole_subprocess.py	/^import re$/;"	i
read	autoload/conque_term/conque.py	/^    def read(self, timeout=1, set_cursor=True, return_output=False, update_buffer=True):$/;"	m	class:Conque
read	autoload/conque_term/conque_sole.py	/^    def read(self, timeout=1, set_cursor=True, return_output=False, update_buffer=True):$/;"	m	class:ConqueSole
read	autoload/conque_term/conque_sole_shared_memory.py	/^    def read(self, chars=1, start=0):$/;"	m	class:ConqueSoleSharedMemory
read	autoload/conque_term/conque_sole_subprocess.py	/^    def read(self):$/;"	m	class:ConqueSoleSubprocess
read	autoload/conque_term/conque_sole_wrapper.py	/^    def read(self, start_line, num_lines, timeout=0):$/;"	m	class:ConqueSoleWrapper
read	autoload/conque_term/conque_subprocess.py	/^    def read(self, timeout=1):$/;"	m	class:ConqueSubprocess
read_count	autoload/conque_term/conque.py	/^    read_count = 0$/;"	v	class:Conque
readable_app	autoload/rails.vim	/^function! s:readable_app() dict abort$/;"	f
readable_calculate_file_type	autoload/rails.vim	/^function! s:readable_calculate_file_type() dict abort$/;"	f
readable_controller_name	autoload/rails.vim	/^function! s:readable_controller_name(...) dict abort$/;"	f
readable_default_rake_task	autoload/rails.vim	/^function! s:readable_default_rake_task(lnum) dict abort$/;"	f
readable_define_pattern	autoload/rails.vim	/^function! s:readable_define_pattern() dict abort$/;"	f
readable_end_of	autoload/rails.vim	/^function! s:readable_end_of(lnum) dict abort$/;"	f
readable_last_format	autoload/rails.vim	/^function! s:readable_last_format(start) dict abort$/;"	f
readable_last_method	autoload/rails.vim	/^function! s:readable_last_method(start) dict abort$/;"	f
readable_last_method_line	autoload/rails.vim	/^function! s:readable_last_method_line(start) dict abort$/;"	f
readable_last_opening_line	autoload/rails.vim	/^function! s:readable_last_opening_line(start,pattern,limit) dict abort$/;"	f
readable_line_count	autoload/rails.vim	/^function! s:readable_line_count() dict abort$/;"	f
readable_model_name	autoload/rails.vim	/^function! s:readable_model_name(...) dict abort$/;"	f
readable_preview_urls	autoload/rails.vim	/^function! s:readable_preview_urls(lnum) dict abort$/;"	f
readable_related	autoload/rails.vim	/^function! s:readable_related(...) dict abort$/;"	f
readable_type_name	autoload/rails.vim	/^function! s:readable_type_name() dict abort$/;"	f
readfile	autoload/rails.vim	/^function! s:readfile(path,...)$/;"	f
recaching	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:recaching(filetype)"{{{$/;"	f
recaching	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:recaching(filetype)"{{{$/;"	f
record_output	autoload/l9/async.py	/^    def record_output(self, line):$/;"	m	class:Worker
recursive_match	ruby/command-t/match.c	/^double recursive_match(matchinfo_t *m,  \/\/ sharable meta-data$/;"	f
redraw	plugin/surround.vim	/^function! s:redraw()$/;"	f
redraw	ruby/command-t/prompt.rb	/^    def redraw$/;"	f	class:CommandT.Prompt
refreshCurrent	plugin/NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	plugin/NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
region_in_region	autoload/zencoding.vim	/^function! s:region_in_region(outer, inner)$/;"	f
region_is_valid	autoload/zencoding.vim	/^function! s:region_is_valid(region)$/;"	f
registerCoverage	autoload/fuf/coveragefile.vim	/^function s:registerCoverage()$/;"	f
register_for_key_presses	ruby/command-t/controller.rb	/^    def register_for_key_presses$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
reindent	plugin/surround.vim	/^function! s:reindent() " {{{1$/;"	f
relative_path_under_working_directory	ruby/command-t/vim/path_utilities.rb	/^      def relative_path_under_working_directory path$/;"	f	class:CommandT.VIM.PathUtilities
relglob	autoload/rails.vim	/^function! s:relglob(...)$/;"	f
removeItemFromCache	autoload/fuf/mrufile.vim	/^function s:removeItemFromCache(word)$/;"	f
remove_next_keyword	autoload/neocomplcache.vim	/^function! s:remove_next_keyword(plugin_name, list)"{{{$/;"	f
renderBookmarks	plugin/NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	plugin/NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	plugin/NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
renewCachesOfAllModes	plugin/fuf.vim	/^function s:renewCachesOfAllModes()$/;"	f
repeat	plugin/surround.vim	/^function! s:repeat(str,count)$/;"	f
res	autoload/conque_term/conque_sole_communicator.py	/^        res = proc.open(cmd_line, mem_key, options)$/;"	v
reset_console	autoload/conque_term/conque_sole_subprocess.py	/^    def reset_console(self, buf_info, add_block=True):$/;"	m	class:ConqueSoleSubprocess
reset_size	autoload/conque_term/conque_screen.py	/^    def reset_size(self, line):$/;"	m	class:ConqueScreen
resetomnicomplete	autoload/rails.vim	/^function! s:resetomnicomplete()$/;"	f
restore	ruby/command-t/settings.rb	/^    def restore$/;"	f	class:CommandT.Settings
restoreScreenState	plugin/NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
restoreTempOptions	autoload/acp.vim	/^function s:restoreTempOptions(group)$/;"	f
restore_window_dimensions	ruby/command-t/match_window.rb	/^    def restore_window_dimensions$/;"	f	class:CommandT.MatchWindow
resume	autoload/conque_term/conque.py	/^    def resume(self):$/;"	m	class:Conque
resume	autoload/conque_term/conque_sole.py	/^    def resume(self):$/;"	m	class:ConqueSole
resume	autoload/conque_term/conque_sole_wrapper.py	/^    def resume(self):$/;"	m	class:ConqueSoleWrapper
revealBookmark	plugin/NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
rgb	colors/desert256.vim	/^    fun <SID>rgb(rgb)$/;"	f
rgb	colors/jellybeans.vim	/^fun! s:rgb(rgb)$/;"	f
rgb_color	colors/desert256.vim	/^    fun <SID>rgb_color(x, y, z)$/;"	f
rgb_color	colors/jellybeans.vim	/^fun! s:rgb_color(x, y, z)$/;"	f
rgb_level	colors/desert256.vim	/^    fun <SID>rgb_level(n)$/;"	f
rgb_level	colors/jellybeans.vim	/^fun! s:rgb_level(n)$/;"	f
rgb_number	colors/desert256.vim	/^    fun <SID>rgb_number(x)$/;"	f
rgb_number	colors/jellybeans.vim	/^fun! s:rgb_number(x)$/;"	f
ridir	ruby/command-t/Makefile	/^ridir = $(datarootdir)\/$(RI_BASE_NAME)$/;"	m
rquote	autoload/rails.vim	/^function! s:rquote(str)$/;"	f
ruby	ruby/command-t/Makefile	/^ruby = \/home\/baguo\/.rvm\/rubies\/ruby-1.9.2-p180\/bin\/ruby$/;"	m
ruby_inspect	ruby/command-t/ext.h	36;"	d
ruby_operators	colors/herald.vim	/^let ruby_operators = 1$/;"	v
ruby_version	ruby/command-t/Makefile	/^ruby_version = 1.9.1$/;"	m
rubyhdrdir	ruby/command-t/Makefile	/^rubyhdrdir = $(includedir)\/$(RUBY_BASE_NAME)-$(ruby_version)$/;"	m
rubylibdir	ruby/command-t/Makefile	/^rubylibdir = $(rubylibprefix)\/$(ruby_version)$/;"	m
rubylibprefix	ruby/command-t/Makefile	/^rubylibprefix = $(libdir)\/$(RUBY_BASE_NAME)$/;"	m
run	autoload/l9/async.py	/^    def run(self):$/;"	m	class:Worker
s	plugin/surround.vim	/^      vmap  s    <Plug>Vsurround$/;"	m
s:ABBR_SNIP_MASK	autoload/fuf.vim	/^let s:ABBR_SNIP_MASK = '...'$/;"	v
s:ASYNC_PY_PATH	autoload/l9/async.vim	/^let s:ASYNC_PY_PATH = fnamemodify(expand('<sfile>:p:h'), ':p') . 'async.py'$/;"	v
s:BaseTag	plugin/tagbar.vim	/^let s:BaseTag = {}$/;"	v
s:Bookmark	plugin/NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:DATA_FILE_VERSION	autoload/fuf.vim	/^let s:DATA_FILE_VERSION = 400$/;"	v
s:FUF_BUF_NAME	autoload/fuf.vim	/^let s:FUF_BUF_NAME = '[fuf]'$/;"	v
s:FileInfo	plugin/tagbar.vim	/^let s:FileInfo = {}$/;"	v
s:GROUP0	autoload/acp.vim	/^let s:GROUP0 = 0$/;"	v
s:GROUP1	autoload/acp.vim	/^let s:GROUP1 = 1$/;"	v
s:KeyMap	plugin/NERD_tree.vim	/^let s:KeyMap = {}$/;"	v
s:KindheaderTag	plugin/tagbar.vim	/^let s:KindheaderTag = copy(s:BaseTag)$/;"	v
s:L9_VERSION_CURRENT	autoload/l9.vim	/^let s:L9_VERSION_CURRENT  = 101$/;"	v
s:L9_VERSION_PASSABLE	autoload/l9.vim	/^let s:L9_VERSION_PASSABLE = 101$/;"	v
s:MODE_NAME	autoload/fuf/bookmarkdir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/bookmarkfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/buffer.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/buffertag.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/callbackfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/callbackitem.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/changelist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/coveragefile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/dir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/file.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/givencmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/givendir.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/givenfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/help.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/jumplist.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/line.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/mrucmd.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/mrufile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/quickfix.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/tag.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MODE_NAME	autoload/fuf/taggedfile.vim	/^let s:MODE_NAME = expand('<sfile>:t:r')$/;"	v
s:MenuController	plugin/NERD_tree.vim	/^let s:MenuController = {}$/;"	v
s:MenuItem	plugin/NERD_tree.vim	/^let s:MenuItem = {}$/;"	v
s:NERDFileNameEscape	plugin/NERD_commenter.vim	/^let s:NERDFileNameEscape="[]#*$%'\\" ?`!&();<>\\\\"$/;"	v
s:NERDTreeBufName	plugin/NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	plugin/NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	plugin/NERD_tree.vim	/^let s:NERD_tree_version = '4.1.0'$/;"	v
s:NormalTag	plugin/tagbar.vim	/^let s:NormalTag = copy(s:BaseTag)$/;"	v
s:OPEN_TYPE_CURRENT	autoload/fuf.vim	/^let s:OPEN_TYPE_CURRENT = 1$/;"	v
s:OPEN_TYPE_DELETE	autoload/fuf/bookmarkdir.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	autoload/fuf/bookmarkfile.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	autoload/fuf/buffer.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_DELETE	autoload/fuf/line.vim	/^let s:OPEN_TYPE_DELETE = -1$/;"	v
s:OPEN_TYPE_EXPAND	autoload/fuf/mrufile.vim	/^let s:OPEN_TYPE_EXPAND = -1$/;"	v
s:OPEN_TYPE_SPLIT	autoload/fuf.vim	/^let s:OPEN_TYPE_SPLIT   = 2$/;"	v
s:OPEN_TYPE_TAB	autoload/fuf.vim	/^let s:OPEN_TYPE_TAB     = 4$/;"	v
s:OPEN_TYPE_VSPLIT	autoload/fuf.vim	/^let s:OPEN_TYPE_VSPLIT  = 3$/;"	v
s:Path	plugin/NERD_tree.vim	/^let s:Path = {}$/;"	v
s:PseudoTag	plugin/tagbar.vim	/^let s:PseudoTag = copy(s:BaseTag)$/;"	v
s:TEMP_VARIABLES_GROUP	autoload/fuf.vim	/^let s:TEMP_VARIABLES_GROUP = expand('<sfile>:p')$/;"	v
s:TEMP_VARIABLES_GROUP	autoload/fuf/buffertag.vim	/^let s:TEMP_VARIABLES_GROUP = expand('<sfile>:p')$/;"	v
s:TreeDirNode	plugin/NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	plugin/NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:VCSCommandUtility	plugin/vcscommand.vim	/^let s:VCSCommandUtility = {}$/;"	v
s:VCSCommandUtility	plugin/vcsgit.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('git', expand('<sfile>'), s:gitFunctions, [])$/;"	v
s:VCSCommandUtility	plugin/vcssvn.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('SVN', expand('<sfile>'), s:svnFunctions, [])$/;"	v
s:VERSION_FACTOR	autoload/l9.vim	/^let s:VERSION_FACTOR = str2float('0.01')$/;"	v
s:access_symbols	plugin/tagbar.vim	/^let s:access_symbols = {$/;"	v
s:alt_arrays	plugin/php.vim	/^  let s:alt_arrays = (s:strict_blocks ? s:ChooseValue('php_alt_arrays', 1) : 0)$/;"	v
s:alt_blocks	plugin/php.vim	/^  let s:alt_blocks = (s:strict_blocks && s:ChooseValue('php_alt_blocks', 1))$/;"	v
s:alt_comparisons	plugin/php.vim	/^  let s:alt_comparisons = s:ChooseValue('php_alt_comparisons', s:ChooseValue('php_oldStyle', 1))$/;"	v
s:alt_control_parents	plugin/php.vim	/^  let s:alt_control_parents = s:ChooseValue('php_alt_construct_parents', 0)$/;"	v
s:alt_properties	plugin/php.vim	/^  let s:alt_properties = (s:smart_members && s:ChooseValue('php_alt_properties', 0))$/;"	v
s:alt_refs	plugin/php.vim	/^  let s:alt_refs = s:ChooseValue('php_alt_assignByReference', 1)$/;"	v
s:app_prototype	autoload/rails.vim	/^let s:app_prototype = {}$/;"	v
s:app_prototype	autoload/rails.vim	/^let s:app_prototype.cache = s:cache_prototype$/;"	v
s:apps	autoload/rails.vim	/^  let s:apps = {}$/;"	v
s:asp_tags	plugin/php.vim	/^  let s:asp_tags = s:ChooseValue('php_asp_tags', 0)$/;"	v
s:autocommands_done	plugin/tagbar.vim	/^let s:autocommands_done = 0$/;"	v
s:autotag_vim_version	plugin/autotag.vim	/^let s:autotag_vim_version=1$/;"	v
s:begin_snippet	autoload/neocomplcache/sources/snippets_complete.vim	/^let s:begin_snippet = 0$/;"	v
s:behavsCurrent	autoload/acp.vim	/^let s:behavsCurrent = []$/;"	v
s:bufTimes	autoload/fuf/buffer.vim	/^let s:bufTimes = {}$/;"	v
s:bufferCursorPosMap	autoload/fuf.vim	/^let s:bufferCursorPosMap = {}$/;"	v
s:buffer_prototype	autoload/rails.vim	/^let s:buffer_prototype = {}$/;"	v
s:buffer_sources	autoload/neocomplcache/sources/buffer_complete.vim	/^  let s:buffer_sources = {}$/;"	v
s:cache_prototype	autoload/rails.vim	/^let s:cache_prototype = {'dict': {}}$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^    let s:cmd = "$JS_CMD"$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^    let s:cmd = '\/System\/Library\/Frameworks\/JavaScriptCore.framework\/Resources\/jsc'$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^    let s:cmd = 'js'$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^    let s:cmd = 'node'$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^  let s:cmd = 'cscript \/NoLogo '$/;"	v
s:cmd	ftplugin/javascript/jslint.vim	/^let s:cmd = "cd " . s:plugin_path . " && " . s:cmd . " " . s:plugin_path . "runjslint." . s:runjslint_ext$/;"	v
s:command	plugin/php.vim	/^      let s:command = 'syntax match pregClassExcStart_<QUOTE> \/\\[\\^\\]\/ contained display'$/;"	v
s:command	plugin/php.vim	/^      let s:command = 'syntax match pregClassIncStart_<QUOTE> \/\\[\\]\/ contained display'$/;"	v
s:command	plugin/php.vim	/^      let s:command = 'syntax region pregClass<TYPE> start=\/\\ze.\/ matchgroup=pregClassParent end=\/\\]\/'$/;"	v
s:cpo_save	autoload/rails.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	indent/html.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/grep.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/mru.vim	/^let s:cpo_save = &cpo$/;"	v
s:cpo_save	plugin/surround.vim	/^let s:cpo_save = &cpo$/;"	v
s:dataMap	autoload/l9/tempbuffer.vim	/^let s:dataMap = {}$/;"	v
s:defaultMappings	plugin/vcscommand.vim	/^let s:defaultMappings = [$/;"	v
s:delimiterMap	plugin/NERD_commenter.vim	/^let s:delimiterMap = {$/;"	v
s:did_snip_helper	ftplugin/html_snip_helper.vim	/^let s:did_snip_helper = 1$/;"	v
s:did_snips_mappings	after/plugin/snipMate.vim	/^let s:did_snips_mappings = 1$/;"	v
s:doc_dict	autoload/neocomplcache/sources/include_complete.vim	/^let s:doc_dict = {$/;"	v
s:doc_dict	autoload/neocomplcache/sources/snippets_complete.vim	/^let s:doc_dict = {$/;"	v
s:doc_dict	autoload/neocomplcache/sources/vim_complete/helper.vim	/^let s:doc_dict = {$/;"	v
s:efm_backtrace	autoload/rails.vim	/^let s:efm_backtrace='%D(in\\ %f),'$/;"	v
s:endEarly	plugin/php.vim	/^    let s:endEarly = s:nested_functions ? '' : 'matchgroup=Error end=\/\\%(^\\|\\s\\)function\\>\/'$/;"	v
s:end_snippet	autoload/neocomplcache/sources/snippets_complete.vim	/^let s:end_snippet = 0$/;"	v
s:esc_filename_chars	plugin/mru.vim	/^let s:esc_filename_chars = ' *?[{`$%#"|!<>();&' . "'\\t\\n"$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:escape_chars	plugin/NERD_tree.vim	/^    let s:escape_chars =  " `\\|\\"#%&,?()\\*^<>"$/;"	v
s:exists_vimproc	autoload/neocomplcache.vim	/^  let s:exists_vimproc = 0$/;"	v
s:exists_vimproc	autoload/neocomplcache.vim	/^  let s:exists_vimproc = 1$/;"	v
s:file	autoload/rails.vim	/^let s:file = expand('<sfile>:p')$/;"	v
s:file_prototype	autoload/rails.vim	/^let s:file_prototype = {}$/;"	v
s:foldHere	plugin/php.vim	/^    let s:foldHere = s:folding ? 'fold' : ''$/;"	v
s:fold_arrays	plugin/php.vim	/^  let s:fold_arrays = (s:folding && s:ChooseValue('php_fold_arrays', 0))$/;"	v
s:fold_heredoc	plugin/php.vim	/^  let s:fold_heredoc = (s:folding && s:ChooseValue('php_fold_heredoc', 0))$/;"	v
s:fold_manual	plugin/php.vim	/^  let s:fold_manual = s:large_file ? 0 : s:ChooseValue('php_fold_manual', s:folding ? 1 : 0)$/;"	v
s:folding	plugin/php.vim	/^  let s:folding = s:large_file ? 0 : s:ChooseValue('php_folding', 0)$/;"	v
s:function_return_types	autoload/neocomplcache/sources/vim_complete/helper.vim	/^let s:function_return_types = {}$/;"	v
s:gitFunctions	plugin/vcsgit.vim	/^let s:gitFunctions = {}$/;"	v
s:gitFunctions	plugin/vcsgit.vim	/^let s:gitFunctions.AnnotateSplitRegex = ') '$/;"	v
s:global_candidates_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^  let s:global_candidates_list = { 'dictionary_variables' : {} }$/;"	v
s:handler	autoload/fuf/bookmarkdir.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/bookmarkfile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/buffer.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/buffertag.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/callbackfile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/callbackitem.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/changelist.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/coveragefile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/dir.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/file.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/givencmd.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/givendir.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/givenfile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/help.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/jumplist.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/line.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/mrucmd.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/mrufile.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/quickfix.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/tag.vim	/^let s:handler = {}$/;"	v
s:handler	autoload/fuf/taggedfile.vim	/^let s:handler = {}$/;"	v
s:handlerBase	autoload/fuf.vim	/^let s:handlerBase = {}$/;"	v
s:hooks	autoload/conque_term.vim	/^let s:hooks = { 'after_startup': [], 'buffer_enter': [], 'buffer_leave': [], 'after_keymap': [] }$/;"	v
s:iBehavs	autoload/acp.vim	/^let s:iBehavs = 0$/;"	v
s:icon_closed	plugin/tagbar.vim	/^    let s:icon_closed = '+'$/;"	v
s:icon_closed	plugin/tagbar.vim	/^    let s:icon_closed = '▶'$/;"	v
s:icon_closed	plugin/tagbar.vim	/^    let s:icon_closed = '▷'$/;"	v
s:icon_open	plugin/tagbar.vim	/^    let s:icon_open   = '-'$/;"	v
s:icon_open	plugin/tagbar.vim	/^    let s:icon_open   = '▼'$/;"	v
s:icon_open	plugin/tagbar.vim	/^    let s:icon_open   = '◢'$/;"	v
s:include_info	autoload/neocomplcache/sources/include_complete.vim	/^let s:include_info = {}$/;"	v
s:initialized	autoload/conque_term.vim	/^let s:initialized = 0$/;"	v
s:install_dir	ftplugin/javascript/jslint.vim	/^let s:install_dir = expand('<sfile>:p:h')$/;"	v
s:internal_candidates_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^  let s:internal_candidates_list = {}$/;"	v
s:isEditFileRunning	plugin/vcscommand.vim	/^let s:isEditFileRunning = 0$/;"	v
s:is_elflord	plugin/php.vim	/^  let s:is_elflord = (exists('g:colors_name') && g:colors_name == 'elflord')$/;"	v
s:is_enabled	autoload/neocomplcache.vim	/^let s:is_enabled = 0$/;"	v
s:is_md5	autoload/neocomplcache/cache.vim	/^let s:is_md5 = exists('*md5#md5')$/;"	v
s:js_line_comment	indent/javascript.vim	/^let s:js_line_comment = '\\s*\\(\/\/.*\\)*'$/;"	v
s:js_m_cntrl_beg	indent/javascript.vim	/^let s:js_m_cntrl_beg = s:js_s_cntrl_beg . '\\s*{\\s*'$/;"	v
s:js_m_cntrl_end	indent/javascript.vim	/^let s:js_m_cntrl_end = '^[^{]*}\\s*\\(while\\s*(.*)\\)\\=\\s*;\\=\\s*'$/;"	v
s:js_m_cntrl_mid	indent/javascript.vim	/^let s:js_m_cntrl_mid = '}\\=\\s*' . s:js_s_cntrl_mid . '\\s*{\\s*'$/;"	v
s:js_m_multi_end	indent/javascript.vim	/^let s:js_m_multi_end = s:js_s_multi_end . '\\s*{\\s*'$/;"	v
s:js_m_switch_beg	indent/javascript.vim	/^let s:js_m_switch_beg = s:js_s_switch_beg . '\\s*{\\s*'$/;"	v
s:js_multi_beg	indent/javascript.vim	/^let s:js_multi_beg = '([^()]*\\s*'$/;"	v
s:js_multi_invok_beg	indent/javascript.vim	/^let s:js_multi_invok_beg = s:js_multi_beg$/;"	v
s:js_multi_invok_end	indent/javascript.vim	/^let s:js_multi_invok_end = s:js_s_multi_end . '[;,]\\{1}\\s*'$/;"	v
s:js_object_beg	indent/javascript.vim	/^let s:js_object_beg = '[{\\[]\\s*'$/;"	v
s:js_object_end	indent/javascript.vim	/^let s:js_object_end = '^[^][{}]*[}\\]][;,]\\=\\s*'$/;"	v
s:js_s_cntrl_beg	indent/javascript.vim	/^let s:js_s_cntrl_beg = '^\\s*\\(\\(\\(if\\|for\\|with\\|while\\)\\s*(.*)\\)\\|\\(try\\|do\\)\\)\\s*' 		$/;"	v
s:js_s_cntrl_mid	indent/javascript.vim	/^let s:js_s_cntrl_mid = '^\\s*\\(\\(\\(else\\s*if\\|catch\\)\\s*(.*)\\)\\|\\(finally\\|else\\)\\)\\s*'$/;"	v
s:js_s_multi_end	indent/javascript.vim	/^let s:js_s_multi_end = '^[^()]*)\\s*'$/;"	v
s:js_s_switch_beg	indent/javascript.vim	/^let s:js_s_switch_beg = 'switch\\s*(.*)\\s*' "Actually not allowed. $/;"	v
s:js_switch_mid	indent/javascript.vim	/^let s:js_switch_mid = '^.*\\(case.*\\|default\\)\\s*:\\s*'$/;"	v
s:jslintrc	ftplugin/javascript/jslint.vim	/^  let s:jslintrc = []$/;"	v
s:jslintrc	ftplugin/javascript/jslint.vim	/^  let s:jslintrc = readfile(s:jslintrc_file)$/;"	v
s:jslintrc_file	ftplugin/javascript/jslint.vim	/^let s:jslintrc_file = expand('~\/.jslintrc')$/;"	v
s:keepcpo	plugin/gnuchlog.vim	/^let s:keepcpo = &cpo$/;"	v
s:keepfo	plugin/gnuchlog.vim	/^let s:keepfo  = &fo$/;"	v
s:known_files	plugin/tagbar.vim	/^let s:known_files = {$/;"	v
s:large_file	plugin/php.vim	/^  let s:large_file = (s:large_file_limit == 0) ? 0 : (line('$') >= s:large_file_limit)$/;"	v
s:large_file_limit	plugin/php.vim	/^  let s:large_file_limit = s:ChooseValue('php_large_file', 3000)$/;"	v
s:last_mps	plugin/matchit.vim	/^let s:last_mps = ""$/;"	v
s:last_words	plugin/matchit.vim	/^let s:last_words = ":"$/;"	v
s:lenSpaceStr	plugin/NERD_commenter.vim	/^let s:lenSpaceStr = strlen(s:spaceStr)$/;"	v
s:local_candidates_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^  let s:local_candidates_list = {}$/;"	v
s:lockCount	autoload/acp.vim	/^let s:lockCount = 0$/;"	v
s:long_tags	plugin/php.vim	/^  let s:long_tags = !s:ChooseValue('php_short_tags', !s:ChooseValue('php_noShortTags', 0))$/;"	v
s:low_color	colors/jellybeans.vim	/^	let s:low_color = 0$/;"	v
s:low_color	colors/jellybeans.vim	/^	let s:low_color = 1$/;"	v
s:maxdelay	plugin/matrix.vim	/^let s:maxdelay = 5$/;"	v
s:menuEnabled	plugin/vcscommand.vim	/^let s:menuEnabled = !VCSCommandGetOption('VCSCommandDisableMenu', 0)$/;"	v
s:menuPriority	plugin/vcscommand.vim	/^let s:menuPriority = VCSCommandGetOption('VCSCommandMenuPriority', '')$/;"	v
s:menuRoot	plugin/vcscommand.vim	/^let s:menuRoot = VCSCommandGetOption('VCSCommandMenuRoot', '&Plugin.VCS')$/;"	v
s:mindelay	plugin/matrix.vim	/^let s:mindelay = 1$/;"	v
s:modeNames	autoload/fuf.vim	/^let s:modeNames = []$/;"	v
s:molokai_original	colors/molokai.vim	/^    let s:molokai_original = 0$/;"	v
s:molokai_original	colors/molokai.vim	/^    let s:molokai_original = g:molokai_original$/;"	v
s:moria_fontface	colors/moria.vim	/^    let s:moria_fontface = "plain"$/;"	v
s:moria_fontface	colors/moria.vim	/^    let s:moria_fontface = g:moria_fontface$/;"	v
s:moria_monochrome	colors/moria.vim	/^    let s:moria_monochrome = 0$/;"	v
s:moria_monochrome	colors/moria.vim	/^    let s:moria_monochrome = g:moria_monochrome$/;"	v
s:moria_style	colors/moria.vim	/^    let s:moria_style = &background $/;"	v
s:moria_style	colors/moria.vim	/^    let s:moria_style = &background$/;"	v
s:moria_style	colors/moria.vim	/^    let s:moria_style = g:moria_style$/;"	v
s:mru_list_locked	plugin/mru.vim	/^let s:mru_list_locked = 0$/;"	v
s:nested_functions	plugin/php.vim	/^  let s:nested_functions = s:ChooseValue('php_nested_functions', 1)$/;"	v
s:next_buffer_number	plugin/NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:no_empty_construct	plugin/php.vim	/^  let s:no_empty_construct = (s:strict_blocks && s:ChooseValue('php_empty_construct_error', 1))$/;"	v
s:notslash	plugin/matchit.vim	/^let s:notslash = '\\\\\\@<!\\%(\\\\\\\\\\)*'$/;"	v
s:old_cpo	plugin/NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:oneTimeVariables	autoload/fuf.vim	/^let s:oneTimeVariables = []$/;"	v
s:optionOverrides	plugin/vcscommand.vim	/^let s:optionOverrides = {}$/;"	v
s:origMap	autoload/l9/tempvariables.vim	/^let s:origMap = {}$/;"	v
s:parent_error_close	plugin/php.vim	/^  let s:parent_error_close = (s:strict_blocks && s:ChooseValue('php_parent_error_close', 1))$/;"	v
s:plugin_path	ftplugin/javascript/jslint.vim	/^  let s:plugin_path = substitute(s:plugin_path, '\/', '\\', 'g')$/;"	v
s:plugin_path	ftplugin/javascript/jslint.vim	/^let s:plugin_path = s:install_dir . "\/jslint\/"$/;"	v
s:plugins	plugin/vcscommand.vim	/^let s:plugins = {}$/;"	v
s:readable_prototype	autoload/rails.vim	/^let s:readable_prototype = {}$/;"	v
s:runjslint_ext	ftplugin/javascript/jslint.vim	/^  let s:runjslint_ext = 'js'$/;"	v
s:runjslint_ext	ftplugin/javascript/jslint.vim	/^  let s:runjslint_ext = 'wsf'$/;"	v
s:running_windows	plugin/NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	autoload/zencoding.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/matchit.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/neocomplcache.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_cpo	plugin/vcscommand.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugin/vcsgit.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugin/vcssvn.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	plugin/zencoding.vim	/^let s:save_cpo = &cpo$/;"	v
s:save_updatetime	autoload/conque_term.vim	/^let s:save_updatetime = &updatetime$/;"	v
s:saved_terminals	autoload/conque_term.vim	/^        let s:saved_terminals = {}$/;"	v
s:script_candidates_list	autoload/neocomplcache/sources/vim_complete/helper.vim	/^  let s:script_candidates_list = {}$/;"	v
s:scriptdir	autoload/conque_term.vim	/^let s:scriptdir = expand("<sfile>:h") . '\/'$/;"	v
s:scriptdirpy	autoload/conque_term.vim	/^let s:scriptdirpy = expand("<sfile>:h") . '\/conque_term\/'$/;"	v
s:session_file	plugin/matrix.vim	/^let s:session_file = tempname()$/;"	v
s:show_baselib	plugin/php.vim	/^  let s:show_baselib = s:ChooseValue('php_baselib', 0)$/;"	v
s:show_html_in_strings	plugin/php.vim	/^  let s:show_html_in_strings = s:ChooseValue('php_htmlInStrings', 0)$/;"	v
s:show_pcre	plugin/php.vim	/^  let s:show_pcre = s:large_file ? 0 : s:ChooseValue('php_show_pcre', s:ChooseValue('php_show_preg', 1))$/;"	v
s:show_quotes	plugin/php.vim	/^  let s:show_quotes = s:ChooseValue('php_highlight_quotes', 0)$/;"	v
s:show_semicolon	plugin/php.vim	/^  let s:show_semicolon = s:ChooseValue('php_show_semicolon', 1)$/;"	v
s:show_semicolon_error	plugin/php.vim	/^  let s:show_semicolon_error = (s:show_semicolon && s:ChooseValue('php_show_semicolon_error', 1))$/;"	v
s:show_sql	plugin/php.vim	/^  let s:show_sql = s:ChooseValue('php_sql_query', 0)$/;"	v
s:sid	autoload/rails.vim	/^let s:sid = s:sub(maparg("<SID>xx"),'xx$','')$/;"	v
s:smart_members	plugin/php.vim	/^  let s:smart_members = s:large_file ? 0 : s:ChooseValue('php_smart_members', 0)$/;"	v
s:smart_semicolon	plugin/php.vim	/^  let s:smart_semicolon = s:large_file ? 0 : (s:show_semicolon && s:ChooseValue('php_smart_semicolon', 1))$/;"	v
s:snipItems	autoload/acp.vim	/^let s:snipItems = {}$/;"	v
s:snippets	autoload/neocomplcache/sources/snippets_complete.vim	/^  let s:snippets = {}$/;"	v
s:snippets	plugin/snipMate.vim	/^let s:snippets = {} | let s:multi_snips = {}$/;"	v
s:source	autoload/neocomplcache/sources/abbrev_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/buffer_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/completefunc_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/dictionary_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/filename_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/include_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/keyword_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/omni_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/snippets_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/syntax_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/tags_complete.vim	/^let s:source = {$/;"	v
s:source	autoload/neocomplcache/sources/vim_complete.vim	/^let s:source = {$/;"	v
s:spaceStr	plugin/NERD_commenter.vim	/^let s:spaceStr = ' '$/;"	v
s:special_functions	plugin/php.vim	/^  let s:special_functions = s:ChooseValue('php_special_functions', 1)$/;"	v
s:special_vars	plugin/php.vim	/^  let s:special_vars = s:ChooseValue('php_special_vars', s:ChooseValue('php_special_variables', s:ChooseValue('php_oldStyle', 1)))$/;"	v
s:strict_blocks	plugin/php.vim	/^  let s:strict_blocks = s:large_file ? 0 : s:ChooseValue('php_strict_blocks', 1)$/;"	v
s:svnFunctions	plugin/vcssvn.vim	/^let s:svnFunctions = {}$/;"	v
s:svnFunctions	plugin/vcssvn.vim	/^let s:svnFunctions.AnnotateSplitRegex = '\\s\\+\\S\\+\\s\\+\\S\\+ '$/;"	v
s:syn_comment	indent/javascript.vim	/^let s:syn_comment = '\\(Comment\\|String\\)'$/;"	v
s:sync	plugin/php.vim	/^  let s:sync = s:ChooseValue('php_sync_method', -1)$/;"	v
s:tempOptionSet	autoload/acp.vim	/^let s:tempOptionSet = [{}, {}]$/;"	v
s:term_obj	autoload/conque_term.vim	/^let s:term_obj = {'idx': 1, 'var': '', 'is_buffer': 1, 'active': 1, 'buffer_name': '', 'command': ''}$/;"	v
s:timerData	plugin/l9.vim	/^  let s:timerData = []$/;"	v
s:timerTagMaxLen	plugin/l9.vim	/^  let s:timerTagMaxLen = 0$/;"	v
s:tree_markup_reg	plugin/NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	plugin/NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	plugin/NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
s:type_init_done	plugin/tagbar.vim	/^let s:type_init_done    = 0$/;"	v
s:view_types	autoload/rails.vim	/^let s:view_types = 'rhtml,erb,rxml,builder,rjs,mab,liquid,haml,dryml,mn'$/;"	v
s:window_expanded	plugin/tagbar.vim	/^let s:window_expanded   = 0$/;"	v
s:windows_vk	autoload/conque_term.vim	/^let s:windows_vk = {$/;"	v
s:zen_settings	autoload/zencoding.vim	/^let s:zen_settings = {$/;"	v
sanitize_path_string	ruby/command-t/controller.rb	/^    def sanitize_path_string str$/;"	f	class:CommandT.Controller
save	ruby/command-t/settings.rb	/^    def save$/;"	f	class:CommandT.Settings
saveScreenState	plugin/NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
save_all_cache	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:save_all_cache()"{{{$/;"	f
save_cache	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:save_cache(srcname)"{{{$/;"	f
sbindir	ruby/command-t/Makefile	/^sbindir = $(exec_prefix)\/sbin$/;"	m
scanlineforuris	autoload/rails.vim	/^function! s:scanlineforuris(line)$/;"	f
scoreBoundaryMatching	autoload/fuf.vim	/^function s:scoreBoundaryMatching(wordForBoundary, pattern, exprBoundary)$/;"	f
scoreSequentialMatching	autoload/fuf.vim	/^function s:scoreSequentialMatching(word, pattern)$/;"	f
screen	autoload/conque_term/conque.py	/^    screen = None$/;"	v	class:Conque
screen_encoding	autoload/conque_term/conque_screen.py	/^    screen_encoding = 'utf-8'$/;"	v	class:ConqueScreen
screen_height	autoload/conque_term/conque_screen.py	/^    screen_height = 80$/;"	v	class:ConqueScreen
screen_redraw_ct	autoload/conque_term/conque_sole.py	/^    screen_redraw_ct = 1$/;"	v	class:ConqueSole
screen_redraw_ct	autoload/conque_term/conque_sole_subprocess.py	/^    screen_redraw_ct = 0$/;"	v	class:ConqueSoleSubprocess
screen_top	autoload/conque_term/conque_screen.py	/^    screen_top = 1$/;"	v	class:ConqueScreen
screen_width	autoload/conque_term/conque_screen.py	/^    screen_width = 80$/;"	v	class:ConqueScreen
scrub	autoload/rails.vim	/^function! s:scrub(collection,item)$/;"	f
search_outof_range	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:search_outof_range(col)"{{{$/;"	f
search_region	autoload/zencoding.vim	/^function! s:search_region(start, end)$/;"	f
search_snippet_range	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:search_snippet_range(start, end)"{{{$/;"	f
search_sync_placeholder	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:search_sync_placeholder(start, end, number)"{{{$/;"	f
select	autoload/conque_term/conque_subprocess.py	/^import select$/;"	i
select	ruby/command-t/vim/window.rb	/^      def self.select window$/;"	F	class:CommandT.VIM.Window
select_next	ruby/command-t/controller.rb	/^    def select_next$/;"	f	class:CommandT.Controller
select_next	ruby/command-t/match_window.rb	/^    def select_next$/;"	f	class:CommandT.MatchWindow
select_prev	ruby/command-t/controller.rb	/^    def select_prev$/;"	f	class:CommandT.Controller
select_prev	ruby/command-t/match_window.rb	/^    def select_prev$/;"	f	class:CommandT.MatchWindow
select_quick_match_list	autoload/neocomplcache.vim	/^function! s:select_quick_match_list(key)"{{{$/;"	f
select_region	autoload/zencoding.vim	/^function! s:select_region(region)$/;"	f
selection	ruby/command-t/match_window.rb	/^    def selection$/;"	f	class:CommandT.MatchWindow
selectiveexpand	autoload/rails.vim	/^function! s:selectiveexpand(pat,good,default,...)$/;"	f
serialize	autoload/conque_term/conque_sole_shared_memory.py	/^    serialize = False$/;"	v	class:ConqueSoleSharedMemory
setAbbrWithFileAbbrData	autoload/fuf.vim	/^function s:setAbbrWithFileAbbrData(item, snippedHeads)$/;"	f
setCompletefunc	autoload/acp.vim	/^function s:setCompletefunc()$/;"	f
setRanks	autoload/fuf.vim	/^function s:setRanks(item, pattern, exprBoundary, stats)$/;"	f
setTempOption	autoload/acp.vim	/^function s:setTempOption(group, name, value)$/;"	f
set_auto_completion_length	autoload/neocomplcache.vim	/^function! s:set_auto_completion_length(len)"{{{$/;"	f
set_bool	ruby/command-t/settings.rb	/^    def set_bool setting, value$/;"	f	class:CommandT.Settings
set_context_filetype	autoload/neocomplcache.vim	/^function! s:set_context_filetype()"{{{$/;"	f
set_cursor	autoload/conque_term/conque.py	/^    def set_cursor(self, line, col):$/;"	m	class:Conque
set_cursor	autoload/conque_term/conque_screen.py	/^    def set_cursor(self, line, column):$/;"	m	class:ConqueScreen
set_cursor	autoload/conque_term/conque_sole.py	/^    def set_cursor(self, line, column):$/;"	m	class:ConqueSole
set_dictionary_helper	autoload/neocomplcache/sources/vim_complete/helper.vim	/^function! s:set_dictionary_helper(variable, keys, value)"{{{$/;"	f
set_number	ruby/command-t/settings.rb	/^    def set_number setting, value$/;"	f	class:CommandT.Settings
set_screen_width	autoload/conque_term/conque_screen.py	/^    def set_screen_width(self, width):$/;"	m	class:ConqueScreen
set_snippet_pattern	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:set_snippet_pattern(dict)"{{{$/;"	f
set_status	ruby/command-t/prompt.rb	/^    def set_status *args$/;"	f	class:CommandT.Prompt
set_up_file_finder	ruby/command-t/controller.rb	/^    def set_up_file_finder$/;"	f	class:CommandT.Controller
set_up_max_height	ruby/command-t/controller.rb	/^    def set_up_max_height$/;"	f	class:CommandT.Controller
set_window_size	autoload/conque_term/conque_sole_subprocess.py	/^    def set_window_size(self, width, height):$/;"	m	class:ConqueSoleSubprocess
setopt	autoload/rails.vim	/^function! s:setopt(opt,val)$/;"	f
setupStatusline	plugin/NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	plugin/NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
sharedstatedir	ruby/command-t/Makefile	/^sharedstatedir = $(prefix)\/com$/;"	m
shlex	autoload/conque_term/conque_subprocess.py	/^import shlex$/;"	i
shm	autoload/conque_term/conque_sole_shared_memory.py	/^    shm = None$/;"	v	class:ConqueSoleSharedMemory
shm_attributes	autoload/conque_term/conque_sole_subprocess.py	/^    shm_attributes = None$/;"	v	class:ConqueSoleSubprocess
shm_attributes	autoload/conque_term/conque_sole_wrapper.py	/^    shm_attributes = None$/;"	v	class:ConqueSoleWrapper
shm_command	autoload/conque_term/conque_sole_communicator.py	/^        shm_command = ConqueSoleSharedMemory(CONQUE_SOLE_COMMANDS_SIZE, 'command', mem_key, serialize=True)$/;"	v
shm_command	autoload/conque_term/conque_sole_subprocess.py	/^    shm_command = None$/;"	v	class:ConqueSoleSubprocess
shm_command	autoload/conque_term/conque_sole_wrapper.py	/^    shm_command = None$/;"	v	class:ConqueSoleWrapper
shm_input	autoload/conque_term/conque_sole_subprocess.py	/^    shm_input = None$/;"	v	class:ConqueSoleSubprocess
shm_input	autoload/conque_term/conque_sole_wrapper.py	/^    shm_input = None$/;"	v	class:ConqueSoleWrapper
shm_key	autoload/conque_term/conque_sole_wrapper.py	/^    shm_key = ''$/;"	v	class:ConqueSoleWrapper
shm_output	autoload/conque_term/conque_sole_subprocess.py	/^    shm_output = None$/;"	v	class:ConqueSoleSubprocess
shm_output	autoload/conque_term/conque_sole_wrapper.py	/^    shm_output = None$/;"	v	class:ConqueSoleWrapper
shm_rescroll	autoload/conque_term/conque_sole_subprocess.py	/^    shm_rescroll = None$/;"	v	class:ConqueSoleSubprocess
shm_rescroll	autoload/conque_term/conque_sole_wrapper.py	/^    shm_rescroll = None$/;"	v	class:ConqueSoleWrapper
shm_resize	autoload/conque_term/conque_sole_subprocess.py	/^    shm_resize = None$/;"	v	class:ConqueSoleSubprocess
shm_resize	autoload/conque_term/conque_sole_wrapper.py	/^    shm_resize = None$/;"	v	class:ConqueSoleWrapper
shm_stats	autoload/conque_term/conque_sole_subprocess.py	/^    shm_stats = None$/;"	v	class:ConqueSoleSubprocess
shm_stats	autoload/conque_term/conque_sole_wrapper.py	/^    shm_stats = None$/;"	v	class:ConqueSoleWrapper
show	ruby/command-t/controller.rb	/^    def show$/;"	f	class:CommandT.Controller
showMenu	plugin/NERD_tree.vim	/^function! s:showMenu()$/;"	f
show_buffer_finder	ruby/command-t/controller.rb	/^    def show_buffer_finder$/;"	f	class:CommandT.Controller
show_cursor	ruby/command-t/match_window.rb	/^    def show_cursor$/;"	f	class:CommandT.MatchWindow
show_file_finder	ruby/command-t/controller.rb	/^    def show_file_finder$/;"	f	class:CommandT.Controller
show_file_finder	ruby/command-t/stub.rb	/^    def show_file_finder$/;"	f	class:CommandT.Stub
signal	autoload/conque_term/conque_subprocess.py	/^    def signal(self, signum):$/;"	m	class:ConqueSubprocess
signal	autoload/conque_term/conque_subprocess.py	/^import signal$/;"	i
sitearch	ruby/command-t/Makefile	/^sitearch = $(arch)$/;"	m
sitearchdir	ruby/command-t/Makefile	/^sitearchdir = $(sitelibdir)\/$(sitearch)$/;"	m
sitedir	ruby/command-t/Makefile	/^sitedir = $(rubylibprefix)\/site_ruby$/;"	m
sitehdrdir	ruby/command-t/Makefile	/^sitehdrdir = $(rubyhdrdir)\/site_ruby$/;"	m
sitelibdir	ruby/command-t/Makefile	/^sitelibdir = $(sitedir)\/$(ruby_version)$/;"	m
sleep_time	autoload/conque_term/conque_sole_communicator.py	/^        sleep_time = 0.01$/;"	v
sname	autoload/rails.vim	/^function! s:sname()$/;"	f
snipMate#expandSnip	autoload/snipMate.vim	/^fun snipMate#expandSnip(snip, col)$/;"	f
snipMate#jumpTabStop	autoload/snipMate.vim	/^fun snipMate#jumpTabStop(backwards)$/;"	f
snippets_dir	plugin/snipMate.vim	/^	let snippets_dir = substitute(globpath(&rtp, 'snippets\/'), "\\n", ',', 'g')$/;"	v
snippets_expand	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:snippets_expand(cur_text, col)"{{{$/;"	f
snippets_jump	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:snippets_jump(cur_text, col)"{{{$/;"	f
sorted_matches_for	ruby/command-t/finder.rb	/^    def sorted_matches_for str, options = {}$/;"	f	class:CommandT.Finder
source.finalize	autoload/neocomplcache/sources/abbrev_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/include_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/keyword_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.finalize	autoload/neocomplcache/sources/vim_complete.vim	/^function! s:source.finalize()"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/keyword_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_complete_words	autoload/neocomplcache/sources/vim_complete.vim	/^function! s:source.get_complete_words(cur_keyword_pos, cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/abbrev_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/include_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_list	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:source.get_keyword_list(cur_keyword_str)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/keyword_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.get_keyword_pos	autoload/neocomplcache/sources/vim_complete.vim	/^function! s:source.get_keyword_pos(cur_text)"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/abbrev_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/completefunc_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/dictionary_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/filename_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/include_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/keyword_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/omni_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/tags_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
source.initialize	autoload/neocomplcache/sources/vim_complete.vim	/^function! s:source.initialize()"{{{$/;"	f
specEdit	autoload/rails.vim	/^function! s:specEdit(cmd,...)$/;"	f
specList	autoload/rails.vim	/^function! s:specList(A,L,P)$/;"	f
split_pattern	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:split_pattern(keyword_pattern)"{{{$/;"	f
srcdir	ruby/command-t/Makefile	/^srcdir = .$/;"	m
startswith	autoload/rails.vim	/^function! s:startswith(string,prefix)$/;"	f
stdin	autoload/conque_term/conque_sole_subprocess.py	/^    stdin = None$/;"	v	class:ConqueSoleSubprocess
stdout	autoload/conque_term/conque_sole_subprocess.py	/^    stdout = None$/;"	v	class:ConqueSoleSubprocess
str_len	ruby/command-t/match.c	/^    long    str_len;                \/\/ length of same$/;"	m	struct:__anon1	file:
str_p	ruby/command-t/match.c	/^    char    *str_p;                 \/\/ pointer to string to be searched$/;"	m	struct:__anon1	file:
string	plugin/autotag.vim	/^import string$/;"	m
stripMarkupFromLine	plugin/NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
struct	autoload/conque_term/conque_subprocess.py	/^import struct$/;"	i
stylesheetEdit	autoload/rails.vim	/^function! s:stylesheetEdit(cmd,...)$/;"	f
stylesheetList	autoload/rails.vim	/^function! s:stylesheetList(A,L,P)$/;"	f
sub	autoload/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
sub	plugin/rails.vim	/^function! s:sub(str,pat,rep)$/;"	f
subprocess	autoload/l9/async.py	/^import subprocess$/;"	i
subprocess	plugin/autotag.vim	/^   import subprocess$/;"	m
substitute_candidate	autoload/neocomplcache/sources/syntax_complete.vim	/^function! s:substitute_candidate(candidate)"{{{$/;"	f
substitute_marker	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:substitute_marker(start, end)"{{{$/;"	f
svnFunctions.Add	plugin/vcssvn.vim	/^function! s:svnFunctions.Add(argList)$/;"	f
svnFunctions.Annotate	plugin/vcssvn.vim	/^function! s:svnFunctions.Annotate(argList)$/;"	f
svnFunctions.Commit	plugin/vcssvn.vim	/^function! s:svnFunctions.Commit(argList)$/;"	f
svnFunctions.Delete	plugin/vcssvn.vim	/^function! s:svnFunctions.Delete(argList)$/;"	f
svnFunctions.Diff	plugin/vcssvn.vim	/^function! s:svnFunctions.Diff(argList)$/;"	f
svnFunctions.GetBufferInfo	plugin/vcssvn.vim	/^function! s:svnFunctions.GetBufferInfo()$/;"	f
svnFunctions.Identify	plugin/vcssvn.vim	/^function! s:svnFunctions.Identify(buffer)$/;"	f
svnFunctions.Info	plugin/vcssvn.vim	/^function! s:svnFunctions.Info(argList)$/;"	f
svnFunctions.Lock	plugin/vcssvn.vim	/^function! s:svnFunctions.Lock(argList)$/;"	f
svnFunctions.Log	plugin/vcssvn.vim	/^function! s:svnFunctions.Log(argList)$/;"	f
svnFunctions.Revert	plugin/vcssvn.vim	/^function! s:svnFunctions.Revert(argList)$/;"	f
svnFunctions.Review	plugin/vcssvn.vim	/^function! s:svnFunctions.Review(argList)$/;"	f
svnFunctions.Status	plugin/vcssvn.vim	/^function! s:svnFunctions.Status(argList)$/;"	f
svnFunctions.Unlock	plugin/vcssvn.vim	/^function! s:svnFunctions.Unlock(argList)$/;"	f
svnFunctions.Update	plugin/vcssvn.vim	/^function! s:svnFunctions.Update(argList)$/;"	f
sys	autoload/conque_term/conque_globals.py	/^import sys$/;"	i
sys	autoload/conque_term/conque_sole_communicator.py	/^import sys$/;"	i
sys	autoload/conque_term/conque_sole_shared_memory.py	/^import sys$/;"	i
sys	plugin/autotag.vim	/^import sys$/;"	m
sysconfdir	ruby/command-t/Makefile	/^sysconfdir = $(prefix)\/etc$/;"	m
tabpagevar	plugin/NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
tabstops	autoload/conque_term/conque.py	/^    tabstops = []$/;"	v	class:Conque
target_prefix	ruby/command-t/Makefile	/^target_prefix = $/;"	m
taskEdit	autoload/rails.vim	/^function! s:taskEdit(cmd,...)$/;"	f
taskList	autoload/rails.vim	/^function! s:taskList(A,L,P)$/;"	f
term_obj.close	autoload/conque_term.vim	/^function! s:term_obj.close() dict " {{{$/;"	f
term_obj.focus	autoload/conque_term.vim	/^function! s:term_obj.focus() dict " {{{$/;"	f
term_obj.read	autoload/conque_term.vim	/^function! s:term_obj.read(...) dict " {{{$/;"	f
term_obj.set_callback	autoload/conque_term.vim	/^function! s:term_obj.set_callback(callback_func) dict " {{{$/;"	f
term_obj.write	autoload/conque_term.vim	/^function! s:term_obj.write(...) dict " {{{$/;"	f
term_obj.writeln	autoload/conque_term.vim	/^function! s:term_obj.writeln(...) dict " {{{$/;"	f
termios	autoload/conque_term/conque_subprocess.py	/^import termios$/;"	i
threading	autoload/l9/async.py	/^import threading$/;"	i
time	autoload/conque_term/conque_sole_communicator.py	/^import time$/;"	i
time	autoload/conque_term/conque_sole_subprocess.py	/^import time$/;"	i
time	autoload/conque_term/conque_sole_wrapper.py	/^import time$/;"	i
time	plugin/autotag.vim	/^import time$/;"	m
timerBegin	plugin/l9.vim	/^  function s:timerBegin(tag)$/;"	f
timerDump	plugin/l9.vim	/^  function s:timerDump()$/;"	f
timerStop	plugin/l9.vim	/^  function s:timerStop()$/;"	f
toLowerForIgnoringCase	autoload/fuf.vim	/^function s:toLowerForIgnoringCase(str)$/;"	f
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:CHAR_INFO
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:CHAR_UNION
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:CONSOLE_SCREEN_BUFFER_INFO
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:COORD
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:FOCUS_EVENT_RECORD
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:INPUT_RECORD
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:INPUT_UNION
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:KEY_EVENT_RECORD
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:MEMORY_BASIC_INFORMATION
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:MENU_EVENT_RECORD
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:MOUSE_EVENT_RECORD
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:PROCESS_INFORMATION
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:SECURITY_ATTRIBUTES
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:SMALL_RECT
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:STARTUPINFO
to_str	autoload/conque_term/conque_win32_util.py	/^    def to_str(self):$/;"	m	class:WINDOW_BUFFER_SIZE_RECORD
toggle	plugin/NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	plugin/NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	plugin/NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	plugin/NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	plugin/NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
toggleZoom	plugin/NERD_tree.vim	/^function! s:toggleZoom()$/;"	f
toggle_focus	ruby/command-t/controller.rb	/^    def toggle_focus$/;"	f	class:CommandT.Controller
toggle_lock	autoload/neocomplcache.vim	/^function! s:toggle_lock()"{{{$/;"	f
top	autoload/conque_term/conque.py	/^    top = 1 # relative to top of screen$/;"	v	class:Conque
top	autoload/conque_term/conque_sole_subprocess.py	/^    top = 0$/;"	v	class:ConqueSoleSubprocess
topdir	ruby/command-t/Makefile	/^topdir = \/home\/baguo\/.rvm\/rubies\/ruby-1.9.2-p180\/include\/ruby-1.9.1$/;"	m
traceback	plugin/autotag.vim	/^   import traceback$/;"	m
translate_color	autoload/conque_term/conque_sole.py	/^    def translate_color(self, attr):$/;"	m	class:ConqueSole
treeExistsForBuf	plugin/NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	plugin/NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
trigger	autoload/neocomplcache/sources/snippets_complete.vim	/^function! s:trigger(function)"{{{$/;"	f
truncated_match	ruby/command-t/match_window.rb	/^    def truncated_match str$/;"	f	class:CommandT.MatchWindow
try	autoload/rails.vim	/^function! s:try(cmd) abort$/;"	f
tty	autoload/conque_term/conque_subprocess.py	/^import tty$/;"	i
u	autoload/conque_term/conque_globals.py	/^def u(str_val, str_encoding='utf-8', errors='strict'):$/;"	f
u	ftplugin/javascript/jslint.vim	/^noremap <buffer><silent> u u:JSLintUpdate<CR>$/;"	m
uchr	autoload/conque_term/conque_globals.py	/^def uchr(str):$/;"	f
unfocus	ruby/command-t/match_window.rb	/^    def unfocus$/;"	f	class:CommandT.MatchWindow
unfocus	ruby/command-t/prompt.rb	/^    def unfocus$/;"	f	class:CommandT.Prompt
unique	plugin/NERD_tree.vim	/^function! s:unique(list)$/;"	f
unittestEdit	autoload/rails.vim	/^function! s:unittestEdit(cmd,...)$/;"	f
unittestList	autoload/rails.vim	/^function! s:unittestList(A,L,P)$/;"	f
unload	ruby/command-t/controller.rb	/^    def unload$/;"	f	class:CommandT.Controller
unload	ruby/command-t/match_window.rb	/^    def unload$/;"	f	class:CommandT.MatchWindow
unlock	autoload/neocomplcache.vim	/^function! s:unlock()"{{{$/;"	f
unlock	ruby/command-t/match_window.rb	/^    def unlock$/;"	f	class:CommandT.MatchWindow
unmapForMappingDriven	autoload/acp.vim	/^function s:unmapForMappingDriven()$/;"	f
unwrap_tables	autoload/conque_term/conque.py	/^    unwrap_tables = True$/;"	v	class:Conque
upDir	plugin/NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
updateBufTimes	autoload/fuf/buffer.vim	/^function s:updateBufTimes()$/;"	f
updateData	autoload/fuf/mrufile.vim	/^function s:updateData()$/;"	f
updateInfo	autoload/fuf/mrucmd.vim	/^function s:updateInfo(cmd)$/;"	f
update_window_size	autoload/conque_term/conque.py	/^    def update_window_size(self, force=False):$/;"	m	class:Conque
update_window_size	autoload/conque_term/conque_sole.py	/^    def update_window_size(self):$/;"	m	class:ConqueSole
vendorarchdir	ruby/command-t/Makefile	/^vendorarchdir = $(vendorlibdir)\/$(sitearch)$/;"	m
vendordir	ruby/command-t/Makefile	/^vendordir = $(rubylibprefix)\/vendor_ruby$/;"	m
vendorhdrdir	ruby/command-t/Makefile	/^vendorhdrdir = $(rubyhdrdir)\/vendor_ruby$/;"	m
vendorlibdir	ruby/command-t/Makefile	/^vendorlibdir = $(vendordir)\/$(ruby_version)$/;"	m
viewEdit	autoload/rails.vim	/^function! s:viewEdit(cmd,...)$/;"	f
viewList	autoload/rails.vim	/^function! s:viewList(A,L,P)$/;"	f
viewspattern	autoload/rails.vim	/^function! s:viewspattern()$/;"	f
vim	autoload/conque_term/conque.py	/^import vim$/;"	i
vim	autoload/conque_term/conque_globals.py	/^    import vim$/;"	i
vim	autoload/conque_term/conque_screen.py	/^import vim$/;"	i
vim	autoload/conque_term/conque_sole.py	/^import vim$/;"	i
vim	autoload/l9/async.py	/^import vim$/;"	i
vim	plugin/autotag.vim	/^import vim$/;"	m
vt100?	ruby/command-t/controller.rb	/^    def vt100?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
warn	autoload/rails.vim	/^function! s:warn(str)$/;"	f
warn	ruby/command-t/stub.rb	/^    def warn *msg$/;"	f	class:CommandT.Stub
warnflags	ruby/command-t/Makefile	/^warnflags = -Wextra -Wno-unused-parameter -Wno-parentheses -Wpointer-arith -Wwrite-strings -Wno-missing-field-initializers -Wno-long-long$/;"	m
wcwidth	autoload/neocomplcache/util.vim	/^function! s:wcwidth(ucs)"{{{$/;"	f
window_bottom	autoload/conque_term/conque_sole.py	/^    window_bottom = None$/;"	v	class:ConqueSole
window_height	autoload/conque_term/conque_sole_subprocess.py	/^    window_height = 40$/;"	v	class:ConqueSoleSubprocess
window_resize	autoload/conque_term/conque_sole_wrapper.py	/^    def window_resize(self, lines, columns):$/;"	m	class:ConqueSoleWrapper
window_resize	autoload/conque_term/conque_subprocess.py	/^    def window_resize(self, lines, columns):$/;"	m	class:ConqueSubprocess
window_top	autoload/conque_term/conque_sole.py	/^    window_top = None$/;"	v	class:ConqueSole
window_width	autoload/conque_term/conque_sole_subprocess.py	/^    window_width = 160$/;"	v	class:ConqueSoleSubprocess
with_statement	autoload/l9/async.py	/^from __future__ import with_statement$/;"	i
word_caching	autoload/neocomplcache/sources/buffer_complete.vim	/^function! s:word_caching(srcname)"{{{$/;"	f
working_columns	autoload/conque_term/conque.py	/^    working_columns = 80 # can be changed by CSI ? 3 l\/h$/;"	v	class:Conque
working_lines	autoload/conque_term/conque.py	/^    working_lines = 24 # can be changed by CSI r$/;"	v	class:Conque
wrap	plugin/surround.vim	/^function! s:wrap(string,char,type,...)$/;"	f
wrap_cursor	autoload/conque_term/conque.py	/^    wrap_cursor = False$/;"	v	class:Conque
wrapreg	plugin/surround.vim	/^function! s:wrapreg(reg,char,...)$/;"	f
write	autoload/conque_term/conque.py	/^    def write(self, input, set_cursor=True, read=True):$/;"	m	class:Conque
write	autoload/conque_term/conque_sole_shared_memory.py	/^    def write(self, text, start=0):$/;"	m	class:ConqueSoleSharedMemory
write	autoload/conque_term/conque_sole_subprocess.py	/^    def write(self):$/;"	m	class:ConqueSoleSubprocess
write	autoload/conque_term/conque_sole_wrapper.py	/^    def write(self, text):$/;"	m	class:ConqueSoleWrapper
write	autoload/conque_term/conque_subprocess.py	/^    def write(self, input):$/;"	m	class:ConqueSubprocess
write_expr	autoload/conque_term/conque.py	/^    def write_expr(self, expr, set_cursor=True, read=True):$/;"	m	class:Conque
write_latin1	autoload/conque_term/conque.py	/^    def write_latin1(self, input, set_cursor=True, read=True):$/;"	m	class:Conque
write_ord	autoload/conque_term/conque.py	/^    def write_ord(self, input, set_cursor=True, read=True):$/;"	m	class:Conque
write_plain	autoload/conque_term/conque_sole_subprocess.py	/^    def write_plain(self, text):$/;"	m	class:ConqueSoleSubprocess
write_vk	autoload/conque_term/conque_sole.py	/^    def write_vk(self, vk_code):$/;"	m	class:ConqueSole
write_vk	autoload/conque_term/conque_sole_subprocess.py	/^    def write_vk(self, vk_code):$/;"	m	class:ConqueSoleSubprocess
write_vk	autoload/conque_term/conque_sole_wrapper.py	/^    def write_vk(self, vk_code):$/;"	m	class:ConqueSoleWrapper
xterm?	ruby/command-t/controller.rb	/^    def xterm?$/;"	f	class:CommandT.Controller.ensure_appropriate_window_selection
xterm_to_rgb	autoload/conque_term/conque.py	/^    def xterm_to_rgb(self, color_code):$/;"	m	class:Conque
yS	plugin/surround.vim	/^  nmap      yS   <Plug>YSurround$/;"	m
ySS	plugin/surround.vim	/^  nmap      ySS  <Plug>YSsurround$/;"	m
ySs	plugin/surround.vim	/^  nmap      ySs  <Plug>YSsurround$/;"	m
ys	plugin/surround.vim	/^  nmap      ys   <Plug>Ysurround$/;"	m
yss	plugin/surround.vim	/^  nmap      yss  <Plug>Yssurround$/;"	m
zen_getExpandos	autoload/zencoding.vim	/^function! s:zen_getExpandos(type, key)$/;"	f
zen_getFileType	autoload/zencoding.vim	/^function! s:zen_getFileType()$/;"	f
zen_getResource	autoload/zencoding.vim	/^function! s:zen_getResource(type, name, default)$/;"	f
zen_isExtends	autoload/zencoding.vim	/^function! s:zen_isExtends(type, extend)$/;"	f
zen_mergeConfig	autoload/zencoding.vim	/^function! s:zen_mergeConfig(lhs, rhs)$/;"	f
zen_parseIntoTree	autoload/zencoding.vim	/^function! s:zen_parseIntoTree(abbr, type)$/;"	f
zen_parseTag	autoload/zencoding.vim	/^function! s:zen_parseTag(tag)$/;"	f
zen_toString	autoload/zencoding.vim	/^function! s:zen_toString(...)$/;"	f
zen_toString_haml	autoload/zencoding.vim	/^function! s:zen_toString_haml(settings, current, type, inline, filters, itemno, indent)$/;"	f
zen_toString_html	autoload/zencoding.vim	/^function! s:zen_toString_html(settings, current, type, inline, filters, itemno, indent)$/;"	f
zen_useFilter	autoload/zencoding.vim	/^function! s:zen_useFilter(filters, filter)$/;"	f
zencoding#CompleteTag	autoload/zencoding.vim	/^function! zencoding#CompleteTag(findstart, base)$/;"	f
zencoding#ExpandWord	autoload/zencoding.vim	/^function! zencoding#ExpandWord(abbr, type, orig)$/;"	f
zencoding#anchorizeURL	autoload/zencoding.vim	/^function! zencoding#anchorizeURL(flag)$/;"	f
zencoding#balanceTag	autoload/zencoding.vim	/^function! zencoding#balanceTag(flag) range$/;"	f
zencoding#expandAbbr	autoload/zencoding.vim	/^function! zencoding#expandAbbr(mode) range$/;"	f
zencoding#imageSize	autoload/zencoding.vim	/^function! zencoding#imageSize()$/;"	f
zencoding#moveNextPrev	autoload/zencoding.vim	/^function! zencoding#moveNextPrev(flag)$/;"	f
zencoding#removeTag	autoload/zencoding.vim	/^function! zencoding#removeTag()$/;"	f
zencoding#splitJoinTag	autoload/zencoding.vim	/^function! zencoding#splitJoinTag()$/;"	f
zencoding#toggleComment	autoload/zencoding.vim	/^function! zencoding#toggleComment()$/;"	f
